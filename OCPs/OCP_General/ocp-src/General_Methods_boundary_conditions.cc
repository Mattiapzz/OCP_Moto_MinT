/*-----------------------------------------------------------------------*\
 |  file: General_Methods.cc                                             |
 |                                                                       |
 |  version: 1.0   date 25/6/2020                                        |
 |                                                                       |
 |  Copyright (C) 2020                                                   |
 |                                                                       |
 |      Enrico Bertolazzi, Francesco Biral and Paolo Bosetti             |
 |      Dipartimento di Ingegneria Industriale                           |
 |      Universita` degli Studi di Trento                                |
 |      Via Sommarive 9, I-38123, Trento, Italy                          |
 |      email: enrico.bertolazzi@unitn.it                                |
 |             francesco.biral@unitn.it                                  |
 |             paolo.bosetti@unitn.it                                    |
\*-----------------------------------------------------------------------*/


#include "General.hh"
#include "General_Pars.hh"

using namespace std;
using Mechatronix::real_type;
using Mechatronix::integer;
using Mechatronix::ostream_type;

// user class in namespaces
using Mechatronix::Engine;
using Mechatronix::Road2D;


#if defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wunused-parameter"
#pragma clang diagnostic ignored "-Wsign-conversion"
#pragma clang diagnostic ignored "-Wunused-macros"
#elif defined(__llvm__) || defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wsign-conversion"
#pragma GCC diagnostic ignored "-Wunused-macros"
#elif defined(_MSC_VER)
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#endif

// map user defined functions and objects with macros
#define ALIAS_ISOAngle_R_DD(__t1) segmentRight.isoAngle_DD( __t1)
#define ALIAS_ISOAngle_R_D(__t1) segmentRight.isoAngle_D( __t1)
#define ALIAS_ISOAngle_R(__t1) segmentRight.isoAngle( __t1)
#define ALIAS_ISOAngle_L_DD(__t1) segmentLeft.isoAngle_DD( __t1)
#define ALIAS_ISOAngle_L_D(__t1) segmentLeft.isoAngle_D( __t1)
#define ALIAS_ISOAngle_L(__t1) segmentLeft.isoAngle( __t1)
#define ALIAS_ISOAngle_DD(__t1) segment.isoAngle_DD( __t1)
#define ALIAS_ISOAngle_D(__t1) segment.isoAngle_D( __t1)
#define ALIAS_ISOAngle(__t1) segment.isoAngle( __t1)
#define ALIAS_yISOright_R(__t1) segmentRight.isoRightY( __t1)
#define ALIAS_yISOright_L(__t1) segmentLeft.isoRightY( __t1)
#define ALIAS_yISOright(__t1) segment.isoRightY( __t1)
#define ALIAS_xISOright_R(__t1) segmentRight.isoRightX( __t1)
#define ALIAS_xISOright_L(__t1) segmentLeft.isoRightX( __t1)
#define ALIAS_xISOright(__t1) segment.isoRightX( __t1)
#define ALIAS_yISOleft_R(__t1) segmentRight.isoLeftY( __t1)
#define ALIAS_yISOleft_L(__t1) segmentLeft.isoLeftY( __t1)
#define ALIAS_yISOleft(__t1) segment.isoLeftY( __t1)
#define ALIAS_xISOleft_R(__t1) segmentRight.isoLeftX( __t1)
#define ALIAS_xISOleft_L(__t1) segmentLeft.isoLeftX( __t1)
#define ALIAS_xISOleft(__t1) segment.isoLeftX( __t1)
#define ALIAS_yISOMidLane_R_DD(__t1) segmentRight.isoY_DD( __t1)
#define ALIAS_yISOMidLane_R_D(__t1) segmentRight.isoY_D( __t1)
#define ALIAS_yISOMidLane_R(__t1) segmentRight.isoY( __t1)
#define ALIAS_yISOMidLane_L_DD(__t1) segmentLeft.isoY_DD( __t1)
#define ALIAS_yISOMidLane_L_D(__t1) segmentLeft.isoY_D( __t1)
#define ALIAS_yISOMidLane_L(__t1) segmentLeft.isoY( __t1)
#define ALIAS_yISOMidLane_DD(__t1) segment.isoY_DD( __t1)
#define ALIAS_yISOMidLane_D(__t1) segment.isoY_D( __t1)
#define ALIAS_yISOMidLane(__t1) segment.isoY( __t1)
#define ALIAS_xISOMidLane_R_DD(__t1) segmentRight.isoX_DD( __t1)
#define ALIAS_xISOMidLane_R_D(__t1) segmentRight.isoX_D( __t1)
#define ALIAS_xISOMidLane_R(__t1) segmentRight.isoX( __t1)
#define ALIAS_xISOMidLane_L_DD(__t1) segmentLeft.isoX_DD( __t1)
#define ALIAS_xISOMidLane_L_D(__t1) segmentLeft.isoX_D( __t1)
#define ALIAS_xISOMidLane_L(__t1) segmentLeft.isoX( __t1)
#define ALIAS_xISOMidLane_DD(__t1) segment.isoX_DD( __t1)
#define ALIAS_xISOMidLane_D(__t1) segment.isoX_D( __t1)
#define ALIAS_xISOMidLane(__t1) segment.isoX( __t1)
#define ALIAS_adherence_R(___dummy___) segmentRight.adherence()
#define ALIAS_adherence_L(___dummy___) segmentLeft.adherence()
#define ALIAS_adherence(___dummy___) segment.adherence()
#define ALIAS_sectionSpeedLimit_R(___dummy___) segmentRight.speedLimit()
#define ALIAS_sectionSpeedLimit_L(___dummy___) segmentLeft.speedLimit()
#define ALIAS_sectionSpeedLimit(___dummy___) segment.speedLimit()
#define ALIAS_rightWidth_R(__t1) segmentRight.rightWidth( __t1)
#define ALIAS_rightWidth_L(__t1) segmentLeft.rightWidth( __t1)
#define ALIAS_rightWidth(__t1) segment.rightWidth( __t1)
#define ALIAS_leftWidth_R_D(__t1) segmentRight.leftWidth_D( __t1)
#define ALIAS_leftWidth_R(__t1) segmentRight.leftWidth( __t1)
#define ALIAS_leftWidth_L_D(__t1) segmentLeft.leftWidth_D( __t1)
#define ALIAS_leftWidth_L(__t1) segmentLeft.leftWidth( __t1)
#define ALIAS_leftWidth_D(__t1) segment.leftWidth_D( __t1)
#define ALIAS_leftWidth(__t1) segment.leftWidth( __t1)
#define ALIAS_kappa_R_DD(__t1) segmentRight.saeCurvature_DD( __t1)
#define ALIAS_kappa_R_D(__t1) segmentRight.saeCurvature_D( __t1)
#define ALIAS_kappa_R(__t1) segmentRight.saeCurvature( __t1)
#define ALIAS_kappa_L_DD(__t1) segmentLeft.saeCurvature_DD( __t1)
#define ALIAS_kappa_L_D(__t1) segmentLeft.saeCurvature_D( __t1)
#define ALIAS_kappa_L(__t1) segmentLeft.saeCurvature( __t1)
#define ALIAS_kappa_DD(__t1) segment.saeCurvature_DD( __t1)
#define ALIAS_kappa_D(__t1) segment.saeCurvature_D( __t1)
#define ALIAS_kappa(__t1) segment.saeCurvature( __t1)
#define ALIAS_maxTorque_DD(__t1) pEngine -> maxTorqueOnWheelHub_DD( __t1)
#define ALIAS_maxTorque_D(__t1) pEngine -> maxTorqueOnWheelHub_D( __t1)
#define ALIAS_maxTorque(__t1) pEngine -> maxTorqueOnWheelHub( __t1)
#define ALIAS_roadLeftLateralBorder_DD(__t1) roadLeftLateralBorder.DD( __t1)
#define ALIAS_roadLeftLateralBorder_D(__t1) roadLeftLateralBorder.D( __t1)
#define ALIAS_roadRightLateralBorder_DD(__t1) roadRightLateralBorder.DD( __t1)
#define ALIAS_roadRightLateralBorder_D(__t1) roadRightLateralBorder.D( __t1)
#define ALIAS_MaxRollAngle_DD(__t1) MaxRollAngle.DD( __t1)
#define ALIAS_MaxRollAngle_D(__t1) MaxRollAngle.D( __t1)
#define ALIAS_MaxSteerAngle_DD(__t1) MaxSteerAngle.DD( __t1)
#define ALIAS_MaxSteerAngle_D(__t1) MaxSteerAngle.D( __t1)
#define ALIAS_LatSlipRear_DD(__t1) LatSlipRear.DD( __t1)
#define ALIAS_LatSlipRear_D(__t1) LatSlipRear.D( __t1)
#define ALIAS_LatSlipFront_DD(__t1) LatSlipFront.DD( __t1)
#define ALIAS_LatSlipFront_D(__t1) LatSlipFront.D( __t1)
#define ALIAS_LongSlipRear_DD(__t1) LongSlipRear.DD( __t1)
#define ALIAS_LongSlipRear_D(__t1) LongSlipRear.D( __t1)
#define ALIAS_LongSlipFront_DD(__t1) LongSlipFront.DD( __t1)
#define ALIAS_LongSlipFront_D(__t1) LongSlipFront.D( __t1)
#define ALIAS_RearWheelContact_DD(__t1) RearWheelContact.DD( __t1)
#define ALIAS_RearWheelContact_D(__t1) RearWheelContact.D( __t1)
#define ALIAS_FrontWheelContact_DD(__t1) FrontWheelContact.DD( __t1)
#define ALIAS_FrontWheelContact_D(__t1) FrontWheelContact.D( __t1)
#define ALIAS_OnlyTractionRear_DD(__t1) OnlyTractionRear.DD( __t1)
#define ALIAS_OnlyTractionRear_D(__t1) OnlyTractionRear.D( __t1)
#define ALIAS_OnlyBrakingRear_DD(__t1) OnlyBrakingRear.DD( __t1)
#define ALIAS_OnlyBrakingRear_D(__t1) OnlyBrakingRear.D( __t1)
#define ALIAS_OnlyBrakingFront_DD(__t1) OnlyBrakingFront.DD( __t1)
#define ALIAS_OnlyBrakingFront_D(__t1) OnlyBrakingFront.D( __t1)
#define ALIAS_tau__oControl_D_3(__t1, __t2, __t3) tau__oControl.D_3( __t1, __t2, __t3)
#define ALIAS_tau__oControl_D_2(__t1, __t2, __t3) tau__oControl.D_2( __t1, __t2, __t3)
#define ALIAS_tau__oControl_D_1(__t1, __t2, __t3) tau__oControl.D_1( __t1, __t2, __t3)
#define ALIAS_tau__oControl_D_3_3(__t1, __t2, __t3) tau__oControl.D_3_3( __t1, __t2, __t3)
#define ALIAS_tau__oControl_D_2_3(__t1, __t2, __t3) tau__oControl.D_2_3( __t1, __t2, __t3)
#define ALIAS_tau__oControl_D_2_2(__t1, __t2, __t3) tau__oControl.D_2_2( __t1, __t2, __t3)
#define ALIAS_tau__oControl_D_1_3(__t1, __t2, __t3) tau__oControl.D_1_3( __t1, __t2, __t3)
#define ALIAS_tau__oControl_D_1_2(__t1, __t2, __t3) tau__oControl.D_1_2( __t1, __t2, __t3)
#define ALIAS_tau__oControl_D_1_1(__t1, __t2, __t3) tau__oControl.D_1_1( __t1, __t2, __t3)
#define ALIAS_b__r__oControl_D_3(__t1, __t2, __t3) b__r__oControl.D_3( __t1, __t2, __t3)
#define ALIAS_b__r__oControl_D_2(__t1, __t2, __t3) b__r__oControl.D_2( __t1, __t2, __t3)
#define ALIAS_b__r__oControl_D_1(__t1, __t2, __t3) b__r__oControl.D_1( __t1, __t2, __t3)
#define ALIAS_b__r__oControl_D_3_3(__t1, __t2, __t3) b__r__oControl.D_3_3( __t1, __t2, __t3)
#define ALIAS_b__r__oControl_D_2_3(__t1, __t2, __t3) b__r__oControl.D_2_3( __t1, __t2, __t3)
#define ALIAS_b__r__oControl_D_2_2(__t1, __t2, __t3) b__r__oControl.D_2_2( __t1, __t2, __t3)
#define ALIAS_b__r__oControl_D_1_3(__t1, __t2, __t3) b__r__oControl.D_1_3( __t1, __t2, __t3)
#define ALIAS_b__r__oControl_D_1_2(__t1, __t2, __t3) b__r__oControl.D_1_2( __t1, __t2, __t3)
#define ALIAS_b__r__oControl_D_1_1(__t1, __t2, __t3) b__r__oControl.D_1_1( __t1, __t2, __t3)
#define ALIAS_b__f__oControl_D_3(__t1, __t2, __t3) b__f__oControl.D_3( __t1, __t2, __t3)
#define ALIAS_b__f__oControl_D_2(__t1, __t2, __t3) b__f__oControl.D_2( __t1, __t2, __t3)
#define ALIAS_b__f__oControl_D_1(__t1, __t2, __t3) b__f__oControl.D_1( __t1, __t2, __t3)
#define ALIAS_b__f__oControl_D_3_3(__t1, __t2, __t3) b__f__oControl.D_3_3( __t1, __t2, __t3)
#define ALIAS_b__f__oControl_D_2_3(__t1, __t2, __t3) b__f__oControl.D_2_3( __t1, __t2, __t3)
#define ALIAS_b__f__oControl_D_2_2(__t1, __t2, __t3) b__f__oControl.D_2_2( __t1, __t2, __t3)
#define ALIAS_b__f__oControl_D_1_3(__t1, __t2, __t3) b__f__oControl.D_1_3( __t1, __t2, __t3)
#define ALIAS_b__f__oControl_D_1_2(__t1, __t2, __t3) b__f__oControl.D_1_2( __t1, __t2, __t3)
#define ALIAS_b__f__oControl_D_1_1(__t1, __t2, __t3) b__f__oControl.D_1_1( __t1, __t2, __t3)
#define ALIAS_t__oControl_D_3(__t1, __t2, __t3) t__oControl.D_3( __t1, __t2, __t3)
#define ALIAS_t__oControl_D_2(__t1, __t2, __t3) t__oControl.D_2( __t1, __t2, __t3)
#define ALIAS_t__oControl_D_1(__t1, __t2, __t3) t__oControl.D_1( __t1, __t2, __t3)
#define ALIAS_t__oControl_D_3_3(__t1, __t2, __t3) t__oControl.D_3_3( __t1, __t2, __t3)
#define ALIAS_t__oControl_D_2_3(__t1, __t2, __t3) t__oControl.D_2_3( __t1, __t2, __t3)
#define ALIAS_t__oControl_D_2_2(__t1, __t2, __t3) t__oControl.D_2_2( __t1, __t2, __t3)
#define ALIAS_t__oControl_D_1_3(__t1, __t2, __t3) t__oControl.D_1_3( __t1, __t2, __t3)
#define ALIAS_t__oControl_D_1_2(__t1, __t2, __t3) t__oControl.D_1_2( __t1, __t2, __t3)
#define ALIAS_t__oControl_D_1_1(__t1, __t2, __t3) t__oControl.D_1_1( __t1, __t2, __t3)


namespace GeneralDefine {

  /*\
   |   ___                   _
   |  | _ ) ___ _  _ _ _  __| |__ _ _ _ _  _
   |  | _ \/ _ \ || | ' \/ _` / _` | '_| || |
   |  |___/\___/\_,_|_||_\__,_\__,_|_|  \_, |
   |    ___             _ _ _   _       |__/
   |   / __|___ _ _  __| (_) |_(_)___ _ _  ___
   |  | (__/ _ \ ' \/ _` | |  _| / _ \ ' \(_-<
   |   \___\___/_||_\__,_|_|\__|_\___/_||_/__/
  \*/

  integer
  General::boundaryConditions_numEqns() const
  { return 39; }

  void
  General::boundaryConditions_eval(
    NodeType const     & LEFT__,
    NodeType const     & RIGHT__,
    P_const_pointer_type P__,
    real_type            result__[]
  ) const {
    integer i_segment_left  = LEFT__.i_segment;
    real_type const * QL__  = LEFT__.q;
    real_type const * XL__  = LEFT__.x;
    integer i_segment_right = RIGHT__.i_segment;
    real_type const * QR__  = RIGHT__.q;
    real_type const * XR__  = RIGHT__.x;
    Road2D::SegmentClass const & segmentLeft  = pRoad->getSegmentByIndex(i_segment_left);
    Road2D::SegmentClass const & segmentRight = pRoad->getSegmentByIndex(i_segment_right);
    result__[ 0   ] = XR__[0] - XL__[0];
    result__[ 1   ] = XR__[1] - XL__[1];
    result__[ 2   ] = XR__[2] - XL__[2];
    result__[ 3   ] = XR__[3] - XL__[3];
    result__[ 4   ] = XR__[4] - XL__[4];
    result__[ 5   ] = XR__[5] - XL__[5];
    result__[ 6   ] = XR__[6] - XL__[6];
    result__[ 7   ] = XR__[7] - XL__[7];
    result__[ 8   ] = XR__[8] - XL__[8];
    result__[ 9   ] = XR__[9] - XL__[9];
    result__[ 10  ] = XR__[10] - XL__[10];
    result__[ 11  ] = XR__[11] - XL__[11];
    result__[ 12  ] = XR__[12] - XL__[12];
    result__[ 13  ] = XR__[13] - XL__[13];
    result__[ 14  ] = XR__[14] - XL__[14];
    result__[ 15  ] = XR__[15] - XL__[15];
    result__[ 16  ] = XR__[16] - XL__[16];
    result__[ 17  ] = XR__[17] - XL__[17];
    result__[ 18  ] = XR__[18] - XL__[18];
    result__[ 19  ] = XR__[19] - XL__[19];
    result__[ 20  ] = XR__[20] - XL__[20];
    result__[ 21  ] = XR__[21] - XL__[21];
    result__[ 22  ] = XR__[22] - XL__[22];
    result__[ 23  ] = XR__[23] - XL__[23];
    result__[ 24  ] = XR__[24] - XL__[24];
    result__[ 25  ] = XR__[25] - XL__[25];
    result__[ 26  ] = XR__[26] - XL__[26];
    result__[ 27  ] = XR__[27] - XL__[27];
    result__[ 28  ] = XR__[28] - XL__[28];
    result__[ 29  ] = XR__[29] - XL__[29];
    result__[ 30  ] = XR__[30] - XL__[30];
    result__[ 31  ] = XR__[31] - XL__[31];
    result__[ 32  ] = XR__[32] - XL__[32];
    result__[ 33  ] = XR__[33] - XL__[33];
    result__[ 34  ] = XR__[34] - XL__[34];
    result__[ 35  ] = XR__[35] - XL__[35];
    result__[ 36  ] = XR__[36] - XL__[36];
    result__[ 37  ] = XR__[37] - XL__[37];
    result__[ 38  ] = XR__[38] - XL__[38];
    #ifdef MECHATRONIX_DEBUG
    CHECK_NAN(result__,"boundaryConditions_eval",39);
    #endif
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  integer
  General::DboundaryConditionsDx_numRows() const
  { return 39; }

  integer
  General::DboundaryConditionsDx_numCols() const
  { return 78; }

  integer
  General::DboundaryConditionsDx_nnz() const
  { return 78; }

  void
  General::DboundaryConditionsDx_pattern(
    integer iIndex[],
    integer jIndex[]
  ) const {
    iIndex[ 0  ] = 0   ; jIndex[ 0  ] = 0   ;
    iIndex[ 1  ] = 0   ; jIndex[ 1  ] = 39  ;
    iIndex[ 2  ] = 1   ; jIndex[ 2  ] = 1   ;
    iIndex[ 3  ] = 1   ; jIndex[ 3  ] = 40  ;
    iIndex[ 4  ] = 2   ; jIndex[ 4  ] = 2   ;
    iIndex[ 5  ] = 2   ; jIndex[ 5  ] = 41  ;
    iIndex[ 6  ] = 3   ; jIndex[ 6  ] = 3   ;
    iIndex[ 7  ] = 3   ; jIndex[ 7  ] = 42  ;
    iIndex[ 8  ] = 4   ; jIndex[ 8  ] = 4   ;
    iIndex[ 9  ] = 4   ; jIndex[ 9  ] = 43  ;
    iIndex[ 10 ] = 5   ; jIndex[ 10 ] = 5   ;
    iIndex[ 11 ] = 5   ; jIndex[ 11 ] = 44  ;
    iIndex[ 12 ] = 6   ; jIndex[ 12 ] = 6   ;
    iIndex[ 13 ] = 6   ; jIndex[ 13 ] = 45  ;
    iIndex[ 14 ] = 7   ; jIndex[ 14 ] = 7   ;
    iIndex[ 15 ] = 7   ; jIndex[ 15 ] = 46  ;
    iIndex[ 16 ] = 8   ; jIndex[ 16 ] = 8   ;
    iIndex[ 17 ] = 8   ; jIndex[ 17 ] = 47  ;
    iIndex[ 18 ] = 9   ; jIndex[ 18 ] = 9   ;
    iIndex[ 19 ] = 9   ; jIndex[ 19 ] = 48  ;
    iIndex[ 20 ] = 10  ; jIndex[ 20 ] = 10  ;
    iIndex[ 21 ] = 10  ; jIndex[ 21 ] = 49  ;
    iIndex[ 22 ] = 11  ; jIndex[ 22 ] = 11  ;
    iIndex[ 23 ] = 11  ; jIndex[ 23 ] = 50  ;
    iIndex[ 24 ] = 12  ; jIndex[ 24 ] = 12  ;
    iIndex[ 25 ] = 12  ; jIndex[ 25 ] = 51  ;
    iIndex[ 26 ] = 13  ; jIndex[ 26 ] = 13  ;
    iIndex[ 27 ] = 13  ; jIndex[ 27 ] = 52  ;
    iIndex[ 28 ] = 14  ; jIndex[ 28 ] = 14  ;
    iIndex[ 29 ] = 14  ; jIndex[ 29 ] = 53  ;
    iIndex[ 30 ] = 15  ; jIndex[ 30 ] = 15  ;
    iIndex[ 31 ] = 15  ; jIndex[ 31 ] = 54  ;
    iIndex[ 32 ] = 16  ; jIndex[ 32 ] = 16  ;
    iIndex[ 33 ] = 16  ; jIndex[ 33 ] = 55  ;
    iIndex[ 34 ] = 17  ; jIndex[ 34 ] = 17  ;
    iIndex[ 35 ] = 17  ; jIndex[ 35 ] = 56  ;
    iIndex[ 36 ] = 18  ; jIndex[ 36 ] = 18  ;
    iIndex[ 37 ] = 18  ; jIndex[ 37 ] = 57  ;
    iIndex[ 38 ] = 19  ; jIndex[ 38 ] = 19  ;
    iIndex[ 39 ] = 19  ; jIndex[ 39 ] = 58  ;
    iIndex[ 40 ] = 20  ; jIndex[ 40 ] = 20  ;
    iIndex[ 41 ] = 20  ; jIndex[ 41 ] = 59  ;
    iIndex[ 42 ] = 21  ; jIndex[ 42 ] = 21  ;
    iIndex[ 43 ] = 21  ; jIndex[ 43 ] = 60  ;
    iIndex[ 44 ] = 22  ; jIndex[ 44 ] = 22  ;
    iIndex[ 45 ] = 22  ; jIndex[ 45 ] = 61  ;
    iIndex[ 46 ] = 23  ; jIndex[ 46 ] = 23  ;
    iIndex[ 47 ] = 23  ; jIndex[ 47 ] = 62  ;
    iIndex[ 48 ] = 24  ; jIndex[ 48 ] = 24  ;
    iIndex[ 49 ] = 24  ; jIndex[ 49 ] = 63  ;
    iIndex[ 50 ] = 25  ; jIndex[ 50 ] = 25  ;
    iIndex[ 51 ] = 25  ; jIndex[ 51 ] = 64  ;
    iIndex[ 52 ] = 26  ; jIndex[ 52 ] = 26  ;
    iIndex[ 53 ] = 26  ; jIndex[ 53 ] = 65  ;
    iIndex[ 54 ] = 27  ; jIndex[ 54 ] = 27  ;
    iIndex[ 55 ] = 27  ; jIndex[ 55 ] = 66  ;
    iIndex[ 56 ] = 28  ; jIndex[ 56 ] = 28  ;
    iIndex[ 57 ] = 28  ; jIndex[ 57 ] = 67  ;
    iIndex[ 58 ] = 29  ; jIndex[ 58 ] = 29  ;
    iIndex[ 59 ] = 29  ; jIndex[ 59 ] = 68  ;
    iIndex[ 60 ] = 30  ; jIndex[ 60 ] = 30  ;
    iIndex[ 61 ] = 30  ; jIndex[ 61 ] = 69  ;
    iIndex[ 62 ] = 31  ; jIndex[ 62 ] = 31  ;
    iIndex[ 63 ] = 31  ; jIndex[ 63 ] = 70  ;
    iIndex[ 64 ] = 32  ; jIndex[ 64 ] = 32  ;
    iIndex[ 65 ] = 32  ; jIndex[ 65 ] = 71  ;
    iIndex[ 66 ] = 33  ; jIndex[ 66 ] = 33  ;
    iIndex[ 67 ] = 33  ; jIndex[ 67 ] = 72  ;
    iIndex[ 68 ] = 34  ; jIndex[ 68 ] = 34  ;
    iIndex[ 69 ] = 34  ; jIndex[ 69 ] = 73  ;
    iIndex[ 70 ] = 35  ; jIndex[ 70 ] = 35  ;
    iIndex[ 71 ] = 35  ; jIndex[ 71 ] = 74  ;
    iIndex[ 72 ] = 36  ; jIndex[ 72 ] = 36  ;
    iIndex[ 73 ] = 36  ; jIndex[ 73 ] = 75  ;
    iIndex[ 74 ] = 37  ; jIndex[ 74 ] = 37  ;
    iIndex[ 75 ] = 37  ; jIndex[ 75 ] = 76  ;
    iIndex[ 76 ] = 38  ; jIndex[ 76 ] = 38  ;
    iIndex[ 77 ] = 38  ; jIndex[ 77 ] = 77  ;
  }

  void
  General::DboundaryConditionsDx_sparse(
    NodeType const     & LEFT__,
    NodeType const     & RIGHT__,
    P_const_pointer_type P__,
    real_type            result__[]
  ) const {
    integer i_segment_left  = LEFT__.i_segment;
    real_type const * QL__  = LEFT__.q;
    real_type const * XL__  = LEFT__.x;
    integer i_segment_right = RIGHT__.i_segment;
    real_type const * QR__  = RIGHT__.q;
    real_type const * XR__  = RIGHT__.x;
    Road2D::SegmentClass const & segmentLeft  = pRoad->getSegmentByIndex(i_segment_left);
    Road2D::SegmentClass const & segmentRight = pRoad->getSegmentByIndex(i_segment_right);
    result__[ 0   ] = -1;
    result__[ 1   ] = 1;
    result__[ 2   ] = -1;
    result__[ 3   ] = 1;
    result__[ 4   ] = -1;
    result__[ 5   ] = 1;
    result__[ 6   ] = -1;
    result__[ 7   ] = 1;
    result__[ 8   ] = -1;
    result__[ 9   ] = 1;
    result__[ 10  ] = -1;
    result__[ 11  ] = 1;
    result__[ 12  ] = -1;
    result__[ 13  ] = 1;
    result__[ 14  ] = -1;
    result__[ 15  ] = 1;
    result__[ 16  ] = -1;
    result__[ 17  ] = 1;
    result__[ 18  ] = -1;
    result__[ 19  ] = 1;
    result__[ 20  ] = -1;
    result__[ 21  ] = 1;
    result__[ 22  ] = -1;
    result__[ 23  ] = 1;
    result__[ 24  ] = -1;
    result__[ 25  ] = 1;
    result__[ 26  ] = -1;
    result__[ 27  ] = 1;
    result__[ 28  ] = -1;
    result__[ 29  ] = 1;
    result__[ 30  ] = -1;
    result__[ 31  ] = 1;
    result__[ 32  ] = -1;
    result__[ 33  ] = 1;
    result__[ 34  ] = -1;
    result__[ 35  ] = 1;
    result__[ 36  ] = -1;
    result__[ 37  ] = 1;
    result__[ 38  ] = -1;
    result__[ 39  ] = 1;
    result__[ 40  ] = -1;
    result__[ 41  ] = 1;
    result__[ 42  ] = -1;
    result__[ 43  ] = 1;
    result__[ 44  ] = -1;
    result__[ 45  ] = 1;
    result__[ 46  ] = -1;
    result__[ 47  ] = 1;
    result__[ 48  ] = -1;
    result__[ 49  ] = 1;
    result__[ 50  ] = -1;
    result__[ 51  ] = 1;
    result__[ 52  ] = -1;
    result__[ 53  ] = 1;
    result__[ 54  ] = -1;
    result__[ 55  ] = 1;
    result__[ 56  ] = -1;
    result__[ 57  ] = 1;
    result__[ 58  ] = -1;
    result__[ 59  ] = 1;
    result__[ 60  ] = -1;
    result__[ 61  ] = 1;
    result__[ 62  ] = -1;
    result__[ 63  ] = 1;
    result__[ 64  ] = -1;
    result__[ 65  ] = 1;
    result__[ 66  ] = -1;
    result__[ 67  ] = 1;
    result__[ 68  ] = -1;
    result__[ 69  ] = 1;
    result__[ 70  ] = -1;
    result__[ 71  ] = 1;
    result__[ 72  ] = -1;
    result__[ 73  ] = 1;
    result__[ 74  ] = -1;
    result__[ 75  ] = 1;
    result__[ 76  ] = -1;
    result__[ 77  ] = 1;
    #ifdef MECHATRONIX_DEBUG
    CHECK_NAN(result__,"DboundaryConditionsDxp_sparse",78);
    #endif
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  integer
  General::DboundaryConditionsDp_numRows() const
  { return 39; }

  integer
  General::DboundaryConditionsDp_numCols() const
  { return 0; }

  integer
  General::DboundaryConditionsDp_nnz() const
  { return 0; }

  void
  General::DboundaryConditionsDp_pattern(
    integer iIndex[],
    integer jIndex[]
  ) const {

  }

  void
  General::DboundaryConditionsDp_sparse(
    NodeType const     & LEFT__,
    NodeType const     & RIGHT__,
    P_const_pointer_type P__,
    real_type            result__[]
  ) const {
    // EMPTY

  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  integer
  General::adjointBC_numEqns() const
  { return 78; }

  void
  General::adjointBC_eval(
    NodeType2 const             & LEFT__,
    NodeType2 const             & RIGHT__,
    P_const_pointer_type          P__,
    OMEGA_full_const_pointer_type OMEGA__,
    real_type                     result__[]
  ) const {
    integer i_segment_left  = LEFT__.i_segment;
    real_type const * QL__  = LEFT__.q;
    real_type const * XL__  = LEFT__.x;
    real_type const * LL__  = LEFT__.lambda;
    integer i_segment_right = RIGHT__.i_segment;
    real_type const * QR__  = RIGHT__.q;
    real_type const * XR__  = RIGHT__.x;
    real_type const * LR__  = RIGHT__.lambda;
    Road2D::SegmentClass const & segmentLeft  = pRoad->getSegmentByIndex(i_segment_left);
    Road2D::SegmentClass const & segmentRight = pRoad->getSegmentByIndex(i_segment_right);
    real_type t1   = OMEGA__[0];
    real_type t2   = XL__[0];
    real_type t6   = ModelPars[130];
    real_type t8   = XL__[37];
    real_type t10  = ALIAS_kappa_L(QL__[0]);
    real_type t13  = 1.0 / (t10 * t8 - 1);
    real_type t14  = XL__[38];
    real_type t15  = cos(t14);
    real_type t17  = sin(t14);
    real_type t18  = XL__[1];
    real_type t20  = t2 * t15 - t18 * t17;
    real_type t21  = t20 * t13;
    real_type t22  = ModelPars[24];
    real_type t23  = LL__[0];
    real_type t26  = XL__[7];
    real_type t27  = cos(t26);
    real_type t28  = ModelPars[73];
    real_type t30  = ModelPars[199];
    real_type t31  = t30 * t28 * t27;
    real_type t32  = sin(t26);
    real_type t33  = ModelPars[23];
    real_type t34  = ModelPars[189];
    real_type t35  = -t33 + t34;
    real_type t37  = ModelPars[75];
    real_type t38  = t33 * t37;
    real_type t39  = t28 * t35 - t38;
    real_type t40  = t39 * t32;
    real_type t41  = ModelPars[72];
    real_type t42  = ModelPars[68];
    real_type t43  = t42 * t41;
    real_type t44  = ModelPars[65];
    real_type t45  = cos(t44);
    real_type t47  = t30 * t28 * t45;
    real_type t48  = sin(t44);
    real_type t50  = -t28 * t35;
    real_type t51  = t50 + t38;
    real_type t52  = t51 * t48;
    real_type t53  = ModelPars[186];
    real_type t54  = cos(t53);
    real_type t55  = t54 * t43;
    real_type t56  = ModelPars[177];
    real_type t57  = ModelPars[74];
    real_type t58  = t57 * t56;
    real_type t59  = XL__[8];
    real_type t60  = t57 * t59;
    real_type t61  = ModelPars[28];
    real_type t62  = t61 * t22;
    real_type t63  = -t31 + t40 - t43 + t47 + t52 + t55 + t58 - t60 - t62;
    real_type t64  = XL__[3];
    real_type t65  = cos(t64);
    real_type t66  = t65 * t63;
    real_type t67  = XL__[4];
    real_type t68  = ModelPars[64];
    real_type t69  = t67 + t68;
    real_type t70  = cos(t69);
    real_type t71  = t70 * t21;
    real_type t72  = t71 * t66;
    real_type t73  = t39 * t27;
    real_type t75  = t30 * t28 * t32;
    real_type t76  = t51 * t45;
    real_type t78  = t30 * t28 * t48;
    real_type t79  = sin(t53);
    real_type t80  = t79 * t43;
    real_type t81  = ModelPars[27];
    real_type t82  = t81 * t22;
    real_type t83  = t73 + t75 + t76 - t78 - t80 + t82;
    real_type t84  = t65 * t83;
    real_type t85  = sin(t69);
    real_type t87  = t85 * t84 * t21;
    real_type t88  = t65 * t22;
    real_type t89  = XL__[5];
    real_type t90  = t89 * t88;
    real_type t91  = sin(t64);
    real_type t92  = ModelPars[140];
    real_type t93  = t92 * t57;
    real_type t94  = ModelPars[168];
    real_type t95  = ModelPars[190];
    real_type t96  = t95 * t94;
    real_type t97  = t93 + t96;
    real_type t98  = t97 * t91;
    real_type t99  = XL__[6];
    real_type t101 = t99 * t98 + t90;
    real_type t104 = LL__[4];
    real_type t106 = t51 * t32;
    real_type t107 = t39 * t48;
    real_type t109 = t91 * (t31 + t106 + t43 - t47 + t107 - t55 - t58 + t60 + t62);
    real_type t114 = t91 * t22;
    real_type t115 = t89 * t114;
    real_type t116 = -t97;
    real_type t117 = t99 * t116;
    real_type t122 = -t71 * t109 - t85 * t83 * t91 * t21 - t20 * t13 * (t65 * t117 + t115);
    real_type t123 = LL__[5];
    real_type t125 = t97 * t21;
    real_type t126 = t70 * t99;
    real_type t127 = LL__[6];
    real_type t130 = t31 - t40;
    real_type t133 = t73 + t75;
    real_type t135 = t85 * t133 * t21;
    real_type t137 = LL__[7];
    real_type t139 = t13 * t57;
    real_type t140 = t85 * t20;
    real_type t141 = LL__[8];
    result__[ 0   ] = -t1 + t6 * (2 * t2 - 2 * ModelPars[126]) - t23 * t22 * t21 + t104 * (-t101 * t21 + t72 - t87) + t123 * t122 + t127 * t126 * t125 + t137 * (-t70 * t130 * t21 - t135) + t141 * t140 * t139;
    real_type t144 = OMEGA__[1];
    real_type t149 = LL__[1];
    real_type t155 = LL__[3];
    real_type t161 = -t85 * t63 * t21 - t70 * t83 * t21;
    real_type t166 = t65 * t97;
    real_type t173 = -t130;
    real_type t174 = t173 * t91;
    real_type t177 = -t70 * t133 * t91 * t21 - t85 * t174 * t21;
    real_type t180 = t13 * t91 * t57;
    real_type t181 = t70 * t20;
    real_type t182 = t141 * t181;
    result__[ 1   ] = -t144 + t6 * (2 * t18 - 2 * ModelPars[127]) - t149 * t22 * t21 + t155 * (t101 * t21 - t72 + t87) + t123 * t161 + t127 * (-t85 * t99 * t91 * t125 - t166 * t21) + t137 * t177 + t182 * t180;
    real_type t189 = OMEGA__[2];
    real_type t192 = t89 * t65;
    real_type t195 = ModelPars[120];
    real_type t197 = t92 * t195 * t57;
    real_type t199 = ModelPars[200] * t96;
    real_type t200 = ModelPars[147];
    real_type t201 = -t92 * t60 + t197 - t199 - t200;
    real_type t202 = t201 * t91;
    real_type t204 = -t63 * t192 - t99 * t202;
    real_type t207 = t27 * t27;
    real_type t212 = t33 * t33;
    real_type t213 = t37 * t212;
    real_type t214 = ModelPars[14];
    real_type t215 = ModelPars[19];
    real_type t216 = -(t33 - t34 - t30) * (t33 - t34 + t30) * t28 - t213 + t214 - t215;
    real_type t217 = t216 * t207;
    real_type t220 = ModelPars[148];
    real_type t221 = t30 * t50 - t220;
    real_type t222 = t221 * t32 * t27;
    real_type t223 = 2 * t222;
    real_type t224 = t45 * t45;
    real_type t225 = -t216;
    real_type t226 = t225 * t224;
    real_type t228 = t221 * t48 * t45;
    real_type t229 = 2 * t228;
    real_type t230 = t54 * t54;
    real_type t231 = t42 * t42;
    real_type t232 = t231 * t41;
    real_type t233 = ModelPars[13];
    real_type t234 = ModelPars[18];
    real_type t235 = -t232 - t233 + t234;
    real_type t236 = t235 * t230;
    real_type t237 = ModelPars[145];
    real_type t238 = t41 * t237;
    real_type t240 = t54 * t42 * t238;
    real_type t241 = ModelPars[141];
    real_type t243 = t79 * t42;
    real_type t244 = t243 * t41 * t241;
    real_type t245 = t59 * t59;
    real_type t246 = t245 * t57;
    real_type t247 = t246 / 2;
    real_type t249 = t57 * t195 * t59;
    real_type t252 = (t195 - t56 / 2) * t58;
    real_type t253 = t237 * t43;
    real_type t254 = t81 * t81;
    real_type t255 = t61 * t61;
    real_type t256 = -t254 + t255;
    real_type t258 = t256 * t22 / 2;
    real_type t259 = ModelPars[9];
    real_type t260 = t259 / 2;
    real_type t261 = ModelPars[11];
    real_type t262 = t261 / 2;
    real_type t263 = t217 + t223 + t226 - t229 + t236 - t240 + t244 + t247 - t249 + t252 + t232 + t253 + t258 - t234 + t260 - t262 + t233;
    real_type t265 = t85 * t21;
    real_type t269 = ModelPars[22];
    real_type t270 = t269 + t92;
    real_type t271 = t270 * t57;
    real_type t272 = t92 * t271;
    real_type t273 = t95 * t95;
    real_type t274 = t94 * t273;
    real_type t276 = t94 * t95 * t269;
    real_type t277 = ModelPars[12];
    real_type t278 = ModelPars[16];
    real_type t279 = ModelPars[149];
    real_type t280 = ModelPars[150];
    real_type t281 = t272 + t274 + t276 - t277 + t278 - t279 + t280;
    real_type t284 = -t99 * t281 * t91 - t83 * t192;
    real_type t288 = t241 * t43;
    real_type t289 = 2 * t221;
    real_type t292 = t32 * t225 * t27;
    real_type t294 = -t289 * t224;
    real_type t296 = t48 * t225 * t45;
    real_type t297 = -t235;
    real_type t300 = (t297 * t79 + t288) * t54;
    real_type t301 = t243 * t238;
    real_type t303 = t57 * t270 * t59;
    real_type t304 = t56 * t271;
    real_type t305 = t81 * t62;
    real_type t306 = ModelPars[0];
    real_type t307 = t289 * t207 - t288 + t292 + t294 - t296 + t300 + t301 - t303 + t304 - t305 - t306;
    real_type t308 = t307 * t65;
    real_type t309 = t70 * t70;
    real_type t316 = t263 * t91;
    real_type t318 = t309 * t21;
    real_type t321 = t91 * t307;
    real_type t325 = t65 * t65;
    real_type t329 = t89 * t91;
    real_type t332 = t99 * t201;
    real_type t340 = t91 * t65;
    real_type t341 = t83 * t89;
    real_type t344 = t99 * t281;
    real_type t349 = t89 * t99;
    real_type t352 = t89 * t89;
    real_type t353 = t352 * t22;
    real_type t354 = 2 * t244;
    real_type t355 = t254 * t22;
    real_type t356 = ModelPars[10];
    real_type t357 = t217 + t223 + t226 - t229 - t353 + t236 + t354 - t355 + t232 + t233 - t234 + t259 - t356;
    real_type t360 = t99 * t97;
    real_type t368 = t34 * t33;
    real_type t370 = t34 * t34;
    real_type t372 = t30 * t30;
    real_type t374 = 2 * t212 - 4 * t368 + 2 * t370 - 2 * t372;
    real_type t376 = 2 * t213;
    real_type t377 = 2 * t214;
    real_type t378 = 2 * t215;
    real_type t379 = t28 * t374 + t376 - t377 + t378;
    real_type t383 = -t30 * t33 + t30 * t34;
    real_type t384 = 4 * t383;
    real_type t386 = 4 * t220;
    real_type t387 = t28 * t384 + t386;
    real_type t392 = -t28 * t374 - t376 + t377 - t378;
    real_type t393 = t224 * t392;
    real_type t396 = -t28 * t384 - t386;
    real_type t398 = t45 * t48 * t396;
    real_type t399 = 2 * t297;
    real_type t400 = t230 * t399;
    real_type t401 = 2 * t240;
    real_type t402 = 2 * t249;
    real_type t405 = t56 * t56;
    real_type t406 = -2 * t56 * t195 + t405;
    real_type t407 = t57 * t406;
    real_type t408 = 2 * t232;
    real_type t409 = 2 * t253;
    real_type t411 = -t256 * t22;
    real_type t412 = 2 * t233;
    real_type t413 = 2 * t234;
    real_type t414 = t27 * t32 * t387 + t207 * t379 - t246 - t259 + t261 - t354 + t393 + t398 + t400 + t401 + t402 + t407 - t408 - t409 + t411 - t412 + t413;
    real_type t420 = t224 * t387;
    real_type t422 = t45 * t48 * t392;
    real_type t424 = 2 * t288;
    real_type t426 = (t399 * t79 + t424) * t54;
    real_type t427 = -t270;
    real_type t429 = 2 * t57 * t427;
    real_type t431 = 2 * t301;
    real_type t434 = t56 * t269 + t56 * t92;
    real_type t436 = 2 * t57 * t434;
    real_type t437 = 2 * t305;
    real_type t438 = 2 * t306;
    real_type t439 = t27 * t32 * t379 + t207 * t396 + t59 * t429 + t420 + t422 - t424 + t426 + t431 + t436 - t437 - t438;
    real_type t443 = t30 * t28;
    real_type t444 = t443 * t89 * t27;
    real_type t445 = 2 * t444;
    real_type t446 = 2 * t35;
    real_type t448 = 2 * t38;
    real_type t449 = t446 * t28 - t448;
    real_type t450 = t89 * t449;
    real_type t452 = 2 * t47;
    real_type t455 = -t446 * t28 + t448;
    real_type t456 = t48 * t455;
    real_type t457 = 2 * t55;
    real_type t458 = 2 * t43;
    real_type t459 = 2 * t58;
    real_type t460 = 2 * t60;
    real_type t461 = 2 * t62;
    real_type t469 = t89 * t455;
    real_type t471 = t449 * t48;
    real_type t482 = t32 * t30 * t89 * t28;
    real_type t483 = 2 * t482;
    real_type t485 = 2 * t78;
    real_type t486 = 2 * t80;
    real_type t487 = 2 * t82;
    real_type t488 = t45 * t449 + t485 + t486 - t487;
    real_type t492 = t92 * t269;
    real_type t493 = t92 * t92;
    real_type t494 = -t492 - t493;
    real_type t503 = 2 * t57 * t494 - 2 * t274 - 2 * t276 + 2 * t277 - 2 * t278 + 2 * t279 - 2 * t280;
    real_type t508 = t45 * t455 - t485 - t486 + t487;
    real_type t513 = 2 * t368;
    real_type t514 = -t212 + t513 - t370 + t372;
    real_type t516 = t28 * t514 - t213 + t214 - t215;
    real_type t519 = -2 * t383;
    real_type t521 = 2 * t220;
    real_type t522 = t28 * t519 - t521;
    real_type t527 = -t28 * t514 + t213 - t214 + t215;
    real_type t528 = t224 * t527;
    real_type t531 = -t28 * t519 + t521;
    real_type t533 = t45 * t48 * t531;
    real_type t534 = t27 * t32 * t522 + t207 * t516 + t232 + t233 - t234 + t236 + t259 - t353 + t354 - t355 - t356 + t528 + t533;
    real_type t536 = 2 * t116;
    real_type t541 = -t57 * t406;
    real_type t542 = t254 + t255;
    real_type t543 = t542 * t22;
    real_type t544 = t65 * t329 * t99 * t536 + t325 * t534 + t246 + t353 - t354 + t356 - t401 - t402 + t409 + t541 + t543;
    real_type t550 = t57 * t493;
    real_type t554 = ModelPars[151];
    real_type t555 = t57 * t492 + t550 + t95 * (t269 + t95) * t94 + t554 + t277;
    real_type t561 = -t201;
    real_type t564 = t99 * t561;
    real_type t565 = t91 * t564;
    real_type t575 = t212 - t513 + t370 + t372;
    real_type t577 = ModelPars[17];
    real_type t578 = ModelPars[15];
    real_type t579 = t575 * t28 + t213 + t577 + t578;
    real_type t581 = t579 * t91 * t21;
    real_type t597 = t13 * t99;
    real_type t598 = t20 * t597;
    real_type t599 = t278 * t65;
    real_type t604 = -t21 * t91 * t278 + t85 * t599 * t598;
    real_type t605 = LL__[9];
    real_type t607 = t13 * t91;
    real_type t608 = t577 * t20;
    real_type t609 = LL__[10];
    result__[ 2   ] = t6 * (2 * XL__[2] - 2 * ModelPars[155]) - t189 + t23 * t122 + t149 * t161 + t155 * (-t85 * t204 * t21 + t70 * (-2 * t265 * t65 * t263 - t284 * t21) - 2 * t309 * t308 * t21 + t308 * t21) + t104 * (-2 * t318 * t65 * t316 + t70 * (2 * t265 * t65 * t321 - (2 * t99 * t201 * t325 - 2 * t329 * t66 - t332) * t21) - t85 * (-2 * t99 * t281 * t325 + 2 * t341 * t340 + t344) * t21 - t20 * t13 * (-2 * t349 * t97 * t325 - t65 * t91 * t357 + t89 * t360)) + t123 * (-t318 * t325 * t414 + t70 * (-t265 * t325 * t439 - t20 * t13 * (t325 * (-t445 + t32 * t450 + t89 * (t452 + t456 + t457 - t458 + t459 - t460 - t461)) + 2 * t340 * t99 * t201 + t445 + t32 * t469 + t89 * (-t452 + t471 - t457 + t458 - t459 + t460 + t461))) - t140 * t13 * (t325 * (t27 * t469 + t89 * t488 - t483) + t340 * t99 * t503 + t27 * t450 + t483 + t89 * t508) - t20 * t13 * t544) + t127 * (-t70 * (-t349 * t98 + t555 * t65) * t21 + t265 * t561 * t65 + t565 * t21) + t137 * (-t85 * t329 * t133 * t21 + t70 * t174 * t89 * t21 - t581) + t141 * (2 * t85 * t57 * t20 * t13 * (-t99 * t65 * t92 / 2 + t329 / 2) + t91 * t271 * t21) + t605 * t604 - t609 * t608 * t607;
    real_type t612 = OMEGA__[3];
    result__[ 3   ] = -t612 + t6 * (2 * t64 - 2 * ModelPars[91]) - LL__[19] * t21;
    real_type t619 = OMEGA__[4];
    result__[ 4   ] = -t619 + t6 * (2 * t67 - 2 * ModelPars[188]) - LL__[20] * t21;
    real_type t626 = OMEGA__[5];
    result__[ 5   ] = -t626 + t6 * (2 * t89 - 2 * ModelPars[69]) - LL__[21] * t21;
    real_type t633 = OMEGA__[6];
    result__[ 6   ] = -t633 + t6 * (2 * t99 - 2 * ModelPars[159]) - LL__[22] * t21;
    real_type t640 = OMEGA__[7];
    result__[ 7   ] = -t640 + t6 * (2 * t26 - 2 * ModelPars[66]) - LL__[23] * t21;
    real_type t647 = OMEGA__[8];
    result__[ 8   ] = -t647 + t6 * (2 * t59 - 2 * ModelPars[179]) - LL__[24] * t21;
    real_type t654 = OMEGA__[9];
    result__[ 9   ] = -t654 + t6 * (2 * XL__[9] - 2 * ModelPars[192]) - LL__[25] * t21;
    real_type t662 = OMEGA__[10];
    real_type t663 = XL__[10];
    result__[ 10  ] = -t662 + t6 * (2 * t663 - 2 * ModelPars[196]) - LL__[26] * t21;
    real_type t670 = OMEGA__[11];
    real_type t671 = XL__[11];
    result__[ 11  ] = -t670 + t6 * (2 * t671 - 2 * ModelPars[202]) - LL__[27] * t21;
    real_type t678 = OMEGA__[12];
    result__[ 12  ] = -t678 + t6 * (2 * XL__[12] - 2 * ModelPars[194]) - LL__[28] * t21;
    real_type t686 = OMEGA__[13];
    real_type t687 = XL__[13];
    result__[ 13  ] = -t686 + t6 * (2 * t687 - 2 * ModelPars[198]) - LL__[29] * t21;
    real_type t694 = OMEGA__[14];
    real_type t695 = XL__[14];
    result__[ 14  ] = -t694 + t6 * (2 * t695 - 2 * ModelPars[204]) - LL__[30] * t21;
    real_type t702 = OMEGA__[15];
    real_type t703 = XL__[15];
    result__[ 15  ] = -t702 + t6 * (2 * t703 - 2 * ModelPars[158]) - LL__[31] * t21;
    real_type t710 = OMEGA__[16];
    real_type t711 = XL__[16];
    result__[ 16  ] = -t710 + t6 * (2 * t711 - 2 * ModelPars[176]) - LL__[32] * t21;
    real_type t718 = OMEGA__[17];
    real_type t724 = t13 * t65;
    real_type t732 = t609 * t577 * t21;
    result__[ 17  ] = -t718 + t6 * (2 * XL__[17] - 2 * ModelPars[172]) - t104 * t608 * t724 - t123 * t608 * t607 - t137 * t577 * t21 - t732;
    real_type t733 = OMEGA__[18];
    real_type t739 = t70 * t278;
    real_type t751 = t605 * t20 * t13 * t278;
    result__[ 18  ] = -t733 + t6 * (2 * XL__[18] - 2 * ModelPars[170]) + t155 * t739 * t598 + t104 * (-t265 * t91 * t278 * t99 - t599 * t21) + t123 * t604 - t751;
    real_type t752 = OMEGA__[19];
    real_type t758 = t51 * t27;
    real_type t759 = t39 * t45;
    real_type t760 = t758 - t75 + t759 + t78 + t80 - t82;
    real_type t761 = t760 * t65;
    real_type t770 = t63 * t91;
    real_type t773 = t760 * t91;
    real_type t780 = LL__[2];
    real_type t785 = -4 * t221;
    real_type t789 = -t785 * t224;
    real_type t790 = 2 * t296;
    real_type t791 = -t399;
    real_type t794 = (t791 * t79 - t424) * t54;
    real_type t796 = 2 * t304;
    real_type t797 = t785 * t207 - 2 * t292 + 2 * t303 + t424 - t431 + t437 + t438 + t789 + t790 + t794 - t796;
    real_type t805 = 2 * t216;
    real_type t809 = -t224 * t805;
    real_type t810 = 4 * t228;
    real_type t811 = t791 * t230;
    real_type t812 = t256 * t22;
    real_type t813 = t207 * t805 + 4 * t222 + t246 + t259 - t261 + t354 - t401 - t402 + t408 + t409 + t412 - t413 + t541 + t809 - t810 + t811 + t812;
    real_type t818 = t216 * t224;
    real_type t819 = t297 * t230;
    real_type t820 = t225 * t207 - t223 + t229 - t232 - t233 + t234 + t261 + t353 - t354 + t355 + t818 + t819;
    real_type t837 = t201 * t65;
    real_type t851 = t224 * t379;
    real_type t853 = t45 * t48 * t387;
    real_type t854 = t27 * t32 * t396 + t207 * t392 + t246 + t259 - t261 + t354 - t401 - t402 + t408 + t409 + t412 - t413 + t541 + t811 + t812 + t851 + t853;
    real_type t857 = t89 * t51;
    real_type t859 = t759 + t80 + t78 - t82;
    real_type t861 = t27 * t857 + t89 * t859 - t482;
    real_type t864 = t57 * t494 - t274 - t276 + t277 - t278 + t279 - t280;
    real_type t872 = t32 * t857;
    real_type t883 = t224 * t522;
    real_type t885 = t45 * t48 * t527;
    real_type t888 = (t235 * t79 - t288) * t54;
    real_type t890 = -t57 * t434;
    real_type t891 = t27 * t32 * t516 + t207 * t531 + t288 - t301 + t303 + t305 + t306 + t883 + t885 + t888 + t890;
    real_type t897 = t70 * t201 * t21;
    real_type t898 = -t555;
    real_type t902 = t89 * t97 * t21;
    real_type t905 = t13 * t93;
    real_type t906 = t99 * t20;
    real_type t912 = t703 * t20;
    real_type t913 = LL__[11];
    real_type t916 = sin(t711);
    real_type t918 = cos(t711);
    real_type t920 = t916 * t65 - t918 * t91;
    real_type t923 = t85 * t99 * t920 * t21;
    real_type t926 = t65 * t918 + t91 * t916;
    real_type t927 = t926 * t21;
    real_type t929 = LL__[12];
    real_type t932 = ModelPars[118];
    real_type t933 = -ModelPars[116] + t932;
    real_type t937 = -t933;
    real_type t938 = t916 * t937;
    real_type t942 = LL__[14];
    real_type t945 = t918 * t937;
    real_type t952 = LL__[15];
    real_type t955 = ModelPars[119];
    real_type t956 = -t955 - t695;
    real_type t960 = LL__[17];
    real_type t967 = LL__[18];
    result__[ 19  ] = -t752 + t6 * (2 * XL__[19] - 2 * ModelPars[174]) + t149 * (-t72 - t85 * t761 * t21 - t20 * t13 * (t91 * t117 - t90)) + t780 * (-t70 * t770 * t21 - t85 * t773 * t21 - (t99 * t166 - t115) * t21) + t155 * (-2 * t265 * t341 + t70 * (2 * t21 * t89 * t63 - t85 * t797 * t21) - t309 * t20 * t13 * t813 - t20 * t13 * t820) + t104 * (2 * t309 * t321 * t21 + t70 * (2 * t265 * t316 - (-t99 * t281 * t65 + t83 * t329) * t21) - t85 * (t89 * t770 - t99 * t837) * t21 - t321 * t21) + t123 * (-t318 * t65 * t439 + t70 * (-t265 * t65 * t854 - t20 * t13 * (t91 * t99 * t864 + t65 * t861)) - t140 * t13 * (t65 * (t444 + t872 + t89 * (-t47 + t107 - t55 + t43 - t58 + t60 + t62)) + t565) - t21 * t65 * t891) + t127 * (-t85 * t898 * t21 - t897 + t902) - t141 * t70 * t906 * t905 + t605 * t739 * t598 + t913 * t912 * t607 + t929 * (t923 - t927) - t942 * ((t933 * t918 - t671 - t932) * t65 - t91 * (t938 - t663)) * t21 - t952 * ((t945 + t932 + t671) * t91 + t65 * (t933 * t916 + t663)) * t21 - t960 * (t956 * t65 + t91 * t687) * t21 - t967 * (t65 * t687 - t956 * t91) * t21;
    real_type t970 = OMEGA__[20];
    real_type t985 = -t70 * t773 * t21 - t265 * t109;
    real_type t989 = t265 * t66;
    real_type t1004 = t542 * t22 / 2;
    real_type t1005 = t356 / 2;
    real_type t1013 = t89 * t39;
    real_type t1023 = -t57 * t494;
    real_type t1024 = t1023 + t274 + t276 - t277 + t278 - t279 + t280;
    real_type t1032 = -t542 * t22;
    real_type t1042 = -t575 * t28 - t213 - t577 - t578;
    real_type t1053 = t195 - t59;
    real_type t1057 = LL__[13];
    real_type t1065 = t32 * t33;
    real_type t1067 = t13 * t27;
    real_type t1068 = t33 * t20;
    real_type t1071 = -t85 * t1068 * t1067 + t71 * t1065;
    real_type t1072 = LL__[16];
    real_type t1077 = t70 * t1068 * t1067 + t265 * t1065;
    result__[ 20  ] = -t970 + t6 * (2 * XL__[20] - 2 * ModelPars[187]) + t23 * (-t70 * t63 * t21 - t85 * t760 * t21) + t149 * t985 + t780 * (t70 * t761 * t21 - t989) + t155 * (-t85 * t332 * t21 - t70 * t344 * t21) + t104 * (t70 * t204 * t21 - t85 * t284 * t21 + 2 * t21 * t65 * (-t240 + t247 - t249 - t244 + t252 + t253 + t1004 + t1005)) + t123 * (-t181 * t13 * (t65 * t564 + t91 * (-t444 + t32 * t1013 + t89 * (t47 + t52 + t55 - t43 + t58 - t60 - t62))) - t140 * t13 * (t65 * t99 * t1024 + t91 * t861) - t21 * t91 * (t401 - t246 + t402 + t354 + t407 - t409 + t1032 - t356)) - t127 * t564 * t21 - t137 * t1042 * t21 - t141 * t271 * t21 + t751 + t732 - t913 * t140 * t597 + t929 * t126 * t927 + t1057 * (-t70 * t1053 * t21 - t85 * t427 * t21) + t952 * (-t85 * t1053 * t21 - t70 * t270 * t21) + t1072 * t1071 + t967 * t1077;
    real_type t1079 = OMEGA__[21];
    real_type t1099 = t758 - t75;
    result__[ 21  ] = -t1079 + t6 * (2 * XL__[21] - 2 * ModelPars[163]) + t149 * t114 * t21 - t780 * t88 * t21 - t155 * t360 * t21 + t104 * (t70 * t84 * t21 + t989) + t123 * t985 + t127 * t85 * t99 * t125 + t137 * (-t70 * t1099 * t21 - t85 * t130 * t21) - t182 * t139 - t952 * t21 - t967 * t21;
    real_type t1109 = OMEGA__[22];
    real_type t1121 = -t272 - t274 - t276 - t277 - t554;
    real_type t1126 = -t1121;
    real_type t1134 = t1023 + t274 + t276 + t277 + t554;
    real_type t1141 = t550 + t274 + t277 + t554;
    real_type t1146 = -t926;
    real_type t1151 = t942 * t20;
    result__[ 22  ] = -t1109 + t6 * (2 * XL__[22] - 2 * ModelPars[157]) - t149 * t166 * t21 - t780 * t91 * t20 * t13 * t97 + t155 * (-t85 * t1121 * t21 - t897 + t902) + t104 * (t70 * t1126 * t91 * t21 + t85 * t202 * t21) + t123 * (-t71 * t65 * t1134 - t85 * t837 * t21) - t127 * t1141 * t21 + t913 * t70 * t21 - t929 * t85 * t1146 * t21 - t1151 * t13 * t92;
    real_type t1153 = OMEGA__[23];
    real_type t1159 = t31 + t106;
    result__[ 23  ] = -t1153 + t6 * (2 * XL__[23] - 2 * ModelPars[162]) + t23 * (-t181 * t13 * t1159 - t135) + t149 * t177 + t780 * (t70 * t133 * t65 * t21 + t85 * t65 * t173 * t21) + t104 * (t85 * t1099 * t89 * t65 * t21 - t70 * t192 * t1159 * t21 - t579 * t65 * t21) + t123 * (-t71 * t91 * (t444 + t872) - t265 * t91 * (t27 * t1013 + t482) - t581) - t137 * t579 * t21 - t732 - t1072 * t1071 - t967 * t1077;
    real_type t1199 = OMEGA__[24];
    real_type t1232 = t57 * t427;
    result__[ 24  ] = -t1199 + t6 * (2 * XL__[24] - 2 * ModelPars[178]) + t23 * t140 * t139 + t149 * t181 * t180 - t780 * t181 * t13 * t65 * t57 - t155 * t70 * t906 * t905 + t104 * (t85 * t57 * (t99 * t91 * t92 + t192) * t21 + t65 * t271 * t21) + t123 * (-t140 * t13 * (t65 * t99 * t93 - t57 * t329) - t20 * t607 * t1232) - t141 * t20 * t139 + t1057 * t85 * t21 - t952 * t70 * t21;
    real_type t1243 = OMEGA__[25];
    real_type t1249 = t1057 * t21;
    result__[ 25  ] = -t1243 + t6 * (2 * XL__[25] - 2 * ModelPars[191]) + t1249;
    real_type t1250 = OMEGA__[26];
    real_type t1257 = t952 * t20;
    result__[ 26  ] = -t1250 + t6 * (2 * XL__[26] - 2 * ModelPars[195]) + t1151 * t724 - t1257 * t607;
    real_type t1259 = OMEGA__[27];
    result__[ 27  ] = -t1259 + t6 * (2 * XL__[27] - 2 * ModelPars[201]) + t1151 * t607 + t1257 * t724;
    real_type t1267 = OMEGA__[28];
    result__[ 28  ] = -t1267 + t6 * (2 * XL__[28] - 2 * ModelPars[193]) - t1072 * t21;
    real_type t1274 = OMEGA__[29];
    real_type t1280 = t960 * t20;
    real_type t1282 = t967 * t20;
    result__[ 29  ] = -t1274 + t6 * (2 * XL__[29] - 2 * ModelPars[197]) + t1280 * t724 - t1282 * t607;
    real_type t1284 = OMEGA__[30];
    result__[ 30  ] = -t1284 + t6 * (2 * XL__[30] - 2 * ModelPars[203]) + t1280 * t607 + t1282 * t724;
    real_type t1292 = OMEGA__[31];
    result__[ 31  ] = -t1292 + t6 * (2 * XL__[31] - 2 * ModelPars[205]) - t913 * t20 * t724 + t1249 * t938;
    real_type t1301 = OMEGA__[32];
    result__[ 32  ] = -t1301 + t6 * (2 * XL__[32] - 2 * ModelPars[175]) + t929 * (-t1146 * t21 - t923) + t1057 * t912 * t13 * t945 - t942 * t937 * t926 * t21 - t952 * t937 * t920 * t21;
    real_type t1319 = OMEGA__[33];
    real_type t1325 = ModelPars[114];
    real_type t1327 = ModelPars[184];
    result__[ 33  ] = -t1319 + t6 * (2 * XL__[33] - 2 * ModelPars[4]) - LL__[34] * t1327 * t20 * t13 * t1325;
    real_type t1332 = OMEGA__[34];
    real_type t1338 = ModelPars[181];
    result__[ 34  ] = -t1332 + t6 * (2 * XL__[34] - 2 * ModelPars[25]) - LL__[33] * t1338 * t21;
    real_type t1342 = OMEGA__[35];
    real_type t1348 = ModelPars[182];
    result__[ 35  ] = -t1342 + t6 * (2 * XL__[35] - 2 * ModelPars[26]) - LL__[35] * t1348 * t21;
    real_type t1352 = OMEGA__[36];
    real_type t1358 = ModelPars[183];
    result__[ 36  ] = -t1352 + t6 * (2 * XL__[36] - 2 * ModelPars[121]) - LL__[36] * t1358 * t21;
    real_type t1362 = OMEGA__[37];
    result__[ 37  ] = -t1362 + t6 * (2 * t8 - 2 * ModelPars[76]) - LL__[37] * t21;
    real_type t1369 = OMEGA__[38];
    result__[ 38  ] = -t1369 + t6 * (2 * t14 - 2 * ModelPars[143]) - LL__[38] * t21;
    real_type t1378 = ALIAS_kappa_L(QR__[0]);
    real_type t1381 = 1.0 / (t1378 * XR__[37] - 1);
    real_type t1382 = XR__[38];
    real_type t1383 = cos(t1382);
    real_type t1386 = sin(t1382);
    real_type t1389 = XR__[0] * t1383 - XR__[1] * t1386;
    real_type t1390 = t1389 * t1381;
    real_type t1391 = LR__[0];
    real_type t1394 = XR__[7];
    real_type t1395 = cos(t1394);
    real_type t1397 = t30 * t28 * t1395;
    real_type t1398 = sin(t1394);
    real_type t1399 = t39 * t1398;
    real_type t1400 = XR__[8];
    real_type t1401 = t57 * t1400;
    real_type t1402 = -t1397 + t1399 - t43 + t47 + t52 + t55 + t58 - t1401 - t62;
    real_type t1403 = XR__[3];
    real_type t1404 = cos(t1403);
    real_type t1405 = t1404 * t1402;
    real_type t1407 = XR__[4] + t68;
    real_type t1408 = cos(t1407);
    real_type t1409 = t1408 * t1390;
    real_type t1410 = t1409 * t1405;
    real_type t1411 = t39 * t1395;
    real_type t1413 = t30 * t28 * t1398;
    real_type t1414 = t1411 + t1413 + t76 - t78 - t80 + t82;
    real_type t1415 = t1404 * t1414;
    real_type t1416 = sin(t1407);
    real_type t1418 = t1416 * t1415 * t1390;
    real_type t1419 = t1404 * t22;
    real_type t1420 = XR__[5];
    real_type t1421 = t1420 * t1419;
    real_type t1422 = sin(t1403);
    real_type t1423 = t97 * t1422;
    real_type t1424 = XR__[6];
    real_type t1426 = t1424 * t1423 + t1421;
    real_type t1429 = LR__[4];
    real_type t1431 = t51 * t1398;
    real_type t1433 = t1422 * (t1397 + t1431 + t43 - t47 + t107 - t55 - t58 + t1401 + t62);
    real_type t1438 = t1422 * t22;
    real_type t1439 = t1420 * t1438;
    real_type t1440 = t1424 * t116;
    real_type t1445 = -t1409 * t1433 - t1416 * t1414 * t1422 * t1390 - t1389 * t1381 * (t1404 * t1440 + t1439);
    real_type t1446 = LR__[5];
    real_type t1448 = t97 * t1390;
    real_type t1449 = t1408 * t1424;
    real_type t1450 = LR__[6];
    real_type t1453 = t1397 - t1399;
    real_type t1456 = t1411 + t1413;
    real_type t1458 = t1416 * t1456 * t1390;
    real_type t1460 = LR__[7];
    real_type t1462 = t1381 * t57;
    real_type t1463 = t1416 * t1389;
    real_type t1464 = LR__[8];
    result__[ 39  ] = t1 + t1391 * t22 * t1390 - t1429 * (-t1426 * t1390 + t1410 - t1418) - t1446 * t1445 - t1450 * t1449 * t1448 - t1460 * (-t1408 * t1453 * t1390 - t1458) - t1464 * t1463 * t1462;
    real_type t1467 = LR__[1];
    real_type t1473 = LR__[3];
    real_type t1479 = -t1416 * t1402 * t1390 - t1408 * t1414 * t1390;
    real_type t1484 = t1404 * t97;
    real_type t1491 = -t1453;
    real_type t1492 = t1491 * t1422;
    real_type t1495 = -t1408 * t1456 * t1422 * t1390 - t1416 * t1492 * t1390;
    real_type t1498 = t1381 * t1422 * t57;
    real_type t1499 = t1408 * t1389;
    real_type t1500 = t1464 * t1499;
    result__[ 40  ] = t144 + t1467 * t22 * t1390 - t1473 * (t1426 * t1390 - t1410 + t1418) - t1446 * t1479 - t1450 * (-t1416 * t1424 * t1422 * t1448 - t1484 * t1390) - t1460 * t1495 - t1500 * t1498;
    real_type t1504 = t1420 * t1404;
    real_type t1507 = -t92 * t1401 + t197 - t199 - t200;
    real_type t1508 = t1507 * t1422;
    real_type t1510 = -t1402 * t1504 - t1424 * t1508;
    real_type t1513 = t1395 * t1395;
    real_type t1514 = t216 * t1513;
    real_type t1516 = t221 * t1398 * t1395;
    real_type t1517 = 2 * t1516;
    real_type t1518 = t1400 * t1400;
    real_type t1519 = t1518 * t57;
    real_type t1520 = t1519 / 2;
    real_type t1522 = t57 * t195 * t1400;
    real_type t1523 = t1514 + t1517 + t226 - t229 + t236 - t240 + t244 + t1520 - t1522 + t252 + t232 + t253 + t258 - t234 + t260 - t262 + t233;
    real_type t1525 = t1416 * t1390;
    real_type t1531 = -t1424 * t281 * t1422 - t1414 * t1504;
    real_type t1537 = t1398 * t225 * t1395;
    real_type t1539 = t57 * t270 * t1400;
    real_type t1540 = t289 * t1513 + t1537 - t1539 - t288 + t294 - t296 + t300 + t301 + t304 - t305 - t306;
    real_type t1541 = t1540 * t1404;
    real_type t1542 = t1408 * t1408;
    real_type t1549 = t1523 * t1422;
    real_type t1551 = t1542 * t1390;
    real_type t1554 = t1422 * t1540;
    real_type t1558 = t1404 * t1404;
    real_type t1562 = t1420 * t1422;
    real_type t1565 = t1424 * t1507;
    real_type t1573 = t1422 * t1404;
    real_type t1574 = t1414 * t1420;
    real_type t1577 = t1424 * t281;
    real_type t1582 = t1420 * t1424;
    real_type t1585 = t1420 * t1420;
    real_type t1586 = t1585 * t22;
    real_type t1587 = t1514 + t1517 + t226 - t229 - t1586 + t236 + t354 - t355 + t232 + t233 - t234 + t259 - t356;
    real_type t1590 = t1424 * t97;
    real_type t1600 = 2 * t1522;
    real_type t1601 = t1395 * t1398 * t387 + t1513 * t379 - t1519 + t1600 - t259 + t261 - t354 + t393 + t398 + t400 + t401 + t407 - t408 - t409 + t411 - t412 + t413;
    real_type t1608 = t1395 * t1398 * t379 + t1400 * t429 + t1513 * t396 + t420 + t422 - t424 + t426 + t431 + t436 - t437 - t438;
    real_type t1612 = t443 * t1420 * t1395;
    real_type t1613 = 2 * t1612;
    real_type t1614 = t1420 * t449;
    real_type t1616 = 2 * t1401;
    real_type t1624 = t1420 * t455;
    real_type t1636 = t1398 * t30 * t1420 * t28;
    real_type t1637 = 2 * t1636;
    real_type t1651 = t1395 * t1398 * t522 + t1513 * t516 - t1586 + t232 + t233 - t234 + t236 + t259 + t354 - t355 - t356 + t528 + t533;
    real_type t1656 = t1404 * t1562 * t1424 * t536 + t1558 * t1651 + t1519 + t1586 - t1600 - t354 + t356 - t401 + t409 + t541 + t543;
    real_type t1666 = -t1507;
    real_type t1669 = t1424 * t1666;
    real_type t1670 = t1422 * t1669;
    real_type t1681 = t579 * t1422 * t1390;
    real_type t1697 = t1381 * t1424;
    real_type t1698 = t1389 * t1697;
    real_type t1699 = t278 * t1404;
    real_type t1704 = -t1390 * t1422 * t278 + t1416 * t1699 * t1698;
    real_type t1705 = LR__[9];
    real_type t1707 = t1381 * t1422;
    real_type t1708 = t577 * t1389;
    real_type t1709 = LR__[10];
    result__[ 41  ] = t189 - t1391 * t1445 - t1467 * t1479 - t1473 * (-t1416 * t1510 * t1390 + t1408 * (-2 * t1525 * t1404 * t1523 - t1531 * t1390) - 2 * t1542 * t1541 * t1390 + t1541 * t1390) - t1429 * (-2 * t1551 * t1404 * t1549 + t1408 * (2 * t1525 * t1404 * t1554 - (2 * t1424 * t1507 * t1558 - 2 * t1562 * t1405 - t1565) * t1390) - t1416 * (-2 * t1424 * t281 * t1558 + 2 * t1574 * t1573 + t1577) * t1390 - t1389 * t1381 * (-t1404 * t1422 * t1587 - 2 * t1582 * t97 * t1558 + t1420 * t1590)) - t1446 * (-t1551 * t1558 * t1601 + t1408 * (-t1525 * t1558 * t1608 - t1389 * t1381 * (t1558 * (-t1613 + t1398 * t1614 + t1420 * (t452 + t456 + t457 - t458 + t459 - t1616 - t461)) + 2 * t1573 * t1424 * t1507 + t1613 + t1398 * t1624 + t1420 * (-t452 + t471 - t457 + t458 - t459 + t1616 + t461))) - t1463 * t1381 * (t1558 * (t1395 * t1624 + t1420 * t488 - t1637) + t1573 * t1424 * t503 + t1395 * t1614 + t1637 + t1420 * t508) - t1389 * t1381 * t1656) - t1450 * (-t1408 * (t555 * t1404 - t1582 * t1423) * t1390 + t1525 * t1666 * t1404 + t1670 * t1390) - t1460 * (t1408 * t1492 * t1420 * t1390 - t1416 * t1562 * t1456 * t1390 - t1681) - t1464 * (2 * t1416 * t57 * t1389 * t1381 * (-t1424 * t1404 * t92 / 2 + t1562 / 2) + t1422 * t271 * t1390) - t1705 * t1704 + t1709 * t1708 * t1707;
    result__[ 42  ] = LR__[19] * t1390 + t612;
    result__[ 43  ] = LR__[20] * t1390 + t619;
    result__[ 44  ] = LR__[21] * t1390 + t626;
    result__[ 45  ] = LR__[22] * t1390 + t633;
    result__[ 46  ] = LR__[23] * t1390 + t640;
    result__[ 47  ] = LR__[24] * t1390 + t647;
    result__[ 48  ] = LR__[25] * t1390 + t654;
    result__[ 49  ] = LR__[26] * t1390 + t662;
    result__[ 50  ] = LR__[27] * t1390 + t670;
    result__[ 51  ] = LR__[28] * t1390 + t678;
    result__[ 52  ] = LR__[29] * t1390 + t686;
    result__[ 53  ] = LR__[30] * t1390 + t694;
    result__[ 54  ] = LR__[31] * t1390 + t702;
    result__[ 55  ] = LR__[32] * t1390 + t710;
    real_type t1740 = t1381 * t1404;
    real_type t1748 = t1709 * t577 * t1390;
    result__[ 56  ] = t1460 * t577 * t1390 + t1429 * t1708 * t1740 + t1446 * t1708 * t1707 + t1748 + t718;
    real_type t1749 = t1408 * t278;
    real_type t1761 = t1705 * t1389 * t1381 * t278;
    result__[ 57  ] = t733 - t1473 * t1749 * t1698 - t1429 * (-t1525 * t1422 * t278 * t1424 - t1699 * t1390) - t1446 * t1704 + t1761;
    real_type t1762 = t51 * t1395;
    real_type t1763 = t1762 - t1413 + t759 + t78 + t80 - t82;
    real_type t1764 = t1763 * t1404;
    real_type t1773 = t1402 * t1422;
    real_type t1776 = t1763 * t1422;
    real_type t1783 = LR__[2];
    real_type t1790 = t785 * t1513 - 2 * t1537 + 2 * t1539 + t424 - t431 + t437 + t438 + t789 + t790 + t794 - t796;
    real_type t1800 = t1513 * t805 + 4 * t1516 + t1519 - t1600 + t259 - t261 + t354 - t401 + t408 + t409 + t412 - t413 + t541 + t809 - t810 + t811 + t812;
    real_type t1805 = t225 * t1513 - t1517 + t1586 + t229 - t232 - t233 + t234 + t261 - t354 + t355 + t818 + t819;
    real_type t1822 = t1507 * t1404;
    real_type t1836 = t1395 * t1398 * t396 + t1513 * t392 + t1519 - t1600 + t259 - t261 + t354 - t401 + t408 + t409 + t412 - t413 + t541 + t811 + t812 + t851 + t853;
    real_type t1839 = t1420 * t51;
    real_type t1842 = t1395 * t1839 + t1420 * t859 - t1636;
    real_type t1851 = t1398 * t1839;
    real_type t1862 = t1395 * t1398 * t516 + t1513 * t531 + t1539 + t288 - t301 + t305 + t306 + t883 + t885 + t888 + t890;
    real_type t1868 = t1408 * t1507 * t1390;
    real_type t1872 = t1420 * t97 * t1390;
    real_type t1875 = t1381 * t93;
    real_type t1876 = t1424 * t1389;
    real_type t1883 = XR__[15] * t1389;
    real_type t1884 = LR__[11];
    real_type t1887 = XR__[16];
    real_type t1888 = sin(t1887);
    real_type t1890 = cos(t1887);
    real_type t1892 = t1888 * t1404 - t1890 * t1422;
    real_type t1895 = t1416 * t1424 * t1892 * t1390;
    real_type t1898 = t1404 * t1890 + t1422 * t1888;
    real_type t1899 = t1898 * t1390;
    real_type t1901 = LR__[12];
    real_type t1904 = XR__[11];
    real_type t1907 = t1888 * t937;
    real_type t1908 = XR__[10];
    real_type t1912 = LR__[14];
    real_type t1915 = t1890 * t937;
    real_type t1922 = LR__[15];
    real_type t1926 = -t955 - XR__[14];
    real_type t1928 = XR__[13];
    real_type t1931 = LR__[17];
    real_type t1938 = LR__[18];
    result__[ 58  ] = t752 - t1467 * (-t1410 - t1416 * t1764 * t1390 - t1389 * t1381 * (t1422 * t1440 - t1421)) - t1783 * (-t1408 * t1773 * t1390 - t1416 * t1776 * t1390 - (t1424 * t1484 - t1439) * t1390) - t1473 * (-2 * t1525 * t1574 + t1408 * (2 * t1390 * t1420 * t1402 - t1416 * t1790 * t1390) - t1542 * t1389 * t1381 * t1800 - t1389 * t1381 * t1805) - t1429 * (2 * t1542 * t1554 * t1390 + t1408 * (2 * t1525 * t1549 - (-t1424 * t281 * t1404 + t1414 * t1562) * t1390) - t1416 * (t1420 * t1773 - t1424 * t1822) * t1390 - t1554 * t1390) - t1446 * (-t1551 * t1404 * t1608 + t1408 * (-t1525 * t1404 * t1836 - t1389 * t1381 * (t1422 * t1424 * t864 + t1404 * t1842)) - t1463 * t1381 * (t1404 * (t1612 + t1851 + t1420 * (-t47 + t107 - t55 + t43 - t58 + t1401 + t62)) + t1670) - t1390 * t1404 * t1862) - t1450 * (-t1416 * t898 * t1390 - t1868 + t1872) + t1464 * t1408 * t1876 * t1875 - t1705 * t1749 * t1698 - t1884 * t1883 * t1707 - t1901 * (t1895 - t1899) + t1912 * ((t933 * t1890 - t1904 - t932) * t1404 - t1422 * (t1907 - t1908)) * t1390 + t1922 * ((t1915 + t932 + t1904) * t1422 + t1404 * (t933 * t1888 + t1908)) * t1390 + t1931 * (t1926 * t1404 + t1422 * t1928) * t1390 + t1938 * (t1404 * t1928 - t1926 * t1422) * t1390;
    real_type t1950 = -t1408 * t1776 * t1390 - t1525 * t1433;
    real_type t1954 = t1525 * t1405;
    real_type t1975 = t1420 * t39;
    real_type t2007 = t195 - t1400;
    real_type t2011 = LR__[13];
    real_type t2019 = t1398 * t33;
    real_type t2021 = t1381 * t1395;
    real_type t2022 = t33 * t1389;
    real_type t2025 = -t1416 * t2022 * t2021 + t1409 * t2019;
    real_type t2026 = LR__[16];
    real_type t2031 = t1408 * t2022 * t2021 + t1525 * t2019;
    result__[ 59  ] = t970 - t1391 * (-t1408 * t1402 * t1390 - t1416 * t1763 * t1390) - t1467 * t1950 - t1783 * (t1408 * t1764 * t1390 - t1954) - t1473 * (-t1408 * t1577 * t1390 - t1416 * t1565 * t1390) - t1429 * (t1408 * t1510 * t1390 - t1416 * t1531 * t1390 + 2 * t1390 * t1404 * (-t240 + t1520 - t1522 - t244 + t252 + t253 + t1004 + t1005)) - t1446 * (-t1499 * t1381 * (t1404 * t1669 + t1422 * (-t1612 + t1398 * t1975 + t1420 * (t47 + t52 + t55 - t43 + t58 - t1401 - t62))) - t1463 * t1381 * (t1404 * t1424 * t1024 + t1422 * t1842) - t1390 * t1422 * (t401 - t1519 + t1600 + t354 + t407 - t409 + t1032 - t356)) + t1450 * t1669 * t1390 + t1460 * t1042 * t1390 + t1464 * t271 * t1390 - t1761 - t1748 + t1884 * t1463 * t1697 - t1901 * t1449 * t1899 - t2011 * (-t1408 * t2007 * t1390 - t1416 * t427 * t1390) - t1922 * (-t1408 * t270 * t1390 - t1416 * t2007 * t1390) - t2026 * t2025 - t1938 * t2031;
    real_type t2047 = t1762 - t1413;
    result__[ 60  ] = t1079 - t1467 * t1438 * t1390 + t1783 * t1419 * t1390 + t1473 * t1590 * t1390 - t1429 * (t1408 * t1415 * t1390 + t1954) - t1446 * t1950 - t1450 * t1416 * t1424 * t1448 - t1460 * (-t1408 * t2047 * t1390 - t1416 * t1453 * t1390) + t1500 * t1462 + t1922 * t1390 + t1938 * t1390;
    real_type t2084 = -t1898;
    real_type t2089 = t1912 * t1389;
    result__[ 61  ] = t1109 + t1467 * t1484 * t1390 + t1783 * t1422 * t1389 * t1381 * t97 - t1473 * (-t1416 * t1121 * t1390 - t1868 + t1872) - t1429 * (t1408 * t1126 * t1422 * t1390 + t1416 * t1508 * t1390) - t1446 * (-t1409 * t1404 * t1134 - t1416 * t1822 * t1390) + t1450 * t1141 * t1390 - t1884 * t1408 * t1390 + t1901 * t1416 * t2084 * t1390 + t2089 * t1381 * t92;
    real_type t2091 = t1397 + t1431;
    result__[ 62  ] = t1153 - t1391 * (-t1499 * t1381 * t2091 - t1458) - t1467 * t1495 - t1783 * (t1408 * t1456 * t1404 * t1390 + t1416 * t1404 * t1491 * t1390) - t1429 * (t1416 * t2047 * t1420 * t1404 * t1390 - t1408 * t1504 * t2091 * t1390 - t579 * t1404 * t1390) - t1446 * (-t1409 * t1422 * (t1612 + t1851) - t1525 * t1422 * (t1395 * t1975 + t1636) - t1681) + t1460 * t579 * t1390 + t1748 + t2026 * t2025 + t1938 * t2031;
    result__[ 63  ] = t1199 - t1391 * t1463 * t1462 - t1467 * t1499 * t1498 + t1783 * t1499 * t1381 * t1404 * t57 + t1473 * t1408 * t1876 * t1875 - t1429 * (t1416 * t57 * (t1424 * t1422 * t92 + t1504) * t1390 + t1404 * t271 * t1390) - t1446 * (-t1463 * t1381 * (t1404 * t1424 * t93 - t57 * t1562) - t1389 * t1707 * t1232) + t1464 * t1389 * t1462 - t2011 * t1416 * t1390 + t1922 * t1408 * t1390;
    real_type t2168 = t2011 * t1390;
    result__[ 64  ] = t1243 - t2168;
    real_type t2170 = t1922 * t1389;
    result__[ 65  ] = t2170 * t1707 - t2089 * t1740 + t1250;
    result__[ 66  ] = -t2089 * t1707 - t2170 * t1740 + t1259;
    result__[ 67  ] = t2026 * t1390 + t1267;
    real_type t2175 = t1931 * t1389;
    real_type t2177 = t1938 * t1389;
    result__[ 68  ] = t2177 * t1707 - t2175 * t1740 + t1274;
    result__[ 69  ] = -t2175 * t1707 - t2177 * t1740 + t1284;
    result__[ 70  ] = t1884 * t1389 * t1740 - t2168 * t1907 + t1292;
    result__[ 71  ] = t1301 - t1901 * (-t2084 * t1390 - t1895) - t2011 * t1883 * t1381 * t1915 + t1912 * t937 * t1898 * t1390 + t1922 * t937 * t1892 * t1390;
    result__[ 72  ] = LR__[34] * t1327 * t1389 * t1381 * t1325 + t1319;
    result__[ 73  ] = LR__[33] * t1338 * t1390 + t1332;
    result__[ 74  ] = LR__[35] * t1348 * t1390 + t1342;
    result__[ 75  ] = LR__[36] * t1358 * t1390 + t1352;
    result__[ 76  ] = LR__[37] * t1390 + t1362;
    result__[ 77  ] = LR__[38] * t1390 + t1369;
    #ifdef MECHATRONIX_DEBUG
    CHECK_NAN(result__,"adjointBC_eval",78);
    #endif
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  integer
  General::DadjointBCDx_numRows() const
  { return 78; }

  integer
  General::DadjointBCDx_numCols() const
  { return 78; }

  integer
  General::DadjointBCDx_nnz() const
  { return 487; }

  void
  General::DadjointBCDx_pattern(
    integer iIndex[],
    integer jIndex[]
  ) const {
    iIndex[ 0  ] = 0   ; jIndex[ 0  ] = 0   ;
    iIndex[ 1  ] = 0   ; jIndex[ 1  ] = 1   ;
    iIndex[ 2  ] = 0   ; jIndex[ 2  ] = 3   ;
    iIndex[ 3  ] = 0   ; jIndex[ 3  ] = 4   ;
    iIndex[ 4  ] = 0   ; jIndex[ 4  ] = 5   ;
    iIndex[ 5  ] = 0   ; jIndex[ 5  ] = 6   ;
    iIndex[ 6  ] = 0   ; jIndex[ 6  ] = 7   ;
    iIndex[ 7  ] = 0   ; jIndex[ 7  ] = 8   ;
    iIndex[ 8  ] = 0   ; jIndex[ 8  ] = 37  ;
    iIndex[ 9  ] = 0   ; jIndex[ 9  ] = 38  ;
    iIndex[ 10 ] = 1   ; jIndex[ 10 ] = 0   ;
    iIndex[ 11 ] = 1   ; jIndex[ 11 ] = 1   ;
    iIndex[ 12 ] = 1   ; jIndex[ 12 ] = 3   ;
    iIndex[ 13 ] = 1   ; jIndex[ 13 ] = 4   ;
    iIndex[ 14 ] = 1   ; jIndex[ 14 ] = 5   ;
    iIndex[ 15 ] = 1   ; jIndex[ 15 ] = 6   ;
    iIndex[ 16 ] = 1   ; jIndex[ 16 ] = 7   ;
    iIndex[ 17 ] = 1   ; jIndex[ 17 ] = 8   ;
    iIndex[ 18 ] = 1   ; jIndex[ 18 ] = 37  ;
    iIndex[ 19 ] = 1   ; jIndex[ 19 ] = 38  ;
    iIndex[ 20 ] = 2   ; jIndex[ 20 ] = 0   ;
    iIndex[ 21 ] = 2   ; jIndex[ 21 ] = 1   ;
    iIndex[ 22 ] = 2   ; jIndex[ 22 ] = 2   ;
    iIndex[ 23 ] = 2   ; jIndex[ 23 ] = 3   ;
    iIndex[ 24 ] = 2   ; jIndex[ 24 ] = 4   ;
    iIndex[ 25 ] = 2   ; jIndex[ 25 ] = 5   ;
    iIndex[ 26 ] = 2   ; jIndex[ 26 ] = 6   ;
    iIndex[ 27 ] = 2   ; jIndex[ 27 ] = 7   ;
    iIndex[ 28 ] = 2   ; jIndex[ 28 ] = 8   ;
    iIndex[ 29 ] = 2   ; jIndex[ 29 ] = 37  ;
    iIndex[ 30 ] = 2   ; jIndex[ 30 ] = 38  ;
    iIndex[ 31 ] = 3   ; jIndex[ 31 ] = 0   ;
    iIndex[ 32 ] = 3   ; jIndex[ 32 ] = 1   ;
    iIndex[ 33 ] = 3   ; jIndex[ 33 ] = 3   ;
    iIndex[ 34 ] = 3   ; jIndex[ 34 ] = 37  ;
    iIndex[ 35 ] = 3   ; jIndex[ 35 ] = 38  ;
    iIndex[ 36 ] = 4   ; jIndex[ 36 ] = 0   ;
    iIndex[ 37 ] = 4   ; jIndex[ 37 ] = 1   ;
    iIndex[ 38 ] = 4   ; jIndex[ 38 ] = 4   ;
    iIndex[ 39 ] = 4   ; jIndex[ 39 ] = 37  ;
    iIndex[ 40 ] = 4   ; jIndex[ 40 ] = 38  ;
    iIndex[ 41 ] = 5   ; jIndex[ 41 ] = 0   ;
    iIndex[ 42 ] = 5   ; jIndex[ 42 ] = 1   ;
    iIndex[ 43 ] = 5   ; jIndex[ 43 ] = 5   ;
    iIndex[ 44 ] = 5   ; jIndex[ 44 ] = 37  ;
    iIndex[ 45 ] = 5   ; jIndex[ 45 ] = 38  ;
    iIndex[ 46 ] = 6   ; jIndex[ 46 ] = 0   ;
    iIndex[ 47 ] = 6   ; jIndex[ 47 ] = 1   ;
    iIndex[ 48 ] = 6   ; jIndex[ 48 ] = 6   ;
    iIndex[ 49 ] = 6   ; jIndex[ 49 ] = 37  ;
    iIndex[ 50 ] = 6   ; jIndex[ 50 ] = 38  ;
    iIndex[ 51 ] = 7   ; jIndex[ 51 ] = 0   ;
    iIndex[ 52 ] = 7   ; jIndex[ 52 ] = 1   ;
    iIndex[ 53 ] = 7   ; jIndex[ 53 ] = 7   ;
    iIndex[ 54 ] = 7   ; jIndex[ 54 ] = 37  ;
    iIndex[ 55 ] = 7   ; jIndex[ 55 ] = 38  ;
    iIndex[ 56 ] = 8   ; jIndex[ 56 ] = 0   ;
    iIndex[ 57 ] = 8   ; jIndex[ 57 ] = 1   ;
    iIndex[ 58 ] = 8   ; jIndex[ 58 ] = 8   ;
    iIndex[ 59 ] = 8   ; jIndex[ 59 ] = 37  ;
    iIndex[ 60 ] = 8   ; jIndex[ 60 ] = 38  ;
    iIndex[ 61 ] = 9   ; jIndex[ 61 ] = 0   ;
    iIndex[ 62 ] = 9   ; jIndex[ 62 ] = 1   ;
    iIndex[ 63 ] = 9   ; jIndex[ 63 ] = 9   ;
    iIndex[ 64 ] = 9   ; jIndex[ 64 ] = 37  ;
    iIndex[ 65 ] = 9   ; jIndex[ 65 ] = 38  ;
    iIndex[ 66 ] = 10  ; jIndex[ 66 ] = 0   ;
    iIndex[ 67 ] = 10  ; jIndex[ 67 ] = 1   ;
    iIndex[ 68 ] = 10  ; jIndex[ 68 ] = 10  ;
    iIndex[ 69 ] = 10  ; jIndex[ 69 ] = 37  ;
    iIndex[ 70 ] = 10  ; jIndex[ 70 ] = 38  ;
    iIndex[ 71 ] = 11  ; jIndex[ 71 ] = 0   ;
    iIndex[ 72 ] = 11  ; jIndex[ 72 ] = 1   ;
    iIndex[ 73 ] = 11  ; jIndex[ 73 ] = 11  ;
    iIndex[ 74 ] = 11  ; jIndex[ 74 ] = 37  ;
    iIndex[ 75 ] = 11  ; jIndex[ 75 ] = 38  ;
    iIndex[ 76 ] = 12  ; jIndex[ 76 ] = 0   ;
    iIndex[ 77 ] = 12  ; jIndex[ 77 ] = 1   ;
    iIndex[ 78 ] = 12  ; jIndex[ 78 ] = 12  ;
    iIndex[ 79 ] = 12  ; jIndex[ 79 ] = 37  ;
    iIndex[ 80 ] = 12  ; jIndex[ 80 ] = 38  ;
    iIndex[ 81 ] = 13  ; jIndex[ 81 ] = 0   ;
    iIndex[ 82 ] = 13  ; jIndex[ 82 ] = 1   ;
    iIndex[ 83 ] = 13  ; jIndex[ 83 ] = 13  ;
    iIndex[ 84 ] = 13  ; jIndex[ 84 ] = 37  ;
    iIndex[ 85 ] = 13  ; jIndex[ 85 ] = 38  ;
    iIndex[ 86 ] = 14  ; jIndex[ 86 ] = 0   ;
    iIndex[ 87 ] = 14  ; jIndex[ 87 ] = 1   ;
    iIndex[ 88 ] = 14  ; jIndex[ 88 ] = 14  ;
    iIndex[ 89 ] = 14  ; jIndex[ 89 ] = 37  ;
    iIndex[ 90 ] = 14  ; jIndex[ 90 ] = 38  ;
    iIndex[ 91 ] = 15  ; jIndex[ 91 ] = 0   ;
    iIndex[ 92 ] = 15  ; jIndex[ 92 ] = 1   ;
    iIndex[ 93 ] = 15  ; jIndex[ 93 ] = 15  ;
    iIndex[ 94 ] = 15  ; jIndex[ 94 ] = 37  ;
    iIndex[ 95 ] = 15  ; jIndex[ 95 ] = 38  ;
    iIndex[ 96 ] = 16  ; jIndex[ 96 ] = 0   ;
    iIndex[ 97 ] = 16  ; jIndex[ 97 ] = 1   ;
    iIndex[ 98 ] = 16  ; jIndex[ 98 ] = 16  ;
    iIndex[ 99 ] = 16  ; jIndex[ 99 ] = 37  ;
    iIndex[ 100 ] = 16  ; jIndex[ 100 ] = 38  ;
    iIndex[ 101 ] = 17  ; jIndex[ 101 ] = 0   ;
    iIndex[ 102 ] = 17  ; jIndex[ 102 ] = 1   ;
    iIndex[ 103 ] = 17  ; jIndex[ 103 ] = 3   ;
    iIndex[ 104 ] = 17  ; jIndex[ 104 ] = 17  ;
    iIndex[ 105 ] = 17  ; jIndex[ 105 ] = 37  ;
    iIndex[ 106 ] = 17  ; jIndex[ 106 ] = 38  ;
    iIndex[ 107 ] = 18  ; jIndex[ 107 ] = 0   ;
    iIndex[ 108 ] = 18  ; jIndex[ 108 ] = 1   ;
    iIndex[ 109 ] = 18  ; jIndex[ 109 ] = 3   ;
    iIndex[ 110 ] = 18  ; jIndex[ 110 ] = 4   ;
    iIndex[ 111 ] = 18  ; jIndex[ 111 ] = 6   ;
    iIndex[ 112 ] = 18  ; jIndex[ 112 ] = 18  ;
    iIndex[ 113 ] = 18  ; jIndex[ 113 ] = 37  ;
    iIndex[ 114 ] = 18  ; jIndex[ 114 ] = 38  ;
    iIndex[ 115 ] = 19  ; jIndex[ 115 ] = 0   ;
    iIndex[ 116 ] = 19  ; jIndex[ 116 ] = 1   ;
    iIndex[ 117 ] = 19  ; jIndex[ 117 ] = 3   ;
    iIndex[ 118 ] = 19  ; jIndex[ 118 ] = 4   ;
    iIndex[ 119 ] = 19  ; jIndex[ 119 ] = 5   ;
    iIndex[ 120 ] = 19  ; jIndex[ 120 ] = 6   ;
    iIndex[ 121 ] = 19  ; jIndex[ 121 ] = 7   ;
    iIndex[ 122 ] = 19  ; jIndex[ 122 ] = 8   ;
    iIndex[ 123 ] = 19  ; jIndex[ 123 ] = 10  ;
    iIndex[ 124 ] = 19  ; jIndex[ 124 ] = 11  ;
    iIndex[ 125 ] = 19  ; jIndex[ 125 ] = 13  ;
    iIndex[ 126 ] = 19  ; jIndex[ 126 ] = 14  ;
    iIndex[ 127 ] = 19  ; jIndex[ 127 ] = 15  ;
    iIndex[ 128 ] = 19  ; jIndex[ 128 ] = 16  ;
    iIndex[ 129 ] = 19  ; jIndex[ 129 ] = 19  ;
    iIndex[ 130 ] = 19  ; jIndex[ 130 ] = 37  ;
    iIndex[ 131 ] = 19  ; jIndex[ 131 ] = 38  ;
    iIndex[ 132 ] = 20  ; jIndex[ 132 ] = 0   ;
    iIndex[ 133 ] = 20  ; jIndex[ 133 ] = 1   ;
    iIndex[ 134 ] = 20  ; jIndex[ 134 ] = 3   ;
    iIndex[ 135 ] = 20  ; jIndex[ 135 ] = 4   ;
    iIndex[ 136 ] = 20  ; jIndex[ 136 ] = 5   ;
    iIndex[ 137 ] = 20  ; jIndex[ 137 ] = 6   ;
    iIndex[ 138 ] = 20  ; jIndex[ 138 ] = 7   ;
    iIndex[ 139 ] = 20  ; jIndex[ 139 ] = 8   ;
    iIndex[ 140 ] = 20  ; jIndex[ 140 ] = 16  ;
    iIndex[ 141 ] = 20  ; jIndex[ 141 ] = 20  ;
    iIndex[ 142 ] = 20  ; jIndex[ 142 ] = 37  ;
    iIndex[ 143 ] = 20  ; jIndex[ 143 ] = 38  ;
    iIndex[ 144 ] = 21  ; jIndex[ 144 ] = 0   ;
    iIndex[ 145 ] = 21  ; jIndex[ 145 ] = 1   ;
    iIndex[ 146 ] = 21  ; jIndex[ 146 ] = 3   ;
    iIndex[ 147 ] = 21  ; jIndex[ 147 ] = 4   ;
    iIndex[ 148 ] = 21  ; jIndex[ 148 ] = 6   ;
    iIndex[ 149 ] = 21  ; jIndex[ 149 ] = 7   ;
    iIndex[ 150 ] = 21  ; jIndex[ 150 ] = 8   ;
    iIndex[ 151 ] = 21  ; jIndex[ 151 ] = 21  ;
    iIndex[ 152 ] = 21  ; jIndex[ 152 ] = 37  ;
    iIndex[ 153 ] = 21  ; jIndex[ 153 ] = 38  ;
    iIndex[ 154 ] = 22  ; jIndex[ 154 ] = 0   ;
    iIndex[ 155 ] = 22  ; jIndex[ 155 ] = 1   ;
    iIndex[ 156 ] = 22  ; jIndex[ 156 ] = 3   ;
    iIndex[ 157 ] = 22  ; jIndex[ 157 ] = 4   ;
    iIndex[ 158 ] = 22  ; jIndex[ 158 ] = 5   ;
    iIndex[ 159 ] = 22  ; jIndex[ 159 ] = 8   ;
    iIndex[ 160 ] = 22  ; jIndex[ 160 ] = 16  ;
    iIndex[ 161 ] = 22  ; jIndex[ 161 ] = 22  ;
    iIndex[ 162 ] = 22  ; jIndex[ 162 ] = 37  ;
    iIndex[ 163 ] = 22  ; jIndex[ 163 ] = 38  ;
    iIndex[ 164 ] = 23  ; jIndex[ 164 ] = 0   ;
    iIndex[ 165 ] = 23  ; jIndex[ 165 ] = 1   ;
    iIndex[ 166 ] = 23  ; jIndex[ 166 ] = 3   ;
    iIndex[ 167 ] = 23  ; jIndex[ 167 ] = 4   ;
    iIndex[ 168 ] = 23  ; jIndex[ 168 ] = 5   ;
    iIndex[ 169 ] = 23  ; jIndex[ 169 ] = 7   ;
    iIndex[ 170 ] = 23  ; jIndex[ 170 ] = 23  ;
    iIndex[ 171 ] = 23  ; jIndex[ 171 ] = 37  ;
    iIndex[ 172 ] = 23  ; jIndex[ 172 ] = 38  ;
    iIndex[ 173 ] = 24  ; jIndex[ 173 ] = 0   ;
    iIndex[ 174 ] = 24  ; jIndex[ 174 ] = 1   ;
    iIndex[ 175 ] = 24  ; jIndex[ 175 ] = 3   ;
    iIndex[ 176 ] = 24  ; jIndex[ 176 ] = 4   ;
    iIndex[ 177 ] = 24  ; jIndex[ 177 ] = 5   ;
    iIndex[ 178 ] = 24  ; jIndex[ 178 ] = 6   ;
    iIndex[ 179 ] = 24  ; jIndex[ 179 ] = 24  ;
    iIndex[ 180 ] = 24  ; jIndex[ 180 ] = 37  ;
    iIndex[ 181 ] = 24  ; jIndex[ 181 ] = 38  ;
    iIndex[ 182 ] = 25  ; jIndex[ 182 ] = 0   ;
    iIndex[ 183 ] = 25  ; jIndex[ 183 ] = 1   ;
    iIndex[ 184 ] = 25  ; jIndex[ 184 ] = 25  ;
    iIndex[ 185 ] = 25  ; jIndex[ 185 ] = 37  ;
    iIndex[ 186 ] = 25  ; jIndex[ 186 ] = 38  ;
    iIndex[ 187 ] = 26  ; jIndex[ 187 ] = 0   ;
    iIndex[ 188 ] = 26  ; jIndex[ 188 ] = 1   ;
    iIndex[ 189 ] = 26  ; jIndex[ 189 ] = 3   ;
    iIndex[ 190 ] = 26  ; jIndex[ 190 ] = 26  ;
    iIndex[ 191 ] = 26  ; jIndex[ 191 ] = 37  ;
    iIndex[ 192 ] = 26  ; jIndex[ 192 ] = 38  ;
    iIndex[ 193 ] = 27  ; jIndex[ 193 ] = 0   ;
    iIndex[ 194 ] = 27  ; jIndex[ 194 ] = 1   ;
    iIndex[ 195 ] = 27  ; jIndex[ 195 ] = 3   ;
    iIndex[ 196 ] = 27  ; jIndex[ 196 ] = 27  ;
    iIndex[ 197 ] = 27  ; jIndex[ 197 ] = 37  ;
    iIndex[ 198 ] = 27  ; jIndex[ 198 ] = 38  ;
    iIndex[ 199 ] = 28  ; jIndex[ 199 ] = 0   ;
    iIndex[ 200 ] = 28  ; jIndex[ 200 ] = 1   ;
    iIndex[ 201 ] = 28  ; jIndex[ 201 ] = 28  ;
    iIndex[ 202 ] = 28  ; jIndex[ 202 ] = 37  ;
    iIndex[ 203 ] = 28  ; jIndex[ 203 ] = 38  ;
    iIndex[ 204 ] = 29  ; jIndex[ 204 ] = 0   ;
    iIndex[ 205 ] = 29  ; jIndex[ 205 ] = 1   ;
    iIndex[ 206 ] = 29  ; jIndex[ 206 ] = 3   ;
    iIndex[ 207 ] = 29  ; jIndex[ 207 ] = 29  ;
    iIndex[ 208 ] = 29  ; jIndex[ 208 ] = 37  ;
    iIndex[ 209 ] = 29  ; jIndex[ 209 ] = 38  ;
    iIndex[ 210 ] = 30  ; jIndex[ 210 ] = 0   ;
    iIndex[ 211 ] = 30  ; jIndex[ 211 ] = 1   ;
    iIndex[ 212 ] = 30  ; jIndex[ 212 ] = 3   ;
    iIndex[ 213 ] = 30  ; jIndex[ 213 ] = 30  ;
    iIndex[ 214 ] = 30  ; jIndex[ 214 ] = 37  ;
    iIndex[ 215 ] = 30  ; jIndex[ 215 ] = 38  ;
    iIndex[ 216 ] = 31  ; jIndex[ 216 ] = 0   ;
    iIndex[ 217 ] = 31  ; jIndex[ 217 ] = 1   ;
    iIndex[ 218 ] = 31  ; jIndex[ 218 ] = 3   ;
    iIndex[ 219 ] = 31  ; jIndex[ 219 ] = 16  ;
    iIndex[ 220 ] = 31  ; jIndex[ 220 ] = 31  ;
    iIndex[ 221 ] = 31  ; jIndex[ 221 ] = 37  ;
    iIndex[ 222 ] = 31  ; jIndex[ 222 ] = 38  ;
    iIndex[ 223 ] = 32  ; jIndex[ 223 ] = 0   ;
    iIndex[ 224 ] = 32  ; jIndex[ 224 ] = 1   ;
    iIndex[ 225 ] = 32  ; jIndex[ 225 ] = 3   ;
    iIndex[ 226 ] = 32  ; jIndex[ 226 ] = 4   ;
    iIndex[ 227 ] = 32  ; jIndex[ 227 ] = 6   ;
    iIndex[ 228 ] = 32  ; jIndex[ 228 ] = 15  ;
    iIndex[ 229 ] = 32  ; jIndex[ 229 ] = 16  ;
    iIndex[ 230 ] = 32  ; jIndex[ 230 ] = 32  ;
    iIndex[ 231 ] = 32  ; jIndex[ 231 ] = 37  ;
    iIndex[ 232 ] = 32  ; jIndex[ 232 ] = 38  ;
    iIndex[ 233 ] = 33  ; jIndex[ 233 ] = 0   ;
    iIndex[ 234 ] = 33  ; jIndex[ 234 ] = 1   ;
    iIndex[ 235 ] = 33  ; jIndex[ 235 ] = 33  ;
    iIndex[ 236 ] = 33  ; jIndex[ 236 ] = 37  ;
    iIndex[ 237 ] = 33  ; jIndex[ 237 ] = 38  ;
    iIndex[ 238 ] = 34  ; jIndex[ 238 ] = 0   ;
    iIndex[ 239 ] = 34  ; jIndex[ 239 ] = 1   ;
    iIndex[ 240 ] = 34  ; jIndex[ 240 ] = 34  ;
    iIndex[ 241 ] = 34  ; jIndex[ 241 ] = 37  ;
    iIndex[ 242 ] = 34  ; jIndex[ 242 ] = 38  ;
    iIndex[ 243 ] = 35  ; jIndex[ 243 ] = 0   ;
    iIndex[ 244 ] = 35  ; jIndex[ 244 ] = 1   ;
    iIndex[ 245 ] = 35  ; jIndex[ 245 ] = 35  ;
    iIndex[ 246 ] = 35  ; jIndex[ 246 ] = 37  ;
    iIndex[ 247 ] = 35  ; jIndex[ 247 ] = 38  ;
    iIndex[ 248 ] = 36  ; jIndex[ 248 ] = 0   ;
    iIndex[ 249 ] = 36  ; jIndex[ 249 ] = 1   ;
    iIndex[ 250 ] = 36  ; jIndex[ 250 ] = 36  ;
    iIndex[ 251 ] = 36  ; jIndex[ 251 ] = 37  ;
    iIndex[ 252 ] = 36  ; jIndex[ 252 ] = 38  ;
    iIndex[ 253 ] = 37  ; jIndex[ 253 ] = 0   ;
    iIndex[ 254 ] = 37  ; jIndex[ 254 ] = 1   ;
    iIndex[ 255 ] = 37  ; jIndex[ 255 ] = 37  ;
    iIndex[ 256 ] = 37  ; jIndex[ 256 ] = 38  ;
    iIndex[ 257 ] = 38  ; jIndex[ 257 ] = 0   ;
    iIndex[ 258 ] = 38  ; jIndex[ 258 ] = 1   ;
    iIndex[ 259 ] = 38  ; jIndex[ 259 ] = 37  ;
    iIndex[ 260 ] = 38  ; jIndex[ 260 ] = 38  ;
    iIndex[ 261 ] = 39  ; jIndex[ 261 ] = 39  ;
    iIndex[ 262 ] = 39  ; jIndex[ 262 ] = 40  ;
    iIndex[ 263 ] = 39  ; jIndex[ 263 ] = 42  ;
    iIndex[ 264 ] = 39  ; jIndex[ 264 ] = 43  ;
    iIndex[ 265 ] = 39  ; jIndex[ 265 ] = 44  ;
    iIndex[ 266 ] = 39  ; jIndex[ 266 ] = 45  ;
    iIndex[ 267 ] = 39  ; jIndex[ 267 ] = 46  ;
    iIndex[ 268 ] = 39  ; jIndex[ 268 ] = 47  ;
    iIndex[ 269 ] = 39  ; jIndex[ 269 ] = 76  ;
    iIndex[ 270 ] = 39  ; jIndex[ 270 ] = 77  ;
    iIndex[ 271 ] = 40  ; jIndex[ 271 ] = 39  ;
    iIndex[ 272 ] = 40  ; jIndex[ 272 ] = 40  ;
    iIndex[ 273 ] = 40  ; jIndex[ 273 ] = 42  ;
    iIndex[ 274 ] = 40  ; jIndex[ 274 ] = 43  ;
    iIndex[ 275 ] = 40  ; jIndex[ 275 ] = 44  ;
    iIndex[ 276 ] = 40  ; jIndex[ 276 ] = 45  ;
    iIndex[ 277 ] = 40  ; jIndex[ 277 ] = 46  ;
    iIndex[ 278 ] = 40  ; jIndex[ 278 ] = 47  ;
    iIndex[ 279 ] = 40  ; jIndex[ 279 ] = 76  ;
    iIndex[ 280 ] = 40  ; jIndex[ 280 ] = 77  ;
    iIndex[ 281 ] = 41  ; jIndex[ 281 ] = 39  ;
    iIndex[ 282 ] = 41  ; jIndex[ 282 ] = 40  ;
    iIndex[ 283 ] = 41  ; jIndex[ 283 ] = 42  ;
    iIndex[ 284 ] = 41  ; jIndex[ 284 ] = 43  ;
    iIndex[ 285 ] = 41  ; jIndex[ 285 ] = 44  ;
    iIndex[ 286 ] = 41  ; jIndex[ 286 ] = 45  ;
    iIndex[ 287 ] = 41  ; jIndex[ 287 ] = 46  ;
    iIndex[ 288 ] = 41  ; jIndex[ 288 ] = 47  ;
    iIndex[ 289 ] = 41  ; jIndex[ 289 ] = 76  ;
    iIndex[ 290 ] = 41  ; jIndex[ 290 ] = 77  ;
    iIndex[ 291 ] = 42  ; jIndex[ 291 ] = 39  ;
    iIndex[ 292 ] = 42  ; jIndex[ 292 ] = 40  ;
    iIndex[ 293 ] = 42  ; jIndex[ 293 ] = 76  ;
    iIndex[ 294 ] = 42  ; jIndex[ 294 ] = 77  ;
    iIndex[ 295 ] = 43  ; jIndex[ 295 ] = 39  ;
    iIndex[ 296 ] = 43  ; jIndex[ 296 ] = 40  ;
    iIndex[ 297 ] = 43  ; jIndex[ 297 ] = 76  ;
    iIndex[ 298 ] = 43  ; jIndex[ 298 ] = 77  ;
    iIndex[ 299 ] = 44  ; jIndex[ 299 ] = 39  ;
    iIndex[ 300 ] = 44  ; jIndex[ 300 ] = 40  ;
    iIndex[ 301 ] = 44  ; jIndex[ 301 ] = 76  ;
    iIndex[ 302 ] = 44  ; jIndex[ 302 ] = 77  ;
    iIndex[ 303 ] = 45  ; jIndex[ 303 ] = 39  ;
    iIndex[ 304 ] = 45  ; jIndex[ 304 ] = 40  ;
    iIndex[ 305 ] = 45  ; jIndex[ 305 ] = 76  ;
    iIndex[ 306 ] = 45  ; jIndex[ 306 ] = 77  ;
    iIndex[ 307 ] = 46  ; jIndex[ 307 ] = 39  ;
    iIndex[ 308 ] = 46  ; jIndex[ 308 ] = 40  ;
    iIndex[ 309 ] = 46  ; jIndex[ 309 ] = 76  ;
    iIndex[ 310 ] = 46  ; jIndex[ 310 ] = 77  ;
    iIndex[ 311 ] = 47  ; jIndex[ 311 ] = 39  ;
    iIndex[ 312 ] = 47  ; jIndex[ 312 ] = 40  ;
    iIndex[ 313 ] = 47  ; jIndex[ 313 ] = 76  ;
    iIndex[ 314 ] = 47  ; jIndex[ 314 ] = 77  ;
    iIndex[ 315 ] = 48  ; jIndex[ 315 ] = 39  ;
    iIndex[ 316 ] = 48  ; jIndex[ 316 ] = 40  ;
    iIndex[ 317 ] = 48  ; jIndex[ 317 ] = 76  ;
    iIndex[ 318 ] = 48  ; jIndex[ 318 ] = 77  ;
    iIndex[ 319 ] = 49  ; jIndex[ 319 ] = 39  ;
    iIndex[ 320 ] = 49  ; jIndex[ 320 ] = 40  ;
    iIndex[ 321 ] = 49  ; jIndex[ 321 ] = 76  ;
    iIndex[ 322 ] = 49  ; jIndex[ 322 ] = 77  ;
    iIndex[ 323 ] = 50  ; jIndex[ 323 ] = 39  ;
    iIndex[ 324 ] = 50  ; jIndex[ 324 ] = 40  ;
    iIndex[ 325 ] = 50  ; jIndex[ 325 ] = 76  ;
    iIndex[ 326 ] = 50  ; jIndex[ 326 ] = 77  ;
    iIndex[ 327 ] = 51  ; jIndex[ 327 ] = 39  ;
    iIndex[ 328 ] = 51  ; jIndex[ 328 ] = 40  ;
    iIndex[ 329 ] = 51  ; jIndex[ 329 ] = 76  ;
    iIndex[ 330 ] = 51  ; jIndex[ 330 ] = 77  ;
    iIndex[ 331 ] = 52  ; jIndex[ 331 ] = 39  ;
    iIndex[ 332 ] = 52  ; jIndex[ 332 ] = 40  ;
    iIndex[ 333 ] = 52  ; jIndex[ 333 ] = 76  ;
    iIndex[ 334 ] = 52  ; jIndex[ 334 ] = 77  ;
    iIndex[ 335 ] = 53  ; jIndex[ 335 ] = 39  ;
    iIndex[ 336 ] = 53  ; jIndex[ 336 ] = 40  ;
    iIndex[ 337 ] = 53  ; jIndex[ 337 ] = 76  ;
    iIndex[ 338 ] = 53  ; jIndex[ 338 ] = 77  ;
    iIndex[ 339 ] = 54  ; jIndex[ 339 ] = 39  ;
    iIndex[ 340 ] = 54  ; jIndex[ 340 ] = 40  ;
    iIndex[ 341 ] = 54  ; jIndex[ 341 ] = 76  ;
    iIndex[ 342 ] = 54  ; jIndex[ 342 ] = 77  ;
    iIndex[ 343 ] = 55  ; jIndex[ 343 ] = 39  ;
    iIndex[ 344 ] = 55  ; jIndex[ 344 ] = 40  ;
    iIndex[ 345 ] = 55  ; jIndex[ 345 ] = 76  ;
    iIndex[ 346 ] = 55  ; jIndex[ 346 ] = 77  ;
    iIndex[ 347 ] = 56  ; jIndex[ 347 ] = 39  ;
    iIndex[ 348 ] = 56  ; jIndex[ 348 ] = 40  ;
    iIndex[ 349 ] = 56  ; jIndex[ 349 ] = 42  ;
    iIndex[ 350 ] = 56  ; jIndex[ 350 ] = 76  ;
    iIndex[ 351 ] = 56  ; jIndex[ 351 ] = 77  ;
    iIndex[ 352 ] = 57  ; jIndex[ 352 ] = 39  ;
    iIndex[ 353 ] = 57  ; jIndex[ 353 ] = 40  ;
    iIndex[ 354 ] = 57  ; jIndex[ 354 ] = 42  ;
    iIndex[ 355 ] = 57  ; jIndex[ 355 ] = 43  ;
    iIndex[ 356 ] = 57  ; jIndex[ 356 ] = 45  ;
    iIndex[ 357 ] = 57  ; jIndex[ 357 ] = 76  ;
    iIndex[ 358 ] = 57  ; jIndex[ 358 ] = 77  ;
    iIndex[ 359 ] = 58  ; jIndex[ 359 ] = 39  ;
    iIndex[ 360 ] = 58  ; jIndex[ 360 ] = 40  ;
    iIndex[ 361 ] = 58  ; jIndex[ 361 ] = 42  ;
    iIndex[ 362 ] = 58  ; jIndex[ 362 ] = 43  ;
    iIndex[ 363 ] = 58  ; jIndex[ 363 ] = 44  ;
    iIndex[ 364 ] = 58  ; jIndex[ 364 ] = 45  ;
    iIndex[ 365 ] = 58  ; jIndex[ 365 ] = 46  ;
    iIndex[ 366 ] = 58  ; jIndex[ 366 ] = 47  ;
    iIndex[ 367 ] = 58  ; jIndex[ 367 ] = 49  ;
    iIndex[ 368 ] = 58  ; jIndex[ 368 ] = 50  ;
    iIndex[ 369 ] = 58  ; jIndex[ 369 ] = 52  ;
    iIndex[ 370 ] = 58  ; jIndex[ 370 ] = 53  ;
    iIndex[ 371 ] = 58  ; jIndex[ 371 ] = 54  ;
    iIndex[ 372 ] = 58  ; jIndex[ 372 ] = 55  ;
    iIndex[ 373 ] = 58  ; jIndex[ 373 ] = 76  ;
    iIndex[ 374 ] = 58  ; jIndex[ 374 ] = 77  ;
    iIndex[ 375 ] = 59  ; jIndex[ 375 ] = 39  ;
    iIndex[ 376 ] = 59  ; jIndex[ 376 ] = 40  ;
    iIndex[ 377 ] = 59  ; jIndex[ 377 ] = 42  ;
    iIndex[ 378 ] = 59  ; jIndex[ 378 ] = 43  ;
    iIndex[ 379 ] = 59  ; jIndex[ 379 ] = 44  ;
    iIndex[ 380 ] = 59  ; jIndex[ 380 ] = 45  ;
    iIndex[ 381 ] = 59  ; jIndex[ 381 ] = 46  ;
    iIndex[ 382 ] = 59  ; jIndex[ 382 ] = 47  ;
    iIndex[ 383 ] = 59  ; jIndex[ 383 ] = 55  ;
    iIndex[ 384 ] = 59  ; jIndex[ 384 ] = 76  ;
    iIndex[ 385 ] = 59  ; jIndex[ 385 ] = 77  ;
    iIndex[ 386 ] = 60  ; jIndex[ 386 ] = 39  ;
    iIndex[ 387 ] = 60  ; jIndex[ 387 ] = 40  ;
    iIndex[ 388 ] = 60  ; jIndex[ 388 ] = 42  ;
    iIndex[ 389 ] = 60  ; jIndex[ 389 ] = 43  ;
    iIndex[ 390 ] = 60  ; jIndex[ 390 ] = 45  ;
    iIndex[ 391 ] = 60  ; jIndex[ 391 ] = 46  ;
    iIndex[ 392 ] = 60  ; jIndex[ 392 ] = 47  ;
    iIndex[ 393 ] = 60  ; jIndex[ 393 ] = 76  ;
    iIndex[ 394 ] = 60  ; jIndex[ 394 ] = 77  ;
    iIndex[ 395 ] = 61  ; jIndex[ 395 ] = 39  ;
    iIndex[ 396 ] = 61  ; jIndex[ 396 ] = 40  ;
    iIndex[ 397 ] = 61  ; jIndex[ 397 ] = 42  ;
    iIndex[ 398 ] = 61  ; jIndex[ 398 ] = 43  ;
    iIndex[ 399 ] = 61  ; jIndex[ 399 ] = 44  ;
    iIndex[ 400 ] = 61  ; jIndex[ 400 ] = 47  ;
    iIndex[ 401 ] = 61  ; jIndex[ 401 ] = 55  ;
    iIndex[ 402 ] = 61  ; jIndex[ 402 ] = 76  ;
    iIndex[ 403 ] = 61  ; jIndex[ 403 ] = 77  ;
    iIndex[ 404 ] = 62  ; jIndex[ 404 ] = 39  ;
    iIndex[ 405 ] = 62  ; jIndex[ 405 ] = 40  ;
    iIndex[ 406 ] = 62  ; jIndex[ 406 ] = 42  ;
    iIndex[ 407 ] = 62  ; jIndex[ 407 ] = 43  ;
    iIndex[ 408 ] = 62  ; jIndex[ 408 ] = 44  ;
    iIndex[ 409 ] = 62  ; jIndex[ 409 ] = 46  ;
    iIndex[ 410 ] = 62  ; jIndex[ 410 ] = 76  ;
    iIndex[ 411 ] = 62  ; jIndex[ 411 ] = 77  ;
    iIndex[ 412 ] = 63  ; jIndex[ 412 ] = 39  ;
    iIndex[ 413 ] = 63  ; jIndex[ 413 ] = 40  ;
    iIndex[ 414 ] = 63  ; jIndex[ 414 ] = 42  ;
    iIndex[ 415 ] = 63  ; jIndex[ 415 ] = 43  ;
    iIndex[ 416 ] = 63  ; jIndex[ 416 ] = 44  ;
    iIndex[ 417 ] = 63  ; jIndex[ 417 ] = 45  ;
    iIndex[ 418 ] = 63  ; jIndex[ 418 ] = 76  ;
    iIndex[ 419 ] = 63  ; jIndex[ 419 ] = 77  ;
    iIndex[ 420 ] = 64  ; jIndex[ 420 ] = 39  ;
    iIndex[ 421 ] = 64  ; jIndex[ 421 ] = 40  ;
    iIndex[ 422 ] = 64  ; jIndex[ 422 ] = 76  ;
    iIndex[ 423 ] = 64  ; jIndex[ 423 ] = 77  ;
    iIndex[ 424 ] = 65  ; jIndex[ 424 ] = 39  ;
    iIndex[ 425 ] = 65  ; jIndex[ 425 ] = 40  ;
    iIndex[ 426 ] = 65  ; jIndex[ 426 ] = 42  ;
    iIndex[ 427 ] = 65  ; jIndex[ 427 ] = 76  ;
    iIndex[ 428 ] = 65  ; jIndex[ 428 ] = 77  ;
    iIndex[ 429 ] = 66  ; jIndex[ 429 ] = 39  ;
    iIndex[ 430 ] = 66  ; jIndex[ 430 ] = 40  ;
    iIndex[ 431 ] = 66  ; jIndex[ 431 ] = 42  ;
    iIndex[ 432 ] = 66  ; jIndex[ 432 ] = 76  ;
    iIndex[ 433 ] = 66  ; jIndex[ 433 ] = 77  ;
    iIndex[ 434 ] = 67  ; jIndex[ 434 ] = 39  ;
    iIndex[ 435 ] = 67  ; jIndex[ 435 ] = 40  ;
    iIndex[ 436 ] = 67  ; jIndex[ 436 ] = 76  ;
    iIndex[ 437 ] = 67  ; jIndex[ 437 ] = 77  ;
    iIndex[ 438 ] = 68  ; jIndex[ 438 ] = 39  ;
    iIndex[ 439 ] = 68  ; jIndex[ 439 ] = 40  ;
    iIndex[ 440 ] = 68  ; jIndex[ 440 ] = 42  ;
    iIndex[ 441 ] = 68  ; jIndex[ 441 ] = 76  ;
    iIndex[ 442 ] = 68  ; jIndex[ 442 ] = 77  ;
    iIndex[ 443 ] = 69  ; jIndex[ 443 ] = 39  ;
    iIndex[ 444 ] = 69  ; jIndex[ 444 ] = 40  ;
    iIndex[ 445 ] = 69  ; jIndex[ 445 ] = 42  ;
    iIndex[ 446 ] = 69  ; jIndex[ 446 ] = 76  ;
    iIndex[ 447 ] = 69  ; jIndex[ 447 ] = 77  ;
    iIndex[ 448 ] = 70  ; jIndex[ 448 ] = 39  ;
    iIndex[ 449 ] = 70  ; jIndex[ 449 ] = 40  ;
    iIndex[ 450 ] = 70  ; jIndex[ 450 ] = 42  ;
    iIndex[ 451 ] = 70  ; jIndex[ 451 ] = 55  ;
    iIndex[ 452 ] = 70  ; jIndex[ 452 ] = 76  ;
    iIndex[ 453 ] = 70  ; jIndex[ 453 ] = 77  ;
    iIndex[ 454 ] = 71  ; jIndex[ 454 ] = 39  ;
    iIndex[ 455 ] = 71  ; jIndex[ 455 ] = 40  ;
    iIndex[ 456 ] = 71  ; jIndex[ 456 ] = 42  ;
    iIndex[ 457 ] = 71  ; jIndex[ 457 ] = 43  ;
    iIndex[ 458 ] = 71  ; jIndex[ 458 ] = 45  ;
    iIndex[ 459 ] = 71  ; jIndex[ 459 ] = 54  ;
    iIndex[ 460 ] = 71  ; jIndex[ 460 ] = 55  ;
    iIndex[ 461 ] = 71  ; jIndex[ 461 ] = 76  ;
    iIndex[ 462 ] = 71  ; jIndex[ 462 ] = 77  ;
    iIndex[ 463 ] = 72  ; jIndex[ 463 ] = 39  ;
    iIndex[ 464 ] = 72  ; jIndex[ 464 ] = 40  ;
    iIndex[ 465 ] = 72  ; jIndex[ 465 ] = 76  ;
    iIndex[ 466 ] = 72  ; jIndex[ 466 ] = 77  ;
    iIndex[ 467 ] = 73  ; jIndex[ 467 ] = 39  ;
    iIndex[ 468 ] = 73  ; jIndex[ 468 ] = 40  ;
    iIndex[ 469 ] = 73  ; jIndex[ 469 ] = 76  ;
    iIndex[ 470 ] = 73  ; jIndex[ 470 ] = 77  ;
    iIndex[ 471 ] = 74  ; jIndex[ 471 ] = 39  ;
    iIndex[ 472 ] = 74  ; jIndex[ 472 ] = 40  ;
    iIndex[ 473 ] = 74  ; jIndex[ 473 ] = 76  ;
    iIndex[ 474 ] = 74  ; jIndex[ 474 ] = 77  ;
    iIndex[ 475 ] = 75  ; jIndex[ 475 ] = 39  ;
    iIndex[ 476 ] = 75  ; jIndex[ 476 ] = 40  ;
    iIndex[ 477 ] = 75  ; jIndex[ 477 ] = 76  ;
    iIndex[ 478 ] = 75  ; jIndex[ 478 ] = 77  ;
    iIndex[ 479 ] = 76  ; jIndex[ 479 ] = 39  ;
    iIndex[ 480 ] = 76  ; jIndex[ 480 ] = 40  ;
    iIndex[ 481 ] = 76  ; jIndex[ 481 ] = 76  ;
    iIndex[ 482 ] = 76  ; jIndex[ 482 ] = 77  ;
    iIndex[ 483 ] = 77  ; jIndex[ 483 ] = 39  ;
    iIndex[ 484 ] = 77  ; jIndex[ 484 ] = 40  ;
    iIndex[ 485 ] = 77  ; jIndex[ 485 ] = 76  ;
    iIndex[ 486 ] = 77  ; jIndex[ 486 ] = 77  ;
  }

  void
  General::DadjointBCDx_sparse(
    NodeType2 const             & LEFT__,
    NodeType2 const             & RIGHT__,
    P_const_pointer_type          P__,
    OMEGA_full_const_pointer_type OMEGA__,
    real_type                     result__[]
  ) const {
    integer i_segment_left  = LEFT__.i_segment;
    real_type const * QL__  = LEFT__.q;
    real_type const * XL__  = LEFT__.x;
    real_type const * LL__  = LEFT__.lambda;
    integer i_segment_right = RIGHT__.i_segment;
    real_type const * QR__  = RIGHT__.q;
    real_type const * XR__  = RIGHT__.x;
    real_type const * LR__  = RIGHT__.lambda;
    Road2D::SegmentClass const & segmentLeft  = pRoad->getSegmentByIndex(i_segment_left);
    Road2D::SegmentClass const & segmentRight = pRoad->getSegmentByIndex(i_segment_right);
    real_type t2   = 2 * ModelPars[130];
    real_type t5   = ALIAS_kappa_L(QL__[0]);
    real_type t7   = t5 * XL__[37] - 1;
    real_type t8   = 1.0 / t7;
    real_type t9   = XL__[38];
    real_type t10  = cos(t9);
    real_type t11  = t10 * t8;
    real_type t12  = ModelPars[24];
    real_type t13  = LL__[0];
    real_type t14  = t13 * t12;
    real_type t16  = XL__[7];
    real_type t17  = cos(t16);
    real_type t18  = ModelPars[73];
    real_type t20  = ModelPars[199];
    real_type t21  = t20 * t18 * t17;
    real_type t22  = sin(t16);
    real_type t23  = ModelPars[23];
    real_type t24  = ModelPars[189];
    real_type t25  = -t23 + t24;
    real_type t27  = ModelPars[75];
    real_type t28  = t23 * t27;
    real_type t29  = t18 * t25 - t28;
    real_type t30  = t29 * t22;
    real_type t31  = ModelPars[72];
    real_type t32  = ModelPars[68];
    real_type t33  = t32 * t31;
    real_type t34  = ModelPars[65];
    real_type t35  = cos(t34);
    real_type t37  = t20 * t18 * t35;
    real_type t38  = sin(t34);
    real_type t40  = -t18 * t25;
    real_type t41  = t40 + t28;
    real_type t42  = t41 * t38;
    real_type t43  = ModelPars[186];
    real_type t44  = cos(t43);
    real_type t45  = t44 * t33;
    real_type t46  = ModelPars[177];
    real_type t47  = ModelPars[74];
    real_type t48  = t47 * t46;
    real_type t49  = XL__[8];
    real_type t50  = t47 * t49;
    real_type t51  = ModelPars[28];
    real_type t52  = t51 * t12;
    real_type t53  = -t21 + t30 - t33 + t37 + t42 + t45 + t48 - t50 - t52;
    real_type t54  = XL__[3];
    real_type t55  = cos(t54);
    real_type t56  = t55 * t53;
    real_type t58  = ModelPars[64];
    real_type t59  = XL__[4] + t58;
    real_type t60  = cos(t59);
    real_type t61  = t60 * t11;
    real_type t62  = t61 * t56;
    real_type t63  = t29 * t17;
    real_type t65  = t20 * t18 * t22;
    real_type t66  = t41 * t35;
    real_type t68  = t20 * t18 * t38;
    real_type t69  = sin(t43);
    real_type t70  = t69 * t33;
    real_type t71  = ModelPars[27];
    real_type t72  = t71 * t12;
    real_type t73  = t63 + t65 + t66 - t68 - t70 + t72;
    real_type t74  = t55 * t73;
    real_type t75  = sin(t59);
    real_type t76  = t75 * t74;
    real_type t77  = t76 * t11;
    real_type t78  = t55 * t12;
    real_type t79  = XL__[5];
    real_type t80  = t79 * t78;
    real_type t81  = sin(t54);
    real_type t82  = ModelPars[140];
    real_type t83  = t82 * t47;
    real_type t84  = ModelPars[168];
    real_type t85  = ModelPars[190];
    real_type t87  = t85 * t84 + t83;
    real_type t88  = t87 * t81;
    real_type t89  = XL__[6];
    real_type t91  = t89 * t88 + t80;
    real_type t94  = LL__[4];
    real_type t96  = t41 * t22;
    real_type t97  = t29 * t38;
    real_type t98  = t21 + t96 + t33 - t37 + t97 - t45 - t48 + t50 + t52;
    real_type t99  = t81 * t98;
    real_type t101 = t73 * t81;
    real_type t102 = t75 * t101;
    real_type t104 = t81 * t12;
    real_type t105 = t79 * t104;
    real_type t106 = -t87;
    real_type t107 = t89 * t106;
    real_type t109 = t55 * t107 + t105;
    real_type t110 = t8 * t109;
    real_type t112 = -t10 * t110 - t102 * t11 - t61 * t99;
    real_type t113 = LL__[5];
    real_type t115 = t87 * t11;
    real_type t116 = t60 * t89;
    real_type t117 = LL__[6];
    real_type t118 = t117 * t116;
    real_type t120 = t21 - t30;
    real_type t121 = t60 * t120;
    real_type t123 = t63 + t65;
    real_type t124 = t75 * t123;
    real_type t125 = t124 * t11;
    real_type t127 = LL__[7];
    real_type t129 = t8 * t47;
    real_type t130 = t75 * t10;
    real_type t131 = LL__[8];
    result__[ 0   ] = t2 - t14 * t11 + t94 * (-t91 * t11 + t62 - t77) + t113 * t112 + t118 * t115 + t127 * (-t121 * t11 - t125) + t131 * t130 * t129;
    real_type t134 = sin(t9);
    real_type t135 = t134 * t8;
    real_type t137 = t60 * t135;
    real_type t138 = t137 * t56;
    real_type t139 = t76 * t135;
    real_type t146 = t102 * t135 + t134 * t110 + t137 * t99;
    real_type t148 = t87 * t135;
    real_type t151 = t124 * t135;
    real_type t154 = t75 * t134;
    result__[ 1   ] = t14 * t135 + t94 * (t91 * t135 - t138 + t139) + t113 * t146 - t118 * t148 + t127 * (t121 * t135 + t151) - t131 * t154 * t129;
    real_type t157 = XL__[0];
    real_type t159 = XL__[1];
    real_type t161 = t157 * t10 - t159 * t134;
    real_type t162 = t161 * t8;
    real_type t163 = t53 * t81;
    real_type t164 = t60 * t163;
    real_type t165 = t164 * t162;
    real_type t166 = t102 * t162;
    real_type t167 = t87 * t55;
    real_type t169 = t89 * t167 - t105;
    real_type t173 = t55 * t98;
    real_type t174 = t60 * t162;
    real_type t176 = t76 * t162;
    real_type t178 = -t81 * t107 + t80;
    real_type t181 = -t161 * t8 * t178 - t174 * t173 - t176;
    result__[ 2   ] = t94 * (-t169 * t162 - t165 + t166) + t113 * t181;
    real_type t183 = t75 * t162;
    real_type t184 = t183 * t56;
    real_type t185 = t60 * t74;
    real_type t187 = -t185 * t162 - t184;
    real_type t191 = t60 * t101 * t162;
    real_type t192 = t183 * t99 - t191;
    real_type t194 = t87 * t162;
    real_type t195 = t75 * t89;
    real_type t196 = t117 * t195;
    real_type t198 = t75 * t120;
    real_type t199 = t198 * t162;
    real_type t200 = t60 * t123;
    real_type t201 = t200 * t162;
    real_type t204 = t60 * t161;
    real_type t205 = t131 * t204;
    result__[ 3   ] = t94 * t187 + t113 * t192 - t196 * t194 + t127 * (t199 - t201) + t205 * t129;
    real_type t209 = t113 * t162;
    result__[ 4   ] = -t94 * t78 * t162 - t209 * t104;
    real_type t213 = t55 * t106;
    result__[ 5   ] = t117 * t60 * t87 * t162 - t94 * t88 * t162 - t209 * t213;
    real_type t218 = t123 * t55;
    real_type t219 = t60 * t218;
    real_type t220 = t219 * t162;
    real_type t221 = t55 * t120;
    real_type t224 = -t75 * t221 * t162 + t220;
    real_type t226 = t41 * t17;
    real_type t227 = t226 - t65;
    real_type t228 = t81 * t227;
    real_type t230 = t120 * t81;
    real_type t233 = -t75 * t230 * t162 - t174 * t228;
    real_type t235 = -t123;
    result__[ 6   ] = t94 * t224 + t113 * t233 + t127 * (-t60 * t235 * t162 - t199);
    real_type t240 = t55 * t47;
    real_type t241 = t8 * t240;
    real_type t244 = t81 * t47;
    real_type t245 = t8 * t244;
    real_type t246 = t113 * t204;
    result__[ 7   ] = -t94 * t204 * t241 - t246 * t245;
    real_type t248 = t7 * t7;
    real_type t249 = 1.0 / t248;
    real_type t250 = t161 * t249;
    real_type t253 = t249 * t56;
    real_type t254 = t5 * t204;
    real_type t255 = t254 * t253;
    real_type t256 = t73 * t250;
    real_type t258 = t5 * t75 * t55;
    real_type t259 = t258 * t256;
    real_type t264 = t249 * t99;
    real_type t266 = t81 * t250;
    real_type t267 = t75 * t73;
    real_type t271 = t5 * t161;
    real_type t273 = t271 * t249 * t109 + t5 * t267 * t266 + t254 * t264;
    real_type t275 = t87 * t250;
    real_type t276 = t5 * t117;
    real_type t282 = t5 * t124 * t250;
    real_type t285 = t249 * t47;
    real_type t286 = t161 * t285;
    real_type t287 = t131 * t75;
    result__[ 8   ] = t5 * t14 * t250 + t94 * (t5 * t91 * t250 - t255 + t259) + t113 * t273 - t276 * t116 * t275 + t127 * (t5 * t121 * t250 + t282) - t5 * t287 * t286;
    real_type t292 = -t159 * t10 - t157 * t134;
    real_type t293 = t292 * t8;
    real_type t295 = t60 * t293;
    real_type t296 = t295 * t56;
    real_type t297 = t76 * t293;
    real_type t304 = -t102 * t293 - t292 * t110 - t295 * t99;
    real_type t306 = t87 * t293;
    real_type t309 = t124 * t293;
    real_type t312 = t75 * t292;
    result__[ 9   ] = -t14 * t293 + t94 * (-t91 * t293 + t296 - t297) + t113 * t304 + t118 * t306 + t127 * (-t121 * t293 - t309) + t131 * t312 * t129;
    real_type t315 = LL__[1];
    real_type t316 = t315 * t12;
    real_type t318 = -t91;
    real_type t321 = LL__[3];
    real_type t323 = t60 * t73;
    real_type t325 = t75 * t53;
    real_type t327 = -t323 * t11 - t325 * t11;
    real_type t329 = t89 * t81;
    real_type t330 = t75 * t329;
    real_type t335 = t123 * t81;
    real_type t336 = t60 * t335;
    real_type t338 = -t120;
    real_type t339 = t338 * t81;
    real_type t340 = t75 * t339;
    real_type t342 = -t336 * t11 - t340 * t11;
    real_type t344 = t60 * t10;
    real_type t345 = t131 * t344;
    result__[ 10  ] = -t316 * t11 + t321 * (-t318 * t11 - t62 + t77) + t113 * t327 + t117 * (-t167 * t11 - t330 * t115) + t127 * t342 + t345 * t245;
    real_type t353 = t323 * t135 + t325 * t135;
    real_type t361 = t336 * t135 + t340 * t135;
    real_type t363 = t60 * t134;
    real_type t364 = t131 * t363;
    result__[ 11  ] = t2 + t316 * t135 + t321 * (t318 * t135 + t138 - t139) + t113 * t353 + t117 * (t167 * t135 + t330 * t148) + t127 * t361 - t364 * t245;
    real_type t370 = t89 * t55;
    real_type t376 = t55 * t338;
    real_type t377 = t75 * t376;
    real_type t379 = -t377 * t162 - t220;
    result__[ 12  ] = t321 * (t169 * t162 + t165 - t166) + t117 * (-t75 * t370 * t194 + t88 * t162) + t127 * t379 + t205 * t241;
    real_type t383 = -t321 * t187;
    real_type t384 = t267 * t162;
    real_type t385 = t60 * t53;
    real_type t386 = t385 * t162;
    real_type t387 = t384 - t386;
    real_type t391 = t117 * t60 * t329 * t194;
    real_type t393 = t75 * t335 * t162;
    real_type t394 = t60 * t339;
    real_type t396 = -t394 * t162 + t393;
    real_type t398 = t75 * t161;
    real_type t399 = t131 * t398;
    real_type t400 = t399 * t245;
    result__[ 13  ] = t113 * t387 + t127 * t396 + t383 - t391 - t400;
    result__[ 14  ] = t321 * t78 * t162;
    real_type t404 = t75 * t81;
    result__[ 15  ] = -t117 * t404 * t194 + t321 * t88 * t162;
    real_type t409 = t121 * t162;
    real_type t411 = -t124 * t162 - t409;
    real_type t415 = -t60 * t230 * t162 - t393;
    result__[ 16  ] = t113 * t411 + t127 * t415 - t321 * t224;
    result__[ 17  ] = t113 * t398 * t129 + t321 * t204 * t241;
    real_type t421 = t5 * t316;
    real_type t431 = t5 * t323 * t250 + t5 * t325 * t250;
    real_type t433 = t5 * t75;
    real_type t440 = t5 * t200;
    real_type t445 = t5 * t75 * t338 * t266 + t440 * t266;
    real_type t447 = t249 * t244;
    real_type t448 = t5 * t131;
    result__[ 18  ] = t421 * t250 + t321 * (t5 * t318 * t250 + t255 - t259) + t113 * t431 + t117 * (t5 * t167 * t250 + t433 * t329 * t275) + t127 * t445 - t448 * t204 * t447;
    real_type t457 = -t323 * t293 - t325 * t293;
    real_type t465 = -t336 * t293 - t340 * t293;
    real_type t467 = t60 * t292;
    real_type t468 = t131 * t467;
    result__[ 19  ] = -t316 * t293 + t321 * (-t318 * t293 - t296 + t297) + t113 * t457 + t117 * (-t167 * t293 - t330 * t306) + t127 * t465 + t468 * t245;
    real_type t472 = t79 * t55;
    real_type t475 = t47 * t49 * t82;
    real_type t476 = ModelPars[120];
    real_type t478 = t47 * t476 * t82;
    real_type t481 = t84 * t85 * ModelPars[200];
    real_type t482 = ModelPars[147];
    real_type t483 = -t475 + t478 - t481 - t482;
    real_type t484 = t483 * t81;
    real_type t486 = -t53 * t472 - t89 * t484;
    real_type t487 = t75 * t486;
    real_type t489 = t17 * t17;
    real_type t494 = t23 * t23;
    real_type t495 = t27 * t494;
    real_type t496 = ModelPars[14];
    real_type t497 = ModelPars[19];
    real_type t498 = -(t23 - t24 - t20) * (t23 - t24 + t20) * t18 - t495 + t496 - t497;
    real_type t499 = t498 * t489;
    real_type t502 = ModelPars[148];
    real_type t503 = t20 * t40 - t502;
    real_type t504 = t503 * t22 * t17;
    real_type t505 = 2 * t504;
    real_type t506 = t35 * t35;
    real_type t507 = -t498;
    real_type t508 = t507 * t506;
    real_type t510 = t503 * t38 * t35;
    real_type t511 = 2 * t510;
    real_type t512 = t44 * t44;
    real_type t513 = t32 * t32;
    real_type t514 = t513 * t31;
    real_type t515 = ModelPars[13];
    real_type t516 = ModelPars[18];
    real_type t517 = -t514 - t515 + t516;
    real_type t518 = t517 * t512;
    real_type t519 = ModelPars[145];
    real_type t520 = t31 * t519;
    real_type t522 = t44 * t32 * t520;
    real_type t523 = ModelPars[141];
    real_type t525 = t69 * t32;
    real_type t526 = t525 * t31 * t523;
    real_type t527 = t49 * t49;
    real_type t528 = t527 * t47;
    real_type t529 = t528 / 2;
    real_type t531 = t47 * t476 * t49;
    real_type t534 = (t476 - t46 / 2) * t48;
    real_type t535 = t519 * t33;
    real_type t536 = t71 * t71;
    real_type t537 = t51 * t51;
    real_type t538 = -t536 + t537;
    real_type t540 = t538 * t12 / 2;
    real_type t541 = ModelPars[9];
    real_type t542 = t541 / 2;
    real_type t543 = ModelPars[11];
    real_type t544 = t543 / 2;
    real_type t545 = t499 + t505 + t508 - t511 + t518 - t522 + t526 + t529 - t531 + t534 + t514 + t535 + t540 - t516 + t542 - t544 + t515;
    real_type t546 = t55 * t545;
    real_type t547 = t75 * t11;
    real_type t551 = ModelPars[22];
    real_type t552 = t551 + t82;
    real_type t553 = t552 * t47;
    real_type t554 = t82 * t553;
    real_type t555 = t85 * t85;
    real_type t556 = t84 * t555;
    real_type t558 = t84 * t85 * t551;
    real_type t559 = ModelPars[12];
    real_type t560 = ModelPars[16];
    real_type t561 = ModelPars[149];
    real_type t562 = ModelPars[150];
    real_type t563 = t554 + t556 + t558 - t559 + t560 - t561 + t562;
    real_type t564 = t563 * t81;
    real_type t566 = -t472 * t73 - t564 * t89;
    real_type t570 = t523 * t33;
    real_type t571 = 2 * t503;
    real_type t574 = t22 * t507 * t17;
    real_type t576 = -t571 * t506;
    real_type t578 = t38 * t507 * t35;
    real_type t579 = -t517;
    real_type t582 = (t579 * t69 + t570) * t44;
    real_type t583 = t525 * t520;
    real_type t585 = t47 * t552 * t49;
    real_type t586 = t46 * t553;
    real_type t587 = t71 * t52;
    real_type t588 = ModelPars[0];
    real_type t589 = t489 * t571 - t570 + t574 + t576 - t578 + t582 + t583 - t585 + t586 - t587 - t588;
    real_type t590 = t589 * t55;
    real_type t591 = t60 * t60;
    real_type t592 = t591 * t590;
    real_type t598 = t545 * t81;
    real_type t599 = t55 * t598;
    real_type t600 = t591 * t11;
    real_type t603 = t81 * t589;
    real_type t604 = t55 * t603;
    real_type t607 = t55 * t55;
    real_type t608 = t483 * t607;
    real_type t611 = t79 * t81;
    real_type t614 = t89 * t483;
    real_type t615 = -2 * t56 * t611 + 2 * t608 * t89 - t614;
    real_type t619 = t563 * t607;
    real_type t622 = t81 * t55;
    real_type t623 = t73 * t79;
    real_type t626 = t89 * t563;
    real_type t627 = -2 * t619 * t89 + 2 * t622 * t623 + t626;
    real_type t628 = t75 * t627;
    real_type t630 = t87 * t607;
    real_type t631 = t79 * t89;
    real_type t634 = t79 * t79;
    real_type t635 = t634 * t12;
    real_type t636 = 2 * t526;
    real_type t637 = t536 * t12;
    real_type t638 = ModelPars[10];
    real_type t639 = t499 + t505 + t508 - t511 - t635 + t518 + t636 - t637 + t514 + t515 - t516 + t541 - t638;
    real_type t642 = t89 * t87;
    real_type t644 = -t55 * t639 * t81 - 2 * t630 * t631 + t642 * t79;
    real_type t645 = t8 * t644;
    real_type t650 = t24 * t23;
    real_type t652 = t24 * t24;
    real_type t654 = t20 * t20;
    real_type t656 = 2 * t494 - 4 * t650 + 2 * t652 - 2 * t654;
    real_type t658 = 2 * t495;
    real_type t659 = 2 * t496;
    real_type t660 = 2 * t497;
    real_type t661 = t18 * t656 + t658 - t659 + t660;
    real_type t662 = t489 * t661;
    real_type t665 = -t20 * t23 + t20 * t24;
    real_type t666 = 4 * t665;
    real_type t668 = 4 * t502;
    real_type t669 = t18 * t666 + t668;
    real_type t674 = -t18 * t656 - t658 + t659 - t660;
    real_type t675 = t506 * t674;
    real_type t678 = -t18 * t666 - t668;
    real_type t680 = t35 * t38 * t678;
    real_type t681 = 2 * t579;
    real_type t682 = t512 * t681;
    real_type t683 = 2 * t522;
    real_type t684 = 2 * t531;
    real_type t687 = t46 * t46;
    real_type t688 = -2 * t46 * t476 + t687;
    real_type t689 = t47 * t688;
    real_type t690 = 2 * t514;
    real_type t691 = 2 * t535;
    real_type t693 = -t538 * t12;
    real_type t694 = 2 * t515;
    real_type t695 = 2 * t516;
    real_type t696 = t17 * t22 * t669 - t528 - t541 + t543 - t636 + t662 + t675 + t680 + t682 + t683 + t684 + t689 - t690 - t691 + t693 - t694 + t695;
    real_type t697 = t607 * t696;
    real_type t699 = t489 * t678;
    real_type t701 = t17 * t22 * t661;
    real_type t702 = t506 * t669;
    real_type t704 = t35 * t38 * t674;
    real_type t706 = 2 * t570;
    real_type t708 = (t681 * t69 + t706) * t44;
    real_type t709 = -t552;
    real_type t711 = 2 * t47 * t709;
    real_type t713 = 2 * t583;
    real_type t716 = t46 * t551 + t46 * t82;
    real_type t718 = 2 * t47 * t716;
    real_type t719 = 2 * t587;
    real_type t720 = 2 * t588;
    real_type t721 = t49 * t711 + t699 + t701 + t702 + t704 - t706 + t708 + t713 + t718 - t719 - t720;
    real_type t722 = t607 * t721;
    real_type t725 = t20 * t18;
    real_type t726 = t725 * t79 * t17;
    real_type t727 = 2 * t726;
    real_type t728 = 2 * t25;
    real_type t730 = 2 * t28;
    real_type t731 = t18 * t728 - t730;
    real_type t732 = t79 * t731;
    real_type t733 = t22 * t732;
    real_type t734 = 2 * t37;
    real_type t737 = -t18 * t728 + t730;
    real_type t738 = t38 * t737;
    real_type t739 = 2 * t45;
    real_type t740 = 2 * t33;
    real_type t741 = 2 * t48;
    real_type t742 = 2 * t50;
    real_type t743 = 2 * t52;
    real_type t746 = -t727 + t733 + t79 * (t734 + t738 + t739 - t740 + t741 - t742 - t743);
    real_type t748 = 2 * t483;
    real_type t749 = t89 * t748;
    real_type t751 = t79 * t737;
    real_type t752 = t22 * t751;
    real_type t753 = t731 * t38;
    real_type t756 = t607 * t746 + t622 * t749 + t727 + t752 + t79 * (-t734 + t753 - t739 + t740 - t741 + t742 + t743);
    real_type t757 = t8 * t756;
    real_type t761 = t17 * t751;
    real_type t764 = t22 * t20 * t79 * t18;
    real_type t765 = 2 * t764;
    real_type t766 = t35 * t731;
    real_type t767 = 2 * t68;
    real_type t768 = 2 * t70;
    real_type t769 = 2 * t72;
    real_type t770 = t766 + t767 + t768 - t769;
    real_type t772 = t770 * t79 + t761 - t765;
    real_type t774 = t82 * t551;
    real_type t775 = t82 * t82;
    real_type t776 = -t774 - t775;
    real_type t785 = 2 * t47 * t776 - 2 * t556 - 2 * t558 + 2 * t559 - 2 * t560 + 2 * t561 - 2 * t562;
    real_type t786 = t89 * t785;
    real_type t788 = t17 * t732;
    real_type t789 = t35 * t737;
    real_type t790 = t789 - t768 - t767 + t769;
    real_type t792 = t607 * t772 + t622 * t786 + t79 * t790 + t765 + t788;
    real_type t793 = t8 * t792;
    real_type t795 = 2 * t650;
    real_type t796 = -t494 + t795 - t652 + t654;
    real_type t798 = t18 * t796 - t495 + t496 - t497;
    real_type t799 = t489 * t798;
    real_type t801 = -2 * t665;
    real_type t803 = 2 * t502;
    real_type t804 = t18 * t801 - t803;
    real_type t809 = -t18 * t796 + t495 - t496 + t497;
    real_type t810 = t506 * t809;
    real_type t813 = -t18 * t801 + t803;
    real_type t815 = t35 * t38 * t813;
    real_type t816 = t17 * t22 * t804 + t514 + t515 - t516 + t518 + t541 - t635 + t636 - t637 - t638 + t799 + t810 + t815;
    real_type t818 = 2 * t106;
    real_type t819 = t89 * t818;
    real_type t823 = -t47 * t688;
    real_type t824 = t536 + t537;
    real_type t825 = t824 * t12;
    real_type t826 = t55 * t611 * t819 + t607 * t816 + t528 + t635 - t636 + t638 - t683 - t684 + t691 + t823 + t825;
    real_type t827 = t8 * t826;
    real_type t832 = t47 * t775;
    real_type t836 = ModelPars[151];
    real_type t837 = t47 * t774 + t832 + t85 * (t551 + t85) * t84 + t836 + t559;
    real_type t840 = t55 * t837 - t631 * t88;
    real_type t841 = t60 * t840;
    real_type t843 = -t483;
    real_type t844 = t843 * t55;
    real_type t846 = t89 * t843;
    real_type t847 = t81 * t846;
    real_type t854 = t75 * t611;
    real_type t856 = t494 - t795 + t652 + t654;
    real_type t858 = ModelPars[17];
    real_type t859 = ModelPars[15];
    real_type t860 = t18 * t856 + t495 + t858 + t859;
    real_type t861 = t860 * t81;
    real_type t862 = t861 * t11;
    real_type t865 = t55 * t82;
    real_type t867 = -t865 * t89 + t611;
    real_type t868 = t867 / 2;
    real_type t869 = t8 * t868;
    real_type t874 = t81 * t553;
    real_type t878 = t8 * t89;
    real_type t879 = t10 * t878;
    real_type t880 = t560 * t55;
    real_type t881 = t75 * t880;
    real_type t883 = t81 * t560;
    real_type t885 = -t11 * t883 + t879 * t881;
    real_type t886 = LL__[9];
    real_type t888 = t8 * t81;
    real_type t889 = t858 * t10;
    real_type t890 = LL__[10];
    result__[ 20  ] = t13 * t112 + t315 * t327 + t321 * (-t487 * t11 + t60 * (-t11 * t566 - 2 * t546 * t547) - 2 * t592 * t11 + t590 * t11) + t94 * (-2 * t600 * t599 + t60 * (-t11 * t615 + 2 * t547 * t604) - t628 * t11 - t10 * t645) + t113 * (-t600 * t697 + t60 * (-t10 * t757 - t547 * t722) - t130 * t793 - t10 * t827) + t117 * (-t11 * t841 + t11 * t847 + t547 * t844) + t127 * (-t11 * t123 * t854 + t11 * t394 * t79 - t862) + t131 * (2 * t10 * t47 * t75 * t869 + t11 * t874) + t886 * t885 - t890 * t889 * t888;
    real_type t896 = t75 * t135;
    real_type t907 = t591 * t135;
    real_type t937 = t861 * t135;
    real_type t947 = t134 * t878;
    real_type t950 = t135 * t883 - t881 * t947;
    real_type t952 = t858 * t134;
    result__[ 21  ] = t13 * t146 + t315 * t353 + t321 * (t487 * t135 + t60 * (t135 * t566 + 2 * t546 * t896) + 2 * t592 * t135 - t590 * t135) + t94 * (2 * t907 * t599 + t60 * (t135 * t615 - 2 * t604 * t896) + t628 * t135 + t134 * t645) + t113 * (t907 * t697 + t60 * (t134 * t757 + t722 * t896) + t154 * t793 + t134 * t827) + t117 * (t135 * t841 - t135 * t847 - t844 * t896) + t127 * (t123 * t135 * t854 - t135 * t394 * t79 + t937) + t131 * (-2 * t134 * t47 * t75 * t869 - t135 * t874) + t886 * t950 + t890 * t952 * t888;
    result__[ 22  ] = t2;
    real_type t956 = t591 * t603;
    real_type t961 = t563 * t55;
    real_type t964 = t611 * t73 - t89 * t961;
    real_type t966 = -t162 * t964 + 2 * t183 * t598;
    real_type t968 = t483 * t55;
    real_type t971 = t163 * t79 - t89 * t968;
    real_type t972 = t75 * t971;
    real_type t978 = t591 * t162;
    real_type t981 = t81 * t81;
    real_type t1005 = t79 * t981;
    real_type t1008 = t79 * t607;
    real_type t1026 = t591 * t161;
    real_type t1030 = t55 * t721;
    real_type t1031 = t8 * t1030;
    real_type t1068 = t843 * t81;
    real_type t1069 = t183 * t1068;
    real_type t1070 = t55 * t846;
    real_type t1074 = t79 * t162;
    real_type t1075 = t60 * t376;
    real_type t1077 = t123 * t162;
    real_type t1078 = t75 * t472;
    real_type t1079 = t1078 * t1077;
    real_type t1080 = t860 * t55;
    real_type t1081 = t1080 * t162;
    real_type t1084 = t81 * t82;
    real_type t1085 = t89 * t1084;
    real_type t1086 = t1085 + t472;
    real_type t1089 = t47 * t161;
    real_type t1090 = t75 * t1089;
    real_type t1093 = t55 * t553;
    real_type t1094 = t1093 * t162;
    real_type t1098 = t81 * t560 * t89;
    real_type t1101 = -t1098 * t183 - t162 * t880;
    real_type t1103 = t8 * t55;
    real_type t1104 = t858 * t161;
    result__[ 23  ] = t13 * t181 + t321 * (-t162 * t603 + 2 * t162 * t956 - t162 * t972 + t60 * t966) + t94 * (-2 * t978 * t545 * t607 + 2 * t978 * t545 * t981 + t60 * (2 * t183 * t607 * t589 - 2 * t183 * t981 * t589 - (-2 * t53 * t607 * t79 + 2 * t53 * t79 * t981 - 4 * t329 * t968) * t162) - t75 * (-2 * t1005 * t73 + 2 * t1008 * t73 + 4 * t329 * t961) * t162 - t161 * t8 * (4 * t167 * t631 * t81 - t607 * t639 + t639 * t981)) + t113 * (2 * t81 * t1026 * t8 * t55 * t696 + t60 * (2 * t81 * t398 * t1031 - t161 * t8 * (-2 * t55 * t746 * t81 + t607 * t749 - t749 * t981)) - t398 * t8 * (-2 * t55 * t772 * t81 + t607 * t786 - t786 * t981) - t161 * t8 * (-2 * t55 * t81 * t816 - t1005 * t819 + t1008 * t819)) + t117 * (-t60 * (-t167 * t631 - t81 * t837) * t162 - t1069 + t1070 * t162) + t127 * (t1074 * t1075 - t1079 - t1081) + t131 * (t1086 * t1090 * t8 + t1094) + t886 * t1101 - t890 * t1104 * t1103;
    real_type t1114 = 2 * t183 * t546;
    real_type t1118 = t55 * t162;
    real_type t1120 = t75 * t60 * t589;
    real_type t1141 = t75 * t204;
    real_type t1154 = t174 * t844;
    real_type t1158 = t60 * t611;
    real_type t1159 = t1158 * t1077;
    real_type t1163 = t60 * t47;
    real_type t1167 = t161 * t878;
    result__[ 24  ] = t13 * t192 + t315 * t387 + t321 * (-t60 * t486 * t162 - 2 * t978 * t546 - t75 * (-t162 * t566 - t1114) + 4 * t1120 * t1118) + t94 * (4 * t75 * t60 * t162 * t599 + 2 * t978 * t604 - t75 * (-t162 * t615 + 2 * t183 * t604) - t60 * t627 * t162) + t113 * (2 * t1141 * t8 * t697 - t978 * t722 - t75 * (-t161 * t757 - t183 * t722) - t204 * t793) + t117 * (t162 * t75 * t840 + t1154) + t127 * (-t1074 * t340 - t1159) + 2 * t131 * t1163 * t161 * t869 + t886 * t60 * t880 * t1167;
    real_type t1171 = t13 * t162;
    real_type t1179 = t79 * t12;
    real_type t1187 = 2 * t21;
    real_type t1196 = 2 * t65;
    result__[ 25  ] = -t1171 * t104 + t383 + t94 * (2 * t164 * t1118 - 2 * t102 * t1118 - t161 * t8 * (2 * t1179 * t622 - 2 * t630 * t89 + t642)) + t113 * (-t204 * t8 * (t607 * (t22 * t731 - t1187 + t734 + t738 + t739 - t740 + t741 - t742 - t743) + t1187 + t22 * t737 - t734 + t753 - t739 + t740 - t741 + t742 + t743) - t398 * t8 * (t607 * (t17 * t737 - t1196 + t766 + t767 + t768 - t769) + t17 * t731 + t1196 + t789 - t768 - t767 + t769) - t161 * t8 * (-2 * t1179 * t607 + t622 * t819 + 2 * t1179)) + t391 - t127 * t396 + t400;
    real_type t1215 = t75 * t484;
    real_type t1216 = t1215 * t162;
    real_type t1231 = t87 * t79;
    real_type t1252 = t8 * t865;
    real_type t1255 = t75 * t560;
    real_type t1256 = t886 * t1255;
    result__[ 26  ] = -t1171 * t213 + t321 * (t162 * t564 * t60 + t1216) + t94 * (-t60 * (2 * t608 - t478 + t475 + t481 + t482) * t162 - t75 * (-2 * t619 + t554 + t556 + t558 - t559 + t560 - t561 + t562) * t162 - t161 * t8 * (-2 * t630 * t79 + t1231)) + t113 * (-t1118 * t79 * t81 * t818 - t174 * t55 * t748 * t81 - t183 * t55 * t785 * t81) + t117 * (t1068 * t162 + t1158 * t194) - t287 * t1089 * t1252 + t1256 * t1118;
    real_type t1262 = t22 * t22;
    real_type t1263 = t503 * t1262;
    real_type t1264 = t503 * t489;
    real_type t1266 = -2 * t17 * t22 * t498 - 2 * t1263 + 2 * t1264;
    real_type t1277 = t507 * t1262;
    real_type t1278 = t507 * t489;
    real_type t1279 = -2 * t17 * t22 * t571 - t1277 + t1278;
    real_type t1280 = t1279 * t55;
    real_type t1287 = t1266 * t81;
    real_type t1291 = t81 * t1279;
    real_type t1312 = t17 * t22 * t678;
    real_type t1315 = -t1262 * t661 - 2 * t1312 + t662;
    real_type t1331 = t17 * t22 * t798;
    result__[ 27  ] = t13 * t233 + t315 * t411 + t321 * (t1079 + t60 * (t120 * t162 * t472 - 2 * t1266 * t183 * t55) - 2 * t591 * t1280 * t162 + t1280 * t162) + t94 * (-2 * t978 * t55 * t1287 + t60 * (2 * t1118 * t335 * t79 + 2 * t1291 * t183 * t55) - 2 * t198 * t611 * t1118 + t1118 * t1287) + t113 * (-t978 * t607 * (-t1262 * t669 + t489 * t669 - 2 * t701) + t60 * (-t183 * t607 * t1315 - t161 * t8 * (t607 * (t765 + t788) - t765 + t761)) - t398 * t8 * (t607 * (-t752 - t727) - t733 + t727) - t162 * t607 * (-t1262 * t804 + t489 * t804 - 2 * t1331)) + t127 * (-t120 * t162 * t854 + t1159);
    real_type t1349 = t89 * t82;
    real_type t1351 = t1349 * t244 + t47 * t472;
    real_type t1353 = t75 * t1351 * t162;
    real_type t1354 = t47 * t476;
    real_type t1355 = t50 - t1354;
    real_type t1356 = t55 * t1355;
    real_type t1360 = t591 * t553;
    real_type t1365 = t1355 * t81;
    real_type t1385 = -2 * t1355;
    real_type t1390 = t79 * t47;
    real_type t1400 = -t1385;
    real_type t1401 = t8 * t1400;
    real_type t1406 = t47 * t162;
    result__[ 28  ] = -t13 * t204 * t245 + t315 * t398 * t129 + t321 * (-2 * t1141 * t1356 * t8 + 2 * t1118 * t1360 - t1094 - t1353) + t94 * (-2 * t978 * t55 * t1365 + t60 * (-2 * t398 * t1103 * t874 - (-2 * t1349 * t47 * t607 + 2 * t240 * t611 + t83 * t89) * t162)) + t113 * (-t978 * t607 * t1385 + t60 * (-t183 * t607 * t711 - t161 * t8 * (-2 * t329 * t55 * t83 - 2 * t1390 * t607 + 2 * t1390)) - t161 * t1401) + t117 * (t1085 * t1406 + t1090 * t1252);
    real_type t1415 = t5 * t398;
    real_type t1422 = t55 * t250;
    real_type t1424 = t5 * t591 * t589;
    real_type t1435 = t433 * t250;
    real_type t1449 = t5 * t1026;
    real_type t1467 = t843 * t250;
    real_type t1473 = t5 * t60;
    real_type t1480 = t5 * t861 * t250;
    real_type t1485 = t75 * t47;
    real_type t1486 = t5 * t1485;
    real_type t1489 = t552 * t250;
    real_type t1495 = t161 * t249 * t89;
    real_type t1498 = t5 * t250;
    real_type t1500 = -t1495 * t433 * t880 + t1498 * t883;
    real_type t1502 = t890 * t858;
    real_type t1503 = t5 * t1502;
    result__[ 29  ] = t13 * t273 + t315 * t431 + t321 * (t5 * t487 * t250 + t60 * (2 * t1415 * t249 * t546 + t250 * t5 * t566) + 2 * t1424 * t1422 - t5 * t590 * t250) + t94 * (2 * t5 * t591 * t250 * t599 + t60 * (t250 * t5 * t615 - 2 * t1435 * t604) + t5 * t628 * t250 + t271 * t249 * t644) + t113 * (t1449 * t249 * t697 + t60 * (t1415 * t249 * t722 + t249 * t271 * t756) + t1415 * t249 * t792 + t271 * t249 * t826) + t117 * (-t1415 * t249 * t844 - t1467 * t329 * t5 + t250 * t5 * t841) + t127 * (t123 * t250 * t433 * t611 - t1473 * t250 * t339 * t79 + t1480) + t131 * (-2 * t1486 * t161 * t249 * t868 - t1489 * t244 * t5) + t886 * t1500 + t1503 * t266;
    real_type t1508 = t75 * t293;
    real_type t1519 = t591 * t293;
    real_type t1549 = t861 * t293;
    real_type t1559 = t292 * t878;
    real_type t1562 = t1559 * t881 - t293 * t883;
    real_type t1564 = t858 * t292;
    result__[ 30  ] = t13 * t304 + t315 * t457 + t321 * (-t487 * t293 + t60 * (-2 * t1508 * t546 - t293 * t566) - 2 * t592 * t293 + t590 * t293) + t94 * (-2 * t1519 * t599 + t60 * (2 * t1508 * t604 - t293 * t615) - t628 * t293 - t292 * t645) + t113 * (-t1519 * t697 + t60 * (-t1508 * t722 - t292 * t757) - t312 * t793 - t292 * t827) + t117 * (t1508 * t844 - t293 * t841 + t293 * t847) + t127 * (-t123 * t293 * t854 + t293 * t394 * t79 - t1549) + t131 * (2 * t292 * t47 * t75 * t869 + t293 * t874) + t886 * t1562 - t890 * t1564 * t888;
    real_type t1567 = LL__[19];
    result__[ 31  ] = -t1567 * t11;
    result__[ 32  ] = t1567 * t135;
    result__[ 33  ] = result__[22];
    result__[ 34  ] = t5 * t1567 * t250;
    result__[ 35  ] = -t1567 * t293;
    real_type t1571 = LL__[20];
    result__[ 36  ] = -t1571 * t11;
    result__[ 37  ] = t1571 * t135;
    result__[ 38  ] = result__[33];
    result__[ 39  ] = t5 * t1571 * t250;
    result__[ 40  ] = -t1571 * t293;
    real_type t1575 = LL__[21];
    result__[ 41  ] = -t1575 * t11;
    result__[ 42  ] = t1575 * t135;
    result__[ 43  ] = result__[38];
    result__[ 44  ] = t5 * t1575 * t250;
    result__[ 45  ] = -t1575 * t293;
    real_type t1579 = LL__[22];
    result__[ 46  ] = -t1579 * t11;
    result__[ 47  ] = t1579 * t135;
    result__[ 48  ] = result__[43];
    result__[ 49  ] = t5 * t1579 * t250;
    result__[ 50  ] = -t1579 * t293;
    real_type t1583 = LL__[23];
    result__[ 51  ] = -t1583 * t11;
    result__[ 52  ] = t1583 * t135;
    result__[ 53  ] = result__[48];
    result__[ 54  ] = t5 * t1583 * t250;
    result__[ 55  ] = -t1583 * t293;
    real_type t1587 = LL__[24];
    result__[ 56  ] = -t1587 * t11;
    result__[ 57  ] = t1587 * t135;
    result__[ 58  ] = result__[53];
    result__[ 59  ] = t5 * t1587 * t250;
    result__[ 60  ] = -t1587 * t293;
    real_type t1591 = LL__[25];
    result__[ 61  ] = -t1591 * t11;
    result__[ 62  ] = t1591 * t135;
    result__[ 63  ] = result__[58];
    result__[ 64  ] = t5 * t1591 * t250;
    result__[ 65  ] = -t1591 * t293;
    real_type t1595 = LL__[26];
    result__[ 66  ] = -t1595 * t11;
    result__[ 67  ] = t1595 * t135;
    result__[ 68  ] = result__[63];
    result__[ 69  ] = t5 * t1595 * t250;
    result__[ 70  ] = -t1595 * t293;
    real_type t1599 = LL__[27];
    result__[ 71  ] = -t1599 * t11;
    result__[ 72  ] = t1599 * t135;
    result__[ 73  ] = result__[68];
    result__[ 74  ] = t5 * t1599 * t250;
    result__[ 75  ] = -t1599 * t293;
    real_type t1603 = LL__[28];
    result__[ 76  ] = -t1603 * t11;
    result__[ 77  ] = t1603 * t135;
    result__[ 78  ] = result__[73];
    result__[ 79  ] = t5 * t1603 * t250;
    result__[ 80  ] = -t1603 * t293;
    real_type t1607 = LL__[29];
    result__[ 81  ] = -t1607 * t11;
    result__[ 82  ] = t1607 * t135;
    result__[ 83  ] = result__[78];
    result__[ 84  ] = t5 * t1607 * t250;
    result__[ 85  ] = -t1607 * t293;
    real_type t1611 = LL__[30];
    result__[ 86  ] = -t1611 * t11;
    result__[ 87  ] = t1611 * t135;
    result__[ 88  ] = result__[83];
    result__[ 89  ] = t5 * t1611 * t250;
    result__[ 90  ] = -t1611 * t293;
    real_type t1615 = LL__[31];
    result__[ 91  ] = -t1615 * t11;
    result__[ 92  ] = t1615 * t135;
    result__[ 93  ] = result__[88];
    result__[ 94  ] = t5 * t1615 * t250;
    result__[ 95  ] = -t1615 * t293;
    real_type t1619 = LL__[32];
    result__[ 96  ] = -t1619 * t11;
    result__[ 97  ] = t1619 * t135;
    result__[ 98  ] = result__[93];
    result__[ 99  ] = t5 * t1619 * t250;
    result__[ 100 ] = -t1619 * t293;
    real_type t1627 = t127 * t858;
    real_type t1629 = t1502 * t11;
    result__[ 101 ] = -t1103 * t889 * t94 - t113 * t888 * t889 - t11 * t1627 - t1629;
    real_type t1635 = t1502 * t135;
    result__[ 102 ] = t1103 * t94 * t952 + t113 * t888 * t952 + t135 * t1627 + t1635;
    result__[ 103 ] = -t1103 * t1104 * t113 + t1104 * t888 * t94;
    result__[ 104 ] = result__[98];
    real_type t1648 = t1503 * t250;
    result__[ 105 ] = t113 * t266 * t5 * t858 + t1422 * t5 * t858 * t94 + t1627 * t250 * t5 + t1648;
    real_type t1654 = t1502 * t293;
    result__[ 106 ] = -t1103 * t1564 * t94 - t113 * t1564 * t888 - t1627 * t293 - t1654;
    real_type t1655 = t60 * t560;
    real_type t1656 = t321 * t1655;
    real_type t1663 = t8 * t560;
    real_type t1665 = t886 * t10 * t1663;
    result__[ 107 ] = t1656 * t879 + t94 * (-t1098 * t547 - t11 * t880) + t113 * t885 - t1665;
    real_type t1673 = t886 * t134 * t1663;
    result__[ 108 ] = -t1656 * t947 + t94 * (t1098 * t896 + t135 * t880) + t113 * t950 + t1673;
    result__[ 109 ] = t94 * (-t1167 * t881 + t162 * t883) + t113 * t1101;
    result__[ 110 ] = -t1098 * t162 * t60 * t94 + t113 * t1167 * t60 * t880 - t1167 * t1255 * t321;
    real_type t1689 = t94 * t398;
    result__[ 111 ] = t1118 * t113 * t1255 - t1689 * t8 * t883 + t162 * t1656;
    result__[ 112 ] = result__[104];
    real_type t1693 = t5 * t321;
    real_type t1705 = t5 * t886 * t161 * t249 * t560;
    result__[ 113 ] = -t1693 * t1655 * t1495 + t94 * (t250 * t5 * t880 + t1098 * t1435) + t113 * t1500 + t1705;
    real_type t1713 = t886 * t292 * t1663;
    result__[ 114 ] = t1656 * t1559 + t94 * (-t1098 * t1508 - t293 * t880) + t113 * t1562 - t1713;
    real_type t1714 = t29 * t35;
    real_type t1715 = t226 - t65 + t1714 + t68 + t70 - t72;
    real_type t1716 = t1715 * t55;
    real_type t1717 = t75 * t1716;
    real_type t1719 = -t178;
    real_type t1720 = t8 * t1719;
    real_type t1725 = t1715 * t81;
    real_type t1726 = t75 * t1725;
    real_type t1730 = LL__[2];
    real_type t1735 = -4 * t503;
    real_type t1739 = -t1735 * t506;
    real_type t1740 = 2 * t578;
    real_type t1741 = -t681;
    real_type t1744 = (t1741 * t69 - t706) * t44;
    real_type t1746 = 2 * t586;
    real_type t1747 = t1735 * t489 + t1739 + t1740 + t1744 - t1746 - 2 * t574 + 2 * t585 + t706 - t713 + t719 + t720;
    real_type t1748 = t75 * t1747;
    real_type t1750 = t79 * t53;
    real_type t1755 = 2 * t498;
    real_type t1759 = -t506 * t1755;
    real_type t1760 = 4 * t510;
    real_type t1761 = t1741 * t512;
    real_type t1762 = t538 * t12;
    real_type t1763 = t1755 * t489 + t1759 - t1760 + t1761 + t1762 + 4 * t504 + t528 + t541 - t543 + t636 - t683 - t684 + t690 + t691 + t694 - t695 + t823;
    real_type t1764 = t8 * t1763;
    real_type t1767 = t498 * t506;
    real_type t1768 = t579 * t512;
    real_type t1769 = t1278 - t505 + t1767 + t511 + t635 + t1768 - t636 + t637 - t514 - t515 + t516 + t543;
    real_type t1770 = t8 * t1769;
    real_type t1787 = t506 * t661;
    real_type t1789 = t35 * t38 * t669;
    real_type t1790 = t489 * t674 + t1312 + t1761 + t1762 + t1787 + t1789 + t528 + t541 - t543 + t636 - t683 - t684 + t690 + t691 + t694 - t695 + t823;
    real_type t1791 = t55 * t1790;
    real_type t1793 = t79 * t41;
    real_type t1794 = t17 * t1793;
    real_type t1795 = t1714 + t70 + t68 - t72;
    real_type t1797 = t1795 * t79 + t1794 - t764;
    real_type t1798 = t55 * t1797;
    real_type t1800 = t47 * t776 - t556 - t558 + t559 - t560 + t561 - t562;
    real_type t1801 = t89 * t1800;
    real_type t1803 = t1801 * t81 + t1798;
    real_type t1804 = t8 * t1803;
    real_type t1808 = t22 * t1793;
    real_type t1811 = t726 + t1808 + t79 * (-t37 + t97 - t45 + t33 - t48 + t50 + t52);
    real_type t1813 = t1811 * t55 + t847;
    real_type t1814 = t8 * t1813;
    real_type t1817 = t506 * t804;
    real_type t1819 = t35 * t38 * t809;
    real_type t1822 = (t517 * t69 - t570) * t44;
    real_type t1824 = -t47 * t716;
    real_type t1825 = t489 * t813 + t1331 + t1817 + t1819 + t1822 + t1824 + t570 - t583 + t585 + t587 + t588;
    real_type t1826 = t55 * t1825;
    real_type t1830 = t60 * t483;
    real_type t1831 = t1830 * t11;
    real_type t1832 = -t837;
    real_type t1833 = t75 * t1832;
    real_type t1835 = t1231 * t11;
    real_type t1838 = t8 * t83;
    real_type t1839 = t89 * t10;
    real_type t1840 = t131 * t60;
    real_type t1843 = t886 * t1655;
    real_type t1845 = XL__[15];
    real_type t1846 = t1845 * t10;
    real_type t1847 = LL__[11];
    real_type t1850 = XL__[16];
    real_type t1851 = sin(t1850);
    real_type t1852 = t1851 * t55;
    real_type t1853 = cos(t1850);
    real_type t1855 = -t1853 * t81 + t1852;
    real_type t1857 = t75 * t89 * t1855;
    real_type t1858 = t1857 * t11;
    real_type t1861 = t1851 * t81 + t1853 * t55;
    real_type t1862 = t1861 * t11;
    real_type t1864 = LL__[12];
    real_type t1867 = ModelPars[118];
    real_type t1868 = -ModelPars[116] + t1867;
    real_type t1869 = t1868 * t1853;
    real_type t1870 = XL__[11];
    real_type t1871 = t1869 - t1870 - t1867;
    real_type t1873 = -t1868;
    real_type t1874 = t1851 * t1873;
    real_type t1875 = XL__[10];
    real_type t1876 = t1874 - t1875;
    real_type t1879 = LL__[14];
    real_type t1880 = t1879 * (t1871 * t55 - t1876 * t81);
    real_type t1882 = t1853 * t1873;
    real_type t1883 = t1882 + t1867 + t1870;
    real_type t1886 = t1851 * t1868 + t1875;
    real_type t1889 = LL__[15];
    real_type t1890 = t1889 * (t1883 * t81 + t1886 * t55);
    real_type t1892 = ModelPars[119];
    real_type t1894 = -t1892 - XL__[14];
    real_type t1896 = XL__[13];
    real_type t1897 = t81 * t1896;
    real_type t1899 = LL__[17];
    real_type t1900 = t1899 * (t1894 * t55 + t1897);
    real_type t1902 = -t1894;
    real_type t1904 = t55 * t1896;
    real_type t1906 = LL__[18];
    real_type t1907 = t1906 * (t1902 * t81 + t1904);
    result__[ 115 ] = t315 * (-t10 * t1720 - t11 * t1717 - t62) + t1730 * (-t11 * t164 - t11 * t169 - t11 * t1726) + t321 * (-2 * t547 * t623 + t60 * (-t11 * t1748 + 2 * t11 * t1750) - t591 * t10 * t1764 - t10 * t1770) + t94 * (2 * t956 * t11 + t60 * (-t11 * t964 + 2 * t547 * t598) - t972 * t11 - t603 * t11) + t113 * (-t600 * t1030 + t60 * (-t10 * t1804 - t1791 * t547) - t130 * t1814 - t11 * t1826) + t117 * (-t11 * t1833 - t1831 + t1835) - t1840 * t1839 * t1838 + t1843 * t879 + t1847 * t1846 * t888 + t1864 * (t1858 - t1862) - t1880 * t11 - t1890 * t11 - t1900 * t11 - t1907 * t11;
    real_type t1950 = t1830 * t135;
    real_type t1952 = t1231 * t135;
    real_type t1955 = t89 * t134;
    real_type t1959 = t1845 * t134;
    real_type t1962 = t1857 * t135;
    real_type t1963 = t1861 * t135;
    result__[ 116 ] = t315 * (t134 * t1720 + t135 * t1717 + t138) + t1730 * (t135 * t164 + t135 * t169 + t135 * t1726) + t321 * (2 * t896 * t623 + t60 * (t135 * t1748 - 2 * t135 * t1750) + t591 * t134 * t1764 + t134 * t1770) + t94 * (-2 * t956 * t135 + t60 * (t135 * t964 - 2 * t598 * t896) + t972 * t135 + t603 * t135) + t113 * (t907 * t1030 + t60 * (t134 * t1804 + t1791 * t896) + t154 * t1814 + t135 * t1826) + t117 * (t135 * t1833 + t1950 - t1952) + t1840 * t1955 * t1838 - t1843 * t947 - t1847 * t1959 * t888 + t1864 * (-t1962 + t1963) + t1880 * t135 + t1890 * t135 + t1900 * t135 + t1907 * t135;
    real_type t1970 = t1726 * t162;
    real_type t1974 = t174 * t56;
    real_type t1975 = t1717 * t162;
    real_type t1985 = -t486;
    real_type t1987 = t75 * t1985 * t162;
    real_type t1995 = t81 * t1797;
    real_type t2010 = t1845 * t161;
    real_type t2013 = -t1861;
    real_type t2016 = t75 * t89 * t2013 * t162;
    real_type t2017 = t1855 * t162;
    result__[ 117 ] = t315 * (-t110 * t161 + t165 + t1970) + t1730 * (-t162 * t318 - t1974 - t1975) + t94 * (2 * t592 * t162 + t60 * (t162 * t566 + t1114) - t1987 - t590 * t162) + t113 * (t978 * t81 * t721 + t60 * (t183 * t81 * t1790 - t161 * t8 * (t1801 * t55 - t1995)) - t398 * t8 * (-t1811 * t81 + t1070) + t162 * t81 * t1825) + t1847 * t2010 * t1103 + t1864 * (t2016 - t2017) - t1879 * (-t1871 * t81 - t1876 * t55) * t162 - t1889 * (t1883 * t55 - t1886 * t81) * t162 - t1899 * (-t1894 * t81 + t1904) * t162 - t1906 * (t1902 * t55 - t1897) * t162;
    real_type t2038 = t60 * t1716;
    real_type t2039 = t2038 * t162;
    real_type t2043 = t75 * t163 * t162;
    real_type t2044 = t60 * t1725;
    real_type t2047 = t1730 * (-t162 * t2044 + t2043);
    real_type t2061 = t81 * t162;
    real_type t2082 = t75 * t483 * t162;
    real_type t2091 = t1864 * t116;
    real_type t2092 = t2091 * t2017;
    result__[ 118 ] = t315 * (t184 - t2039) + t2047 + t321 * (-2 * t174 * t623 - t591 * t1747 * t162 - t75 * (-t162 * t1748 + 2 * t162 * t1750) + 2 * t1141 * t1764) + t94 * (-t162 * t60 * t971 - 4 * t1120 * t2061 + 2 * t598 * t978 - t75 * t966) + t113 * (2 * t1141 * t1031 - t978 * t1791 - t75 * (-t161 * t1804 - t1791 * t183) - t204 * t1814) + t117 * (-t162 * t1832 * t60 + t2082) + t287 * t89 * t161 * t1838 - t1256 * t1167 + t2092;
    real_type t2094 = t315 * t78 * t162;
    real_type t2096 = t1730 * t162 * t104;
    real_type t2102 = t94 * (-t191 - t2043);
    real_type t2104 = -t173 * t183 - t2039;
    real_type t2105 = t113 * t2104;
    result__[ 119 ] = t2094 + t2096 + t321 * (-2 * t1179 * t162 - 2 * t384 + 2 * t386) + t2102 + t2105 + t117 * t87 * t162;
    real_type t2112 = t1730 * t167 * t162;
    real_type t2115 = t75 * t968;
    real_type t2116 = t2115 * t162;
    real_type t2127 = t1864 * t75 * t1855 * t162;
    result__[ 120 ] = -t315 * t162 * t81 * t106 - t2112 + t94 * (t162 * t60 * t961 + t2116) + t113 * (-t174 * t1800 * t81 - t1069) - t205 * t1838 + t1843 * t162 + t2127;
    real_type t2128 = -t96 - t21;
    real_type t2129 = t2128 * t55;
    real_type t2134 = t336 * t162;
    real_type t2135 = t2128 * t81;
    real_type t2140 = t120 * t79;
    real_type t2149 = t79 * t123;
    real_type t2190 = -t1808 - t726;
    real_type t2195 = -t764 + t1794;
    result__[ 121 ] = t315 * (-t162 * t2129 * t75 - t220) + t1730 * (-t162 * t2135 * t75 - t2134) + t321 * (-2 * t183 * t2140 + t60 * (-t75 * (-2 * t17 * t1735 * t22 + 2 * t1277 - 2 * t1278) * t162 + 2 * t162 * t2149) - t1026 * t8 * (-2 * t17 * t1755 * t22 - 4 * t1263 + 4 * t1264) - t161 * t8 * (-2 * t574 + 2 * t1263 - 2 * t1264)) + t94 * (2 * t591 * t1291 * t162 + t60 * (-t120 * t162 * t611 + 2 * t1287 * t183) - t854 * t1077 - t1291 * t162) + t113 * (-t978 * t55 * t1315 + t60 * (-t183 * t55 * (-2 * t17 * t22 * t674 - t1262 * t678 + t699) - t162 * t55 * t2190) - t183 * t55 * t2195 - t162 * t55 * (-2 * t17 * t22 * t813 - t1262 * t798 + t799));
    real_type t2208 = t315 * t204 * t241;
    real_type t2210 = t1730 * t204 * t245;
    real_type t2227 = t370 * t83 - t47 * t611;
    real_type t2228 = t8 * t2227;
    real_type t2230 = t874 * t162;
    real_type t2240 = t60 * t82;
    result__[ 122 ] = t2208 + t2210 + t321 * (t60 * (-2 * t162 * t553 * t75 - 2 * t1390 * t162) - t1026 * t1401) + t94 * (2 * t1141 * t1365 * t8 - 2 * t1360 * t2061 - t2228 * t398 + t2230) + t113 * (-t1141 * t1400 * t55 * t8 - t55 * t711 * t978 - t1094 - t1353) + t117 * t2240 * t1406;
    real_type t2243 = t1879 * t161;
    real_type t2245 = t1889 * t161;
    result__[ 123 ] = -t1103 * t2245 - t2243 * t888;
    result__[ 124 ] = t1103 * t2243 - t2245 * t888;
    real_type t2249 = t1899 * t161;
    real_type t2251 = t1906 * t161;
    result__[ 125 ] = -t1103 * t2251 - t2249 * t888;
    result__[ 126 ] = t1103 * t2249 - t2251 * t888;
    real_type t2255 = t1847 * t161;
    result__[ 127 ] = t2255 * t888;
    real_type t2258 = t75 * t89 * t1861 * t162;
    real_type t2259 = -t1855;
    real_type t2260 = t2259 * t162;
    result__[ 128 ] = t1864 * (t2258 - t2260) - t1879 * (-t1852 * t1868 - t1882 * t81) * t162 - t1889 * (-t1851 * t1873 * t81 + t1869 * t55) * t162;
    result__[ 129 ] = result__[112];
    real_type t2274 = t75 * t1715;
    real_type t2275 = t5 * t2274;
    real_type t2281 = t5 * t385;
    real_type t2332 = t5 * t1830 * t250;
    real_type t2336 = t5 * t1231 * t250;
    real_type t2339 = t250 * t83;
    real_type t2348 = t1855 * t250;
    real_type t2349 = t5 * t195;
    real_type t2350 = t2349 * t2348;
    result__[ 130 ] = t315 * (t1719 * t249 * t271 + t1422 * t2275 + t255) + t1730 * (t169 * t250 * t5 + t2275 * t266 + t2281 * t266) + t321 * (2 * t1415 * t249 * t623 + t60 * (t1748 * t250 * t5 - 2 * t1498 * t1750) + t1449 * t249 * t1763 + t271 * t249 * t1769) + t94 * (-2 * t1424 * t266 + t60 * (-2 * t1415 * t249 * t598 + t250 * t5 * t964) + t5 * t972 * t250 + t5 * t603 * t250) + t113 * (t1449 * t249 * t1030 + t60 * (t1415 * t1791 * t249 + t1803 * t249 * t271) + t1415 * t249 * t1813 + t1498 * t1826) + t117 * (t1833 * t250 * t5 + t2332 - t2336) + t448 * t116 * t2339 - t5 * t886 * t1655 * t1495 - t5 * t1847 * t1845 * t266 + t1864 * (t1861 * t250 * t5 - t2350) + t5 * t1880 * t250 + t5 * t1890 * t250 + t5 * t1900 * t250 + t5 * t1907 * t250;
    real_type t2404 = t1830 * t293;
    real_type t2406 = t1231 * t293;
    real_type t2409 = t89 * t292;
    real_type t2413 = t1845 * t292;
    real_type t2416 = t1857 * t293;
    real_type t2417 = t1861 * t293;
    result__[ 131 ] = t315 * (-t1717 * t293 - t1720 * t292 - t296) + t1730 * (-t164 * t293 - t169 * t293 - t1726 * t293) + t321 * (-2 * t1508 * t623 + t60 * (-t1748 * t293 + 2 * t1750 * t293) - t591 * t292 * t1764 - t292 * t1770) + t94 * (2 * t956 * t293 + t60 * (2 * t1508 * t598 - t293 * t964) - t972 * t293 - t603 * t293) + t113 * (-t1519 * t1030 + t60 * (-t1508 * t1791 - t1804 * t292) - t312 * t1814 - t293 * t1826) + t117 * (-t1833 * t293 - t2404 + t2406) - t1840 * t2409 * t1838 + t1843 * t1559 + t1847 * t2413 * t888 + t1864 * (t2416 - t2417) - t1880 * t293 - t1890 * t293 - t1900 * t293 - t1907 * t293;
    real_type t2430 = -t11 * t2044 - t547 * t99;
    real_type t2433 = t547 * t56;
    real_type t2436 = t75 * t614;
    real_type t2438 = t60 * t626;
    real_type t2442 = t60 * t1985;
    real_type t2444 = t75 * t566;
    real_type t2447 = t824 * t12 / 2;
    real_type t2448 = t638 / 2;
    real_type t2449 = -t522 + t529 - t531 - t526 + t534 + t535 + t2447 + t2448;
    real_type t2450 = t55 * t2449;
    real_type t2455 = t79 * t29;
    real_type t2456 = t22 * t2455;
    real_type t2459 = -t726 + t2456 + t79 * (t37 + t42 + t45 - t33 + t48 - t50 - t52);
    real_type t2461 = t2459 * t81 + t1070;
    real_type t2462 = t8 * t2461;
    real_type t2465 = -t47 * t776;
    real_type t2466 = t2465 + t556 + t558 - t559 + t560 - t561 + t562;
    real_type t2467 = t89 * t2466;
    real_type t2469 = t2467 * t55 + t1995;
    real_type t2470 = t8 * t2469;
    real_type t2473 = -t824 * t12;
    real_type t2474 = t683 - t528 + t684 + t636 + t689 - t691 + t2473 - t638;
    real_type t2475 = t81 * t2474;
    real_type t2479 = t117 * t846;
    real_type t2483 = -t18 * t856 - t495 - t858 - t859;
    real_type t2484 = t127 * t2483;
    real_type t2486 = t131 * t553;
    real_type t2491 = t75 * t709;
    real_type t2493 = t476 - t49;
    real_type t2494 = t60 * t2493;
    real_type t2497 = LL__[13];
    real_type t2499 = t60 * t552;
    real_type t2501 = t75 * t2493;
    real_type t2505 = t22 * t23;
    real_type t2507 = t8 * t17;
    real_type t2508 = t23 * t10;
    real_type t2511 = -t2507 * t2508 * t75 + t2505 * t61;
    real_type t2512 = LL__[16];
    real_type t2517 = t2507 * t2508 * t60 + t2505 * t547;
    result__[ 132 ] = t13 * (-t11 * t2274 - t11 * t385) + t315 * t2430 + t1730 * (t11 * t2038 - t2433) + t321 * (-t11 * t2436 - t11 * t2438) + t94 * (-t11 * t2442 - t11 * t2444 + 2 * t11 * t2450) + t113 * (-t11 * t2475 - t130 * t2470 - t2462 * t344) - t2479 * t11 - t2484 * t11 - t2486 * t11 + t1665 + t1629 - t1847 * t130 * t878 + t2091 * t1862 + t2497 * (-t11 * t2491 - t11 * t2494) + t1889 * (-t11 * t2499 - t11 * t2501) + t2512 * t2511 + t1906 * t2517;
    real_type t2525 = t135 * t2044 + t896 * t99;
    real_type t2528 = t896 * t56;
    real_type t2561 = t23 * t134;
    real_type t2564 = t2507 * t2561 * t75 - t137 * t2505;
    real_type t2569 = -t2507 * t2561 * t60 - t2505 * t896;
    result__[ 133 ] = t13 * (t135 * t2274 + t135 * t385) + t315 * t2525 + t1730 * (-t135 * t2038 + t2528) + t321 * (t135 * t2436 + t135 * t2438) + t94 * (t135 * t2442 + t135 * t2444 - 2 * t135 * t2450) + t113 * (t135 * t2475 + t154 * t2470 + t2462 * t363) + t2479 * t135 + t2484 * t135 + t2486 * t135 - t1673 - t1635 + t1847 * t154 * t878 - t2091 * t1963 + t2497 * (t135 * t2491 + t135 * t2494) + t1889 * (t135 * t2499 + t135 * t2501) + t2512 * t2564 + t1906 * t2569;
    result__[ 134 ] = t315 * t2104 + t2047 + t94 * (-2 * t162 * t2449 * t81 + t162 * t60 * t971 - t162 * t75 * t964) + t113 * (-t204 * t8 * (t2459 * t55 - t847) - t398 * t8 * (-t2467 * t81 + t1798) - t162 * t55 * t2474) + t2092;
    real_type t2595 = t60 * t1715;
    real_type t2600 = -t174 * t99 + t1970;
    real_type t2633 = t23 * t161;
    real_type t2637 = -t2507 * t2633 * t60 - t183 * t2505;
    real_type t2638 = t2512 * t2637;
    real_type t2642 = -t2507 * t2633 * t75 + t174 * t2505;
    real_type t2643 = t1906 * t2642;
    result__[ 135 ] = t13 * (-t162 * t2595 + t162 * t325) + t315 * t2600 + t1730 * (-t1975 - t1974) + t321 * (-t162 * t60 * t614 + t162 * t626 * t75) + t94 * (-t162 * t566 * t60 + t1987) + t113 * (-t204 * t2470 + t2462 * t398) - t1847 * t204 * t878 - t1864 * t195 * t1861 * t162 + t2497 * (-t162 * t60 * t709 + t162 * t2501) + t1889 * (t162 * t552 * t75 - t162 * t2494) + t2638 + t2643;
    real_type t2644 = -t1974 + t176;
    result__[ 136 ] = t94 * t2644 + t113 * (-t165 - t1970);
    real_type t2653 = t60 * t484 * t162;
    real_type t2664 = t1847 * t75;
    real_type t2665 = t2664 * t162;
    result__[ 137 ] = t321 * (-t162 * t563 * t60 - t2082) + t94 * (t162 * t564 * t75 - t2653) + t113 * (-t183 * t2466 * t55 - t1154) - t117 * t843 * t162 - t2665 + t1864 * t60 * t1861 * t162;
    real_type t2676 = -t162 * t2135 * t60 - t183 * t228;
    real_type t2680 = t183 * t218;
    real_type t2690 = t17 * t2455 + t764;
    real_type t2691 = t81 * t2690;
    real_type t2692 = t174 * t2691;
    real_type t2698 = -t2512 * t2637;
    real_type t2700 = -t1906 * t2642;
    result__[ 138 ] = t13 * (-t162 * t2128 * t75 - t201) + t315 * t2676 + t1730 * (t162 * t2129 * t60 - t2680) + t94 * (t1118 * t2140 * t75 - t1118 * t2149 * t60) + t113 * (-t183 * t2190 * t81 - t2692) + t2698 + t2700;
    real_type t2702 = t13 * t1163 * t162;
    real_type t2704 = t315 * t1485 * t2061;
    real_type t2706 = t1730 * t398 * t241;
    real_type t2709 = t321 * t75 * t1349 * t1406;
    real_type t2710 = -t1351;
    real_type t2725 = t2497 * t60 * t162;
    real_type t2727 = t1889 * t75 * t162;
    result__[ 139 ] = t2702 - t2704 + t2706 + t2709 + t94 * (-t162 * t2710 * t60 + 2 * t1356 * t162) + t113 * (-t1385 * t162 * t81 - t204 * t2228) - t117 * t1349 * t1406 + t2725 + t2727;
    result__[ 140 ] = t2091 * t2260;
    result__[ 141 ] = result__[129];
    real_type t2732 = t5 * t2595;
    real_type t2735 = t1415 * t264 + t266 * t2732;
    real_type t2738 = t1415 * t253;
    real_type t2741 = t483 * t250;
    real_type t2773 = t1861 * t250;
    real_type t2789 = t249 * t2505;
    real_type t2792 = t161 * t249 * t17;
    real_type t2796 = t23 * t2792 * t5 * t75 - t254 * t2789;
    real_type t2802 = -t23 * t2792 * t5 * t60 - t1415 * t2789;
    result__[ 142 ] = t13 * (t2275 * t250 + t2281 * t250) + t315 * t2735 + t1730 * (-t1422 * t2732 + t2738) + t321 * (t116 * t250 * t5 * t563 + t2349 * t2741) + t94 * (t2442 * t250 * t5 + t2444 * t250 * t5 - 2 * t1498 * t2450) + t113 * (t1415 * t2469 * t249 + t2461 * t249 * t254 + t1498 * t2475) + t5 * t117 * t89 * t1467 + t5 * t2484 * t250 + t5 * t131 * t47 * t1489 - t1705 - t1648 + t5 * t2664 * t1495 - t5 * t1864 * t116 * t2773 + t2497 * (t2491 * t250 * t5 + t2494 * t250 * t5) + t1889 * (t2499 * t250 * t5 + t250 * t2501 * t5) + t2512 * t2796 + t1906 * t2802;
    real_type t2810 = -t1508 * t99 - t2044 * t293;
    real_type t2813 = t1508 * t56;
    real_type t2846 = t23 * t292;
    real_type t2849 = -t2507 * t2846 * t75 + t2505 * t295;
    real_type t2854 = t2507 * t2846 * t60 + t1508 * t2505;
    result__[ 143 ] = t13 * (-t2274 * t293 - t293 * t385) + t315 * t2810 + t1730 * (t2038 * t293 - t2813) + t321 * (-t2436 * t293 - t2438 * t293) + t94 * (-t2442 * t293 - t2444 * t293 + 2 * t2450 * t293) + t113 * (-t2462 * t467 - t2470 * t312 - t2475 * t293) - t2479 * t293 - t2484 * t293 - t2486 * t293 + t1713 + t1654 - t1847 * t312 * t878 + t2091 * t2417 + t2497 * (-t2491 * t293 - t2494 * t293) + t1889 * (-t2499 * t293 - t2501 * t293) + t2512 * t2849 + t1906 * t2854;
    real_type t2856 = t315 * t104;
    real_type t2858 = t1730 * t78;
    real_type t2860 = t321 * t642;
    real_type t2867 = t60 * t227;
    result__[ 144 ] = t2856 * t11 - t2858 * t11 - t2860 * t11 + t94 * (t11 * t185 + t2433) + t113 * t2430 + t196 * t115 + t127 * (-t11 * t198 - t11 * t2867) - t345 * t129 - t1889 * t11 - t1906 * t11;
    result__[ 145 ] = -t2856 * t135 + t2858 * t135 + t2860 * t135 + t94 * (-t135 * t185 - t2528) + t113 * t2525 - t196 * t148 + t127 * (t135 * t198 + t135 * t2867) + t364 * t129 + t1889 * t135 + t1906 * t135;
    result__[ 146 ] = t2094 + t2096 + t2102 + t2105;
    result__[ 147 ] = -t94 * t2644 + t113 * t2600 + t118 * t194 + t127 * (t162 * t227 * t75 - t409) + t399 * t129;
    real_type t2900 = t321 * t87 * t162;
    result__[ 148 ] = t117 * t162 * t75 * t87 - t2900;
    real_type t2906 = t162 * t221 * t60 + t2680;
    result__[ 149 ] = t94 * t2906 + t113 * t2676 + t127 * (-t162 * t2128 * t60 - t162 * t235 * t75);
    result__[ 150 ] = -t113 * t1485 * t2061 - t1689 * t241;
    result__[ 151 ] = result__[141];
    result__[ 152 ] = -t421 * t266 + t5 * t1730 * t12 * t1422 + t5 * t321 * t89 * t275 + t94 * (-t256 * t5 * t55 * t60 - t2738) + t113 * t2735 - t276 * t195 * t275 + t127 * (t198 * t250 * t5 + t250 * t2867 * t5) + t5 * t1840 * t286 + t5 * t1889 * t250 + t5 * t1906 * t250;
    result__[ 153 ] = t2856 * t293 - t2858 * t293 - t2860 * t293 + t94 * (t185 * t293 + t2813) + t113 * t2810 + t196 * t306 + t127 * (-t198 * t293 - t2867 * t293) - t468 * t129 - t1889 * t293 - t1906 * t293;
    real_type t2960 = t315 * t167;
    real_type t2962 = t87 * t8;
    real_type t2966 = -t554 - t556 - t558 - t559 - t836;
    real_type t2967 = t75 * t2966;
    real_type t2971 = -t2966;
    real_type t2972 = t2971 * t81;
    real_type t2973 = t60 * t2972;
    real_type t2978 = t2465 + t556 + t558 + t559 + t836;
    real_type t2979 = t55 * t2978;
    real_type t2984 = t832 + t556 + t559 + t836;
    real_type t2985 = t117 * t2984;
    real_type t2987 = t1847 * t60;
    real_type t2990 = t1864 * t75 * t2013;
    real_type t2992 = t8 * t82;
    real_type t2993 = t1879 * t10;
    result__[ 154 ] = -t2960 * t11 - t1730 * t81 * t10 * t2962 + t321 * (-t11 * t2967 - t1831 + t1835) + t94 * (t11 * t1215 + t11 * t2973) + t113 * (-t11 * t2115 - t2979 * t61) - t2985 * t11 + t2987 * t11 - t2990 * t11 - t2993 * t2992;
    real_type t3013 = t1879 * t134;
    result__[ 155 ] = t2960 * t135 + t1730 * t81 * t134 * t2962 + t321 * (t135 * t2967 + t1950 - t1952) + t94 * (-t1215 * t135 - t135 * t2973) + t113 * (t135 * t2115 + t137 * t2979) + t2985 * t135 - t2987 * t135 + t2990 * t135 + t3013 * t2992;
    result__[ 156 ] = t315 * t88 * t162 - t2112 + t94 * (t162 * t2971 * t55 * t60 + t2116) + t113 * (t174 * t2978 * t81 + t1216) - t1864 * t75 * t2259 * t162;
    result__[ 157 ] = t321 * (-t162 * t2966 * t60 + t2082) + t94 * (-t162 * t2972 * t75 + t2653) + t113 * (-t162 * t60 * t968 + t183 * t2979) - t2665 - t1864 * t60 * t2013 * t162;
    result__[ 158 ] = t2900;
    result__[ 159 ] = -t1084 * t1406 * t75 * t94 + t1089 * t113 * t1252 * t75 + t1406 * t2240 * t321;
    result__[ 160 ] = -t2127;
    result__[ 161 ] = result__[151];
    real_type t3084 = t5 * t2243;
    result__[ 162 ] = t5 * t315 * t55 * t275 + t5 * t1730 * t81 * t275 + t321 * (t250 * t2967 * t5 + t2332 - t2336) + t94 * (-t266 * t2971 * t5 * t60 - t2741 * t404 * t5) + t113 * (t249 * t254 * t2979 + t258 * t2741) + t5 * t2985 * t250 - t5 * t2987 * t250 + t5 * t1864 * t75 * t2013 * t250 + t3084 * t249 * t82;
    real_type t3104 = t1879 * t292;
    result__[ 163 ] = -t2960 * t293 - t1730 * t81 * t292 * t2962 + t321 * (-t293 * t2967 - t2404 + t2406) + t94 * (t1215 * t293 + t293 * t2973) + t113 * (-t2115 * t293 - t295 * t2979) - t2985 * t293 + t2987 * t293 - t2990 * t293 - t3104 * t2992;
    real_type t3106 = -t2128;
    real_type t3107 = t8 * t3106;
    real_type t3117 = t60 * t472;
    real_type t3120 = t227 * t79;
    real_type t3121 = t75 * t3120;
    real_type t3126 = -t2190;
    real_type t3127 = t81 * t3126;
    real_type t3132 = t127 * t860;
    result__[ 164 ] = t13 * (-t3107 * t344 - t125) + t315 * t342 + t1730 * (t11 * t219 + t11 * t377) + t94 * (-t11 * t3106 * t3117 + t11 * t3121 * t55 - t1080 * t11) + t113 * (-t2691 * t547 - t3127 * t61 - t862) - t3132 * t11 - t1629 - t2512 * t2511 - t1906 * t2517;
    result__[ 165 ] = t13 * (t3107 * t363 + t151) + t315 * t361 + t1730 * (-t135 * t219 - t135 * t377) + t94 * (t135 * t3106 * t3117 - t135 * t3121 * t55 + t1080 * t135) + t113 * (t137 * t3127 + t2691 * t896 + t937) + t3132 * t135 + t1635 - t2512 * t2564 - t1906 * t2569;
    real_type t3166 = t3106 * t162;
    result__[ 166 ] = t315 * t379 + t1730 * (-t162 * t340 - t2134) + t94 * (t1158 * t3166 + t162 * t861 - t2061 * t3121) + t113 * (-t174 * t3126 * t55 - t183 * t2690 * t55 - t1081);
    real_type t3187 = t60 * t3120 * t1118;
    result__[ 167 ] = t13 * (t3107 * t398 - t201) + t315 * t396 + t1730 * (t1075 * t162 - t2680) + t94 * (t1078 * t3166 + t3187) + t113 * (t183 * t3127 - t2692) + t2698 + t2700;
    result__[ 168 ] = t94 * (t162 * t227 * t55 * t75 - t162 * t3106 * t55 * t60) + t113 * (-t174 * t3106 * t81 - t393);
    result__[ 169 ] = t13 * (-t162 * t2867 - t199) + t315 * t415 + t1730 * t2906 + t94 * (t1118 * t2128 * t75 * t79 - t3187) + t113 * (-t174 * t81 * t2195 - t183 * t81 * (-t2456 + t726)) + t2638 + t2643;
    result__[ 170 ] = result__[161];
    result__[ 171 ] = t13 * (t249 * t254 * t3106 + t282) + t315 * t445 + t1730 * (-t250 * t258 * t338 - t1422 * t440) + t94 * (t1473 * t250 * t3106 * t472 + t1080 * t250 * t5 - t1422 * t3120 * t433) + t113 * (t1415 * t249 * t2691 + t249 * t254 * t3127 + t1480) + t5 * t3132 * t250 + t1648 - t2512 * t2796 - t1906 * t2802;
    result__[ 172 ] = t13 * (-t3107 * t467 - t309) + t315 * t465 + t1730 * (t219 * t293 + t293 * t377) + t94 * (-t293 * t3106 * t3117 + t293 * t3121 * t55 - t1080 * t293) + t113 * (-t1508 * t2691 - t295 * t3127 - t1549) - t3132 * t293 - t1654 - t2512 * t2849 - t1906 * t2854;
    real_type t3283 = t321 * t60;
    real_type t3287 = t75 * t47 * t1086;
    real_type t3293 = t47 * t709;
    real_type t3300 = t2497 * t75;
    real_type t3302 = t1889 * t60;
    result__[ 173 ] = t13 * t130 * t129 + t315 * t344 * t245 - t1730 * t344 * t241 - t3283 * t1839 * t1838 + t94 * (t1093 * t11 + t11 * t3287) + t113 * (-t10 * t3293 * t888 - t130 * t2228) - t131 * t10 * t129 + t3300 * t11 - t3302 * t11;
    result__[ 174 ] = -t13 * t154 * t129 - t315 * t363 * t245 + t1730 * t363 * t241 + t3283 * t1955 * t1838 + t94 * (-t1093 * t135 - t135 * t3287) + t113 * (t134 * t3293 * t888 + t154 * t2228) + t131 * t134 * t129 - t3300 * t135 + t3302 * t135;
    result__[ 175 ] = t2208 + t2210 + t94 * (-t162 * t47 * t75 * t867 - t2230) + t113 * (-t2710 * t398 * t8 - t1118 * t3293);
    result__[ 176 ] = t1086 * t1163 * t162 * t94 - t2228 * t246 + t2702 - t2704 + t2706 + t2709 + t2725 + t2727;
    result__[ 177 ] = -result__[150];
    result__[ 178 ] = -result__[159];
    result__[ 179 ] = result__[170];
    result__[ 180 ] = -t5 * t13 * t75 * t286 - t5 * t315 * t204 * t447 + t5 * t1730 * t204 * t249 * t240 + t1693 * t116 * t2339 + t94 * (-t1086 * t1486 * t250 - t1489 * t240 * t5) + t113 * (t1415 * t2227 * t249 + t1498 * t3293 * t81) + t5 * t131 * t161 * t285 - t5 * t3300 * t250 + t5 * t3302 * t250;
    result__[ 181 ] = t13 * t312 * t129 + t315 * t467 * t245 - t1730 * t467 * t241 - t3283 * t2409 * t1838 + t94 * (t1093 * t293 + t293 * t3287) + t113 * (-t292 * t3293 * t888 - t2228 * t312) - t131 * t292 * t129 + t3300 * t293 - t3302 * t293;
    result__[ 182 ] = t2497 * t11;
    real_type t3392 = t2497 * t135;
    result__[ 183 ] = -t3392;
    result__[ 184 ] = result__[179];
    real_type t3393 = t5 * t2497;
    result__[ 185 ] = -t3393 * t250;
    result__[ 186 ] = t2497 * t293;
    real_type t3396 = t1889 * t10;
    result__[ 187 ] = t1103 * t2993 - t3396 * t888;
    real_type t3399 = t1889 * t134;
    result__[ 188 ] = -t1103 * t3013 + t3399 * t888;
    result__[ 189 ] = result__[123];
    result__[ 190 ] = result__[184];
    real_type t3401 = t249 * t55;
    real_type t3403 = t249 * t81;
    real_type t3404 = t5 * t2245;
    result__[ 191 ] = -t3084 * t3401 + t3403 * t3404;
    real_type t3407 = t1889 * t292;
    result__[ 192 ] = t1103 * t3104 - t3407 * t888;
    result__[ 193 ] = t1103 * t3396 + t2993 * t888;
    result__[ 194 ] = -t1103 * t3399 - t3013 * t888;
    result__[ 195 ] = result__[124];
    result__[ 196 ] = result__[190];
    result__[ 197 ] = -t3084 * t3403 - t3401 * t3404;
    result__[ 198 ] = t1103 * t3407 + t3104 * t888;
    result__[ 199 ] = -t2512 * t11;
    result__[ 200 ] = t2512 * t135;
    result__[ 201 ] = result__[196];
    result__[ 202 ] = t5 * t2512 * t250;
    result__[ 203 ] = -t2512 * t293;
    real_type t3420 = t1899 * t10;
    real_type t3422 = t1906 * t10;
    result__[ 204 ] = t1103 * t3420 - t3422 * t888;
    real_type t3424 = t1899 * t134;
    real_type t3426 = t1906 * t134;
    result__[ 205 ] = -t1103 * t3424 + t3426 * t888;
    result__[ 206 ] = result__[125];
    result__[ 207 ] = result__[201];
    real_type t3428 = t5 * t2249;
    real_type t3430 = t5 * t2251;
    result__[ 208 ] = -t3401 * t3428 + t3403 * t3430;
    real_type t3432 = t1899 * t292;
    real_type t3434 = t1906 * t292;
    result__[ 209 ] = t1103 * t3432 - t3434 * t888;
    result__[ 210 ] = t1103 * t3422 + t3420 * t888;
    result__[ 211 ] = -t1103 * t3426 - t3424 * t888;
    result__[ 212 ] = result__[126];
    result__[ 213 ] = result__[207];
    result__[ 214 ] = -t3401 * t3430 - t3403 * t3428;
    result__[ 215 ] = t1103 * t3434 + t3432 * t888;
    result__[ 216 ] = -t10 * t1103 * t1847 + t1874 * result__[182];
    result__[ 217 ] = t1103 * t134 * t1847 - t1874 * t3392;
    result__[ 218 ] = result__[127];
    result__[ 219 ] = t2497 * t162 * t1882;
    result__[ 220 ] = result__[213];
    result__[ 221 ] = -t161 * t1874 * t249 * t2497 * t5 + t2255 * t3401 * t5;
    result__[ 222 ] = -t1103 * t1847 * t292 + t1874 * result__[186];
    real_type t3463 = t8 * t1882;
    real_type t3466 = t1873 * t1861;
    real_type t3467 = t1879 * t3466;
    real_type t3469 = t1873 * t1855;
    real_type t3470 = t1889 * t3469;
    result__[ 223 ] = t1864 * (-t11 * t2013 - t1858) + t2497 * t1846 * t3463 - t3467 * t11 - t3470 * t11;
    result__[ 224 ] = t1864 * (t135 * t2013 + t1962) - t2497 * t1959 * t3463 + t3467 * t135 + t3470 * t135;
    result__[ 225 ] = t1864 * (-t2016 - t2260) - t1879 * t3469 * t162 - t1889 * t1873 * t2013 * t162;
    result__[ 226 ] = -t2092;
    result__[ 227 ] = result__[160];
    result__[ 228 ] = result__[219];
    result__[ 229 ] = t1864 * (-t2258 - t2017) - t2497 * t2010 * t8 * t1874 - t1879 * t1873 * t2259 * t162 - t1889 * t3466 * t162;
    result__[ 230 ] = result__[220];
    result__[ 231 ] = t1864 * (t2013 * t250 * t5 + t2350) - t3393 * t2010 * t249 * t1882 + t5 * t1879 * t1873 * t2773 + t5 * t1889 * t1873 * t2348;
    result__[ 232 ] = t1864 * (-t2013 * t293 - t2416) + t2497 * t2413 * t3463 - t3467 * t293 - t3470 * t293;
    real_type t3516 = ModelPars[114];
    real_type t3517 = t8 * t3516;
    real_type t3518 = ModelPars[184];
    real_type t3520 = LL__[34];
    result__[ 233 ] = -t3520 * t3518 * t10 * t3517;
    result__[ 234 ] = t3520 * t3518 * t134 * t3517;
    result__[ 235 ] = result__[230];
    result__[ 236 ] = t5 * t3520 * t3518 * t161 * t249 * t3516;
    result__[ 237 ] = -t3520 * t3518 * t292 * t3517;
    real_type t3532 = ModelPars[181];
    real_type t3534 = LL__[33] * t3532;
    result__[ 238 ] = -t3534 * t11;
    result__[ 239 ] = t3534 * t135;
    result__[ 240 ] = result__[235];
    result__[ 241 ] = t5 * t3534 * t250;
    result__[ 242 ] = -t3534 * t293;
    real_type t3538 = ModelPars[182];
    real_type t3540 = LL__[35] * t3538;
    result__[ 243 ] = -t3540 * t11;
    result__[ 244 ] = t3540 * t135;
    result__[ 245 ] = result__[240];
    result__[ 246 ] = t5 * t3540 * t250;
    result__[ 247 ] = -t3540 * t293;
    real_type t3544 = ModelPars[183];
    real_type t3546 = LL__[36] * t3544;
    result__[ 248 ] = -t3546 * t11;
    result__[ 249 ] = t3546 * t135;
    result__[ 250 ] = result__[245];
    result__[ 251 ] = t5 * t3546 * t250;
    result__[ 252 ] = -t3546 * t293;
    real_type t3550 = LL__[37];
    result__[ 253 ] = -t3550 * t11;
    result__[ 254 ] = t3550 * t135;
    result__[ 255 ] = t250 * t3550 * t5 + result__[250];
    result__[ 256 ] = -t3550 * t293;
    real_type t3555 = LL__[38];
    result__[ 257 ] = -t3555 * t11;
    result__[ 258 ] = t3555 * t135;
    result__[ 259 ] = t5 * t3555 * t250;
    result__[ 260 ] = -t293 * t3555 + result__[250];
    real_type t3561 = ALIAS_kappa_L(QR__[0]);
    real_type t3563 = t3561 * XR__[37] - 1;
    real_type t3564 = 1.0 / t3563;
    real_type t3565 = XR__[38];
    real_type t3566 = cos(t3565);
    real_type t3567 = t3566 * t3564;
    real_type t3568 = LR__[0];
    real_type t3569 = t3568 * t12;
    real_type t3571 = XR__[7];
    real_type t3572 = cos(t3571);
    real_type t3574 = t20 * t18 * t3572;
    real_type t3575 = sin(t3571);
    real_type t3576 = t29 * t3575;
    real_type t3577 = XR__[8];
    real_type t3578 = t47 * t3577;
    real_type t3579 = -t3574 + t3576 - t33 + t37 + t42 + t45 + t48 - t3578 - t52;
    real_type t3580 = XR__[3];
    real_type t3581 = cos(t3580);
    real_type t3582 = t3581 * t3579;
    real_type t3584 = XR__[4] + t58;
    real_type t3585 = cos(t3584);
    real_type t3586 = t3585 * t3567;
    real_type t3587 = t3586 * t3582;
    real_type t3588 = t29 * t3572;
    real_type t3590 = t20 * t18 * t3575;
    real_type t3591 = t3588 + t3590 + t66 - t68 - t70 + t72;
    real_type t3592 = t3581 * t3591;
    real_type t3593 = sin(t3584);
    real_type t3594 = t3593 * t3592;
    real_type t3595 = t3594 * t3567;
    real_type t3596 = t3581 * t12;
    real_type t3597 = XR__[5];
    real_type t3598 = t3597 * t3596;
    real_type t3599 = sin(t3580);
    real_type t3600 = t87 * t3599;
    real_type t3601 = XR__[6];
    real_type t3603 = t3600 * t3601 + t3598;
    real_type t3606 = LR__[4];
    real_type t3608 = t41 * t3575;
    real_type t3609 = t3574 + t3608 + t33 - t37 + t97 - t45 - t48 + t3578 + t52;
    real_type t3610 = t3599 * t3609;
    real_type t3612 = t3591 * t3599;
    real_type t3613 = t3593 * t3612;
    real_type t3615 = t3599 * t12;
    real_type t3616 = t3597 * t3615;
    real_type t3617 = t3601 * t106;
    real_type t3619 = t3581 * t3617 + t3616;
    real_type t3620 = t3564 * t3619;
    real_type t3622 = -t3566 * t3620 - t3567 * t3613 - t3586 * t3610;
    real_type t3623 = LR__[5];
    real_type t3625 = t87 * t3567;
    real_type t3626 = t3585 * t3601;
    real_type t3627 = LR__[6];
    real_type t3628 = t3627 * t3626;
    real_type t3630 = t3574 - t3576;
    real_type t3631 = t3585 * t3630;
    real_type t3633 = t3588 + t3590;
    real_type t3634 = t3593 * t3633;
    real_type t3635 = t3634 * t3567;
    real_type t3637 = LR__[7];
    real_type t3639 = t3564 * t47;
    real_type t3640 = t3593 * t3566;
    real_type t3641 = LR__[8];
    result__[ 261 ] = t3569 * t3567 - t3606 * (-t3567 * t3603 + t3587 - t3595) - t3623 * t3622 - t3628 * t3625 - t3637 * (-t3567 * t3631 - t3635) - t3641 * t3640 * t3639;
    real_type t3644 = sin(t3565);
    real_type t3645 = t3644 * t3564;
    real_type t3647 = t3585 * t3645;
    real_type t3648 = t3647 * t3582;
    real_type t3649 = t3594 * t3645;
    real_type t3656 = t3610 * t3647 + t3613 * t3645 + t3620 * t3644;
    real_type t3658 = t87 * t3645;
    real_type t3661 = t3634 * t3645;
    real_type t3664 = t3593 * t3644;
    result__[ 262 ] = -t3569 * t3645 - t3606 * (t3603 * t3645 - t3648 + t3649) - t3623 * t3656 + t3628 * t3658 - t3637 * (t3631 * t3645 + t3661) + t3641 * t3664 * t3639;
    real_type t3667 = XR__[0];
    real_type t3669 = XR__[1];
    real_type t3671 = t3566 * t3667 - t3644 * t3669;
    real_type t3672 = t3671 * t3564;
    real_type t3673 = t3579 * t3599;
    real_type t3674 = t3585 * t3673;
    real_type t3675 = t3674 * t3672;
    real_type t3676 = t3613 * t3672;
    real_type t3677 = t87 * t3581;
    real_type t3679 = t3601 * t3677 - t3616;
    real_type t3683 = t3581 * t3609;
    real_type t3684 = t3585 * t3672;
    real_type t3686 = t3594 * t3672;
    real_type t3688 = -t3599 * t3617 + t3598;
    real_type t3691 = -t3564 * t3671 * t3688 - t3683 * t3684 - t3686;
    result__[ 263 ] = -t3606 * (-t3672 * t3679 - t3675 + t3676) - t3623 * t3691;
    real_type t3693 = t3593 * t3672;
    real_type t3694 = t3693 * t3582;
    real_type t3695 = t3585 * t3592;
    real_type t3697 = -t3672 * t3695 - t3694;
    real_type t3701 = t3585 * t3612 * t3672;
    real_type t3702 = t3610 * t3693 - t3701;
    real_type t3704 = t87 * t3672;
    real_type t3705 = t3593 * t3601;
    real_type t3706 = t3627 * t3705;
    real_type t3708 = t3593 * t3630;
    real_type t3709 = t3708 * t3672;
    real_type t3710 = t3585 * t3633;
    real_type t3711 = t3710 * t3672;
    real_type t3714 = t3585 * t3671;
    real_type t3715 = t3641 * t3714;
    result__[ 264 ] = -t3606 * t3697 - t3623 * t3702 + t3706 * t3704 - t3637 * (t3709 - t3711) - t3715 * t3639;
    real_type t3719 = t3623 * t3672;
    result__[ 265 ] = t3596 * t3606 * t3672 + t3615 * t3719;
    real_type t3723 = t3581 * t106;
    result__[ 266 ] = -t3585 * t3627 * t3672 * t87 + t3600 * t3606 * t3672 + t3719 * t3723;
    real_type t3728 = t3633 * t3581;
    real_type t3729 = t3585 * t3728;
    real_type t3730 = t3729 * t3672;
    real_type t3731 = t3581 * t3630;
    real_type t3734 = -t3593 * t3672 * t3731 + t3730;
    real_type t3736 = t41 * t3572;
    real_type t3737 = t3736 - t3590;
    real_type t3738 = t3599 * t3737;
    real_type t3740 = t3630 * t3599;
    real_type t3743 = -t3593 * t3672 * t3740 - t3684 * t3738;
    real_type t3745 = -t3633;
    result__[ 267 ] = -t3606 * t3734 - t3623 * t3743 - t3637 * (-t3585 * t3672 * t3745 - t3709);
    real_type t3750 = t3581 * t47;
    real_type t3751 = t3564 * t3750;
    real_type t3754 = t3599 * t47;
    real_type t3755 = t3564 * t3754;
    real_type t3756 = t3623 * t3714;
    result__[ 268 ] = t3606 * t3714 * t3751 + t3755 * t3756;
    real_type t3758 = t3563 * t3563;
    real_type t3759 = 1.0 / t3758;
    real_type t3760 = t3671 * t3759;
    real_type t3763 = t3759 * t3582;
    real_type t3764 = t3561 * t3714;
    real_type t3765 = t3764 * t3763;
    real_type t3766 = t3591 * t3760;
    real_type t3768 = t3561 * t3593 * t3581;
    real_type t3769 = t3768 * t3766;
    real_type t3774 = t3759 * t3610;
    real_type t3776 = t3599 * t3760;
    real_type t3777 = t3593 * t3591;
    real_type t3781 = t3561 * t3671;
    real_type t3783 = t3561 * t3776 * t3777 + t3619 * t3759 * t3781 + t3764 * t3774;
    real_type t3785 = t87 * t3760;
    real_type t3786 = t3561 * t3627;
    real_type t3792 = t3561 * t3634 * t3760;
    real_type t3795 = t3759 * t47;
    real_type t3796 = t3671 * t3795;
    real_type t3797 = t3641 * t3593;
    result__[ 269 ] = -t3561 * t3569 * t3760 - t3606 * (t3561 * t3603 * t3760 - t3765 + t3769) - t3623 * t3783 + t3786 * t3626 * t3785 - t3637 * (t3561 * t3631 * t3760 + t3792) + t3561 * t3797 * t3796;
    real_type t3802 = -t3566 * t3669 - t3644 * t3667;
    real_type t3803 = t3802 * t3564;
    real_type t3805 = t3585 * t3803;
    real_type t3806 = t3805 * t3582;
    real_type t3807 = t3594 * t3803;
    real_type t3814 = -t3610 * t3805 - t3613 * t3803 - t3620 * t3802;
    real_type t3816 = t87 * t3803;
    real_type t3819 = t3634 * t3803;
    real_type t3822 = t3593 * t3802;
    result__[ 270 ] = t3569 * t3803 - t3606 * (-t3603 * t3803 + t3806 - t3807) - t3623 * t3814 - t3628 * t3816 - t3637 * (-t3631 * t3803 - t3819) - t3641 * t3822 * t3639;
    real_type t3825 = LR__[1];
    real_type t3826 = t3825 * t12;
    real_type t3828 = -t3603;
    real_type t3831 = LR__[3];
    real_type t3833 = t3585 * t3591;
    real_type t3835 = t3593 * t3579;
    real_type t3837 = -t3567 * t3833 - t3567 * t3835;
    real_type t3839 = t3601 * t3599;
    real_type t3840 = t3593 * t3839;
    real_type t3845 = t3633 * t3599;
    real_type t3846 = t3585 * t3845;
    real_type t3848 = -t3630;
    real_type t3849 = t3848 * t3599;
    real_type t3850 = t3593 * t3849;
    real_type t3852 = -t3567 * t3846 - t3567 * t3850;
    real_type t3854 = t3585 * t3566;
    real_type t3855 = t3641 * t3854;
    result__[ 271 ] = t3826 * t3567 - t3831 * (-t3567 * t3828 - t3587 + t3595) - t3623 * t3837 - t3627 * (-t3567 * t3677 - t3625 * t3840) - t3637 * t3852 - t3855 * t3755;
    real_type t3863 = t3645 * t3833 + t3645 * t3835;
    real_type t3871 = t3645 * t3846 + t3645 * t3850;
    real_type t3873 = t3585 * t3644;
    real_type t3874 = t3641 * t3873;
    result__[ 272 ] = -t3826 * t3645 - t3831 * (t3645 * t3828 + t3648 - t3649) - t3623 * t3863 - t3627 * (t3645 * t3677 + t3658 * t3840) - t3637 * t3871 + t3874 * t3755;
    real_type t3880 = t3601 * t3581;
    real_type t3886 = t3581 * t3848;
    real_type t3887 = t3593 * t3886;
    real_type t3889 = -t3672 * t3887 - t3730;
    result__[ 273 ] = -t3831 * (t3672 * t3679 + t3675 - t3676) - t3627 * (-t3593 * t3704 * t3880 + t3600 * t3672) - t3637 * t3889 - t3715 * t3751;
    real_type t3893 = -t3831 * t3697;
    real_type t3894 = t3777 * t3672;
    real_type t3895 = t3585 * t3579;
    real_type t3896 = t3895 * t3672;
    real_type t3897 = t3894 - t3896;
    real_type t3901 = t3627 * t3585 * t3839 * t3704;
    real_type t3903 = t3593 * t3845 * t3672;
    real_type t3904 = t3585 * t3849;
    real_type t3906 = -t3672 * t3904 + t3903;
    real_type t3908 = t3593 * t3671;
    real_type t3909 = t3641 * t3908;
    real_type t3910 = t3909 * t3755;
    result__[ 274 ] = -t3623 * t3897 - t3637 * t3906 - t3893 + t3901 + t3910;
    result__[ 275 ] = -t3831 * t3596 * t3672;
    real_type t3915 = t3593 * t3599;
    result__[ 276 ] = -t3600 * t3672 * t3831 + t3627 * t3704 * t3915;
    real_type t3920 = t3631 * t3672;
    real_type t3922 = -t3634 * t3672 - t3920;
    real_type t3926 = -t3585 * t3672 * t3740 - t3903;
    result__[ 277 ] = -t3623 * t3922 - t3637 * t3926 + t3734 * t3831;
    result__[ 278 ] = -t3623 * t3639 * t3908 - t3714 * t3751 * t3831;
    real_type t3932 = t3561 * t3826;
    real_type t3942 = t3561 * t3760 * t3833 + t3561 * t3760 * t3835;
    real_type t3944 = t3561 * t3593;
    real_type t3951 = t3561 * t3710;
    real_type t3956 = t3561 * t3593 * t3776 * t3848 + t3776 * t3951;
    real_type t3958 = t3759 * t3754;
    real_type t3959 = t3561 * t3641;
    result__[ 279 ] = -t3932 * t3760 - t3831 * (t3561 * t3760 * t3828 + t3765 - t3769) - t3623 * t3942 - t3627 * (t3561 * t3677 * t3760 + t3785 * t3839 * t3944) - t3637 * t3956 + t3959 * t3714 * t3958;
    real_type t3968 = -t3803 * t3833 - t3803 * t3835;
    real_type t3976 = -t3803 * t3846 - t3803 * t3850;
    real_type t3978 = t3585 * t3802;
    real_type t3979 = t3641 * t3978;
    result__[ 280 ] = t3826 * t3803 - t3831 * (-t3803 * t3828 - t3806 + t3807) - t3623 * t3968 - t3627 * (-t3677 * t3803 - t3816 * t3840) - t3637 * t3976 - t3979 * t3755;
    real_type t3983 = t3597 * t3581;
    real_type t3986 = t47 * t3577 * t82;
    real_type t3987 = -t3986 + t478 - t481 - t482;
    real_type t3988 = t3987 * t3599;
    real_type t3990 = -t3579 * t3983 - t3601 * t3988;
    real_type t3991 = t3593 * t3990;
    real_type t3993 = t3572 * t3572;
    real_type t3994 = t498 * t3993;
    real_type t3996 = t503 * t3575 * t3572;
    real_type t3997 = 2 * t3996;
    real_type t3998 = t3577 * t3577;
    real_type t3999 = t3998 * t47;
    real_type t4000 = t3999 / 2;
    real_type t4002 = t47 * t476 * t3577;
    real_type t4003 = t3994 + t3997 + t508 - t511 + t518 - t522 + t526 + t4000 - t4002 + t534 + t514 + t535 + t540 - t516 + t542 - t544 + t515;
    real_type t4004 = t3581 * t4003;
    real_type t4005 = t3593 * t3567;
    real_type t4009 = t563 * t3599;
    real_type t4011 = -t3591 * t3983 - t3601 * t4009;
    real_type t4017 = t3575 * t507 * t3572;
    real_type t4019 = t47 * t552 * t3577;
    real_type t4020 = t3993 * t571 + t4017 - t4019 - t570 + t576 - t578 + t582 + t583 + t586 - t587 - t588;
    real_type t4021 = t4020 * t3581;
    real_type t4022 = t3585 * t3585;
    real_type t4023 = t4022 * t4021;
    real_type t4029 = t4003 * t3599;
    real_type t4030 = t3581 * t4029;
    real_type t4031 = t4022 * t3567;
    real_type t4034 = t3599 * t4020;
    real_type t4035 = t3581 * t4034;
    real_type t4038 = t3581 * t3581;
    real_type t4039 = t3987 * t4038;
    real_type t4042 = t3597 * t3599;
    real_type t4045 = t3601 * t3987;
    real_type t4046 = -2 * t3582 * t4042 + 2 * t3601 * t4039 - t4045;
    real_type t4050 = t563 * t4038;
    real_type t4053 = t3599 * t3581;
    real_type t4054 = t3591 * t3597;
    real_type t4057 = t3601 * t563;
    real_type t4058 = -2 * t3601 * t4050 + 2 * t4053 * t4054 + t4057;
    real_type t4059 = t3593 * t4058;
    real_type t4061 = t87 * t4038;
    real_type t4062 = t3597 * t3601;
    real_type t4065 = t3597 * t3597;
    real_type t4066 = t4065 * t12;
    real_type t4067 = t3994 + t3997 + t508 - t511 - t4066 + t518 + t636 - t637 + t514 + t515 - t516 + t541 - t638;
    real_type t4070 = t3601 * t87;
    real_type t4072 = -t3581 * t3599 * t4067 + t3597 * t4070 - 2 * t4061 * t4062;
    real_type t4073 = t3564 * t4072;
    real_type t4077 = t3993 * t661;
    real_type t4080 = 2 * t4002;
    real_type t4081 = t3572 * t3575 * t669 - t3999 + t4077 + t4080 - t541 + t543 - t636 + t675 + t680 + t682 + t683 + t689 - t690 - t691 + t693 - t694 + t695;
    real_type t4082 = t4038 * t4081;
    real_type t4084 = t3993 * t678;
    real_type t4086 = t3572 * t3575 * t661;
    real_type t4088 = t3577 * t711 + t4084 + t4086 + t702 + t704 - t706 + t708 + t713 + t718 - t719 - t720;
    real_type t4089 = t4038 * t4088;
    real_type t4092 = t725 * t3597 * t3572;
    real_type t4093 = 2 * t4092;
    real_type t4094 = t3597 * t731;
    real_type t4095 = t3575 * t4094;
    real_type t4096 = 2 * t3578;
    real_type t4099 = -t4093 + t4095 + t3597 * (t734 + t738 + t739 - t740 + t741 - t4096 - t743);
    real_type t4101 = 2 * t3987;
    real_type t4102 = t3601 * t4101;
    real_type t4104 = t3597 * t737;
    real_type t4105 = t3575 * t4104;
    real_type t4108 = t4038 * t4099 + t4053 * t4102 + t4093 + t4105 + t3597 * (-t734 + t753 - t739 + t740 - t741 + t4096 + t743);
    real_type t4109 = t3564 * t4108;
    real_type t4113 = t3572 * t4104;
    real_type t4116 = t3575 * t20 * t3597 * t18;
    real_type t4117 = 2 * t4116;
    real_type t4119 = t3597 * t770 + t4113 - t4117;
    real_type t4121 = t3601 * t785;
    real_type t4123 = t3572 * t4094;
    real_type t4125 = t3597 * t790 + t4038 * t4119 + t4053 * t4121 + t4117 + t4123;
    real_type t4126 = t3564 * t4125;
    real_type t4128 = t3993 * t798;
    real_type t4131 = t3572 * t3575 * t804 - t4066 + t4128 + t514 + t515 - t516 + t518 + t541 + t636 - t637 - t638 + t810 + t815;
    real_type t4133 = t3601 * t818;
    real_type t4136 = t3581 * t4042 * t4133 + t4038 * t4131 + t3999 + t4066 - t4080 - t636 + t638 - t683 + t691 + t823 + t825;
    real_type t4137 = t3564 * t4136;
    real_type t4143 = t3581 * t837 - t3600 * t4062;
    real_type t4144 = t3585 * t4143;
    real_type t4146 = -t3987;
    real_type t4147 = t4146 * t3581;
    real_type t4149 = t3601 * t4146;
    real_type t4150 = t3599 * t4149;
    real_type t4157 = t3593 * t4042;
    real_type t4159 = t860 * t3599;
    real_type t4160 = t4159 * t3567;
    real_type t4163 = t3581 * t82;
    real_type t4165 = -t3601 * t4163 + t4042;
    real_type t4166 = t4165 / 2;
    real_type t4167 = t3564 * t4166;
    real_type t4172 = t3599 * t553;
    real_type t4176 = t3564 * t3601;
    real_type t4177 = t3566 * t4176;
    real_type t4178 = t560 * t3581;
    real_type t4179 = t3593 * t4178;
    real_type t4181 = t3599 * t560;
    real_type t4183 = -t3567 * t4181 + t4177 * t4179;
    real_type t4184 = LR__[9];
    real_type t4186 = t3564 * t3599;
    real_type t4187 = t858 * t3566;
    real_type t4188 = LR__[10];
    result__[ 281 ] = -t3568 * t3622 - t3825 * t3837 - t3831 * (-t3991 * t3567 + t3585 * (-t3567 * t4011 - 2 * t4004 * t4005) - 2 * t4023 * t3567 + t4021 * t3567) - t3606 * (-2 * t4031 * t4030 + t3585 * (-t3567 * t4046 + 2 * t4005 * t4035) - t4059 * t3567 - t3566 * t4073) - t3623 * (-t4031 * t4082 + t3585 * (-t3566 * t4109 - t4005 * t4089) - t3640 * t4126 - t3566 * t4137) - t3627 * (-t3567 * t4144 + t3567 * t4150 + t4005 * t4147) - t3637 * (t3567 * t3597 * t3904 - t3567 * t3633 * t4157 - t4160) - t3641 * (2 * t3566 * t3593 * t4167 * t47 + t3567 * t4172) - t4184 * t4183 + t4188 * t4187 * t4186;
    real_type t4194 = t3593 * t3645;
    real_type t4205 = t4022 * t3645;
    real_type t4235 = t4159 * t3645;
    real_type t4245 = t3644 * t4176;
    real_type t4248 = t3645 * t4181 - t4179 * t4245;
    real_type t4250 = t858 * t3644;
    result__[ 282 ] = -t3568 * t3656 - t3825 * t3863 - t3831 * (t3991 * t3645 + t3585 * (t3645 * t4011 + 2 * t4004 * t4194) + 2 * t4023 * t3645 - t4021 * t3645) - t3606 * (2 * t4205 * t4030 + t3585 * (t3645 * t4046 - 2 * t4035 * t4194) + t4059 * t3645 + t3644 * t4073) - t3623 * (t4205 * t4082 + t3585 * (t3644 * t4109 + t4089 * t4194) + t3664 * t4126 + t3644 * t4137) - t3627 * (t3645 * t4144 - t3645 * t4150 - t4147 * t4194) - t3637 * (-t3597 * t3645 * t3904 + t3633 * t3645 * t4157 + t4235) - t3641 * (-2 * t3593 * t3644 * t4167 * t47 - t3645 * t4172) - t4184 * t4248 - t4188 * t4250 * t4186;
    real_type t4254 = t4022 * t4034;
    real_type t4259 = t563 * t3581;
    real_type t4262 = t3591 * t4042 - t3601 * t4259;
    real_type t4264 = -t3672 * t4262 + 2 * t3693 * t4029;
    real_type t4266 = t3987 * t3581;
    real_type t4269 = t3597 * t3673 - t3601 * t4266;
    real_type t4270 = t3593 * t4269;
    real_type t4276 = t4022 * t3672;
    real_type t4279 = t3599 * t3599;
    real_type t4303 = t3597 * t4279;
    real_type t4306 = t3597 * t4038;
    real_type t4324 = t4022 * t3671;
    real_type t4328 = t3581 * t4088;
    real_type t4329 = t3564 * t4328;
    real_type t4366 = t4146 * t3599;
    real_type t4367 = t3693 * t4366;
    real_type t4368 = t3581 * t4149;
    real_type t4372 = t3597 * t3672;
    real_type t4373 = t3585 * t3886;
    real_type t4375 = t3633 * t3672;
    real_type t4376 = t3593 * t3983;
    real_type t4377 = t4376 * t4375;
    real_type t4378 = t860 * t3581;
    real_type t4379 = t4378 * t3672;
    real_type t4382 = t3599 * t82;
    real_type t4383 = t3601 * t4382;
    real_type t4384 = t4383 + t3983;
    real_type t4387 = t47 * t3671;
    real_type t4388 = t3593 * t4387;
    real_type t4391 = t3581 * t553;
    real_type t4392 = t4391 * t3672;
    real_type t4396 = t3599 * t560 * t3601;
    real_type t4399 = -t3672 * t4178 - t3693 * t4396;
    real_type t4401 = t3564 * t3581;
    real_type t4402 = t858 * t3671;
    result__[ 283 ] = -t3568 * t3691 - t3831 * (t3585 * t4264 - t3672 * t4034 + 2 * t3672 * t4254 - t3672 * t4270) - t3606 * (-2 * t4276 * t4003 * t4038 + 2 * t4276 * t4003 * t4279 + t3585 * (2 * t3693 * t4038 * t4020 - 2 * t3693 * t4279 * t4020 - (-2 * t3579 * t3597 * t4038 + 2 * t3579 * t3597 * t4279 - 4 * t3839 * t4266) * t3672) - t3593 * (-2 * t3591 * t4303 + 2 * t3591 * t4306 + 4 * t3839 * t4259) * t3672 - t3671 * t3564 * (4 * t3599 * t3677 * t4062 - t4038 * t4067 + t4067 * t4279)) - t3623 * (2 * t3599 * t4324 * t3564 * t3581 * t4081 + t3585 * (2 * t3599 * t3908 * t4329 - t3671 * t3564 * (-2 * t3581 * t3599 * t4099 + t4038 * t4102 - t4102 * t4279)) - t3908 * t3564 * (-2 * t3581 * t3599 * t4119 + t4038 * t4121 - t4121 * t4279) - t3671 * t3564 * (-2 * t3581 * t3599 * t4131 - t4133 * t4303 + t4133 * t4306)) - t3627 * (-t3585 * (-t3599 * t837 - t3677 * t4062) * t3672 - t4367 + t4368 * t3672) - t3637 * (t4372 * t4373 - t4377 - t4379) - t3641 * (t3564 * t4384 * t4388 + t4392) - t4184 * t4399 + t4188 * t4402 * t4401;
    real_type t4412 = 2 * t3693 * t4004;
    real_type t4416 = t3581 * t3672;
    real_type t4418 = t3593 * t3585 * t4020;
    real_type t4439 = t3593 * t3714;
    real_type t4452 = t3684 * t4147;
    real_type t4456 = t3585 * t4042;
    real_type t4457 = t4456 * t4375;
    real_type t4461 = t3585 * t47;
    real_type t4465 = t3671 * t4176;
    result__[ 284 ] = -t3568 * t3702 - t3825 * t3897 - t3831 * (-t3585 * t3990 * t3672 - 2 * t4276 * t4004 - t3593 * (-t3672 * t4011 - t4412) + 4 * t4418 * t4416) - t3606 * (4 * t3593 * t3585 * t3672 * t4030 + 2 * t4276 * t4035 - t3593 * (-t3672 * t4046 + 2 * t3693 * t4035) - t3585 * t4058 * t3672) - t3623 * (2 * t4439 * t3564 * t4082 - t4276 * t4089 - t3593 * (-t3671 * t4109 - t3693 * t4089) - t3714 * t4126) - t3627 * (t3593 * t3672 * t4143 + t4452) - t3637 * (-t3850 * t4372 - t4457) - 2 * t3641 * t4461 * t3671 * t4167 - t4184 * t3585 * t4178 * t4465;
    real_type t4469 = t3568 * t3672;
    real_type t4477 = t3597 * t12;
    real_type t4485 = 2 * t3574;
    real_type t4494 = 2 * t3590;
    result__[ 285 ] = t4469 * t3615 - t3893 - t3606 * (2 * t3674 * t4416 - 2 * t3613 * t4416 - t3671 * t3564 * (-2 * t3601 * t4061 + 2 * t4053 * t4477 + t4070)) - t3623 * (-t3714 * t3564 * (t4038 * (t3575 * t731 - t4096 - t4485 + t734 + t738 + t739 - t740 + t741 - t743) + t4485 + t3575 * t737 - t734 + t753 - t739 + t740 - t741 + t4096 + t743) - t3908 * t3564 * (t4038 * (t3572 * t737 - t4494 + t766 + t767 + t768 - t769) + t3572 * t731 + t4494 + t789 - t768 - t767 + t769) - t3671 * t3564 * (-2 * t4038 * t4477 + t4053 * t4133 + 2 * t4477)) - t3901 + t3637 * t3906 - t3910;
    real_type t4513 = t3593 * t3988;
    real_type t4514 = t4513 * t3672;
    real_type t4529 = t3597 * t87;
    real_type t4550 = t3564 * t4163;
    real_type t4553 = t3593 * t560;
    real_type t4554 = t4184 * t4553;
    result__[ 286 ] = t4469 * t3723 - t3831 * (t3585 * t3672 * t4009 + t4514) - t3606 * (-t3585 * (2 * t4039 - t478 + t3986 + t481 + t482) * t3672 - t3593 * (-2 * t4050 + t554 + t556 + t558 - t559 + t560 - t561 + t562) * t3672 - t3671 * t3564 * (-2 * t3597 * t4061 + t4529)) - t3623 * (-t3581 * t3599 * t3684 * t4101 - t3581 * t3599 * t3693 * t785 - t3597 * t3599 * t4416 * t818) - t3627 * (t3672 * t4366 + t3704 * t4456) + t3797 * t4387 * t4550 - t4554 * t4416;
    real_type t4560 = t3575 * t3575;
    real_type t4561 = t503 * t4560;
    real_type t4562 = t503 * t3993;
    real_type t4564 = -2 * t3572 * t3575 * t498 - 2 * t4561 + 2 * t4562;
    real_type t4575 = t507 * t4560;
    real_type t4576 = t507 * t3993;
    real_type t4577 = -2 * t3572 * t3575 * t571 - t4575 + t4576;
    real_type t4578 = t4577 * t3581;
    real_type t4585 = t4564 * t3599;
    real_type t4589 = t3599 * t4577;
    real_type t4610 = t3572 * t3575 * t678;
    real_type t4613 = -t4560 * t661 + t4077 - 2 * t4610;
    real_type t4629 = t3572 * t3575 * t798;
    result__[ 287 ] = -t3568 * t3743 - t3825 * t3922 - t3831 * (t4377 + t3585 * (-2 * t3581 * t3693 * t4564 + t3630 * t3672 * t3983) - 2 * t4022 * t4578 * t3672 + t4578 * t3672) - t3606 * (-2 * t4276 * t3581 * t4585 + t3585 * (2 * t3581 * t3693 * t4589 + 2 * t3597 * t3845 * t4416) - 2 * t3708 * t4042 * t4416 + t4416 * t4585) - t3623 * (-t4276 * t4038 * (t3993 * t669 - t4560 * t669 - 2 * t4086) + t3585 * (-t3693 * t4038 * t4613 - t3671 * t3564 * (t4038 * (t4117 + t4123) - t4117 + t4113)) - t3908 * t3564 * (t4038 * (-t4105 - t4093) - t4095 + t4093) - t3672 * t4038 * (t3993 * t804 - t4560 * t804 - 2 * t4629)) - t3637 * (-t3630 * t3672 * t4157 + t4457);
    real_type t4647 = t3601 * t82;
    real_type t4649 = t3754 * t4647 + t3983 * t47;
    real_type t4651 = t3593 * t4649 * t3672;
    real_type t4652 = t3578 - t1354;
    real_type t4653 = t3581 * t4652;
    real_type t4657 = t4022 * t553;
    real_type t4662 = t4652 * t3599;
    real_type t4682 = -2 * t4652;
    real_type t4687 = t3597 * t47;
    real_type t4697 = -t4682;
    real_type t4698 = t3564 * t4697;
    real_type t4703 = t47 * t3672;
    result__[ 288 ] = t3568 * t3714 * t3755 - t3825 * t3908 * t3639 - t3831 * (-2 * t3564 * t4439 * t4653 + 2 * t4416 * t4657 - t4392 - t4651) - t3606 * (-2 * t4276 * t3581 * t4662 + t3585 * (-2 * t3908 * t4401 * t4172 - (-2 * t4038 * t4647 * t47 + t3601 * t83 + 2 * t3750 * t4042) * t3672)) - t3623 * (-t4276 * t4038 * t4682 + t3585 * (-t3693 * t4038 * t711 - t3671 * t3564 * (-2 * t3581 * t3839 * t83 - 2 * t4038 * t4687 + 2 * t4687)) - t3671 * t4698) - t3627 * (t4383 * t4703 + t4388 * t4550);
    real_type t4712 = t3561 * t3908;
    real_type t4719 = t3581 * t3760;
    real_type t4721 = t3561 * t4022 * t4020;
    real_type t4732 = t3944 * t3760;
    real_type t4746 = t3561 * t4324;
    real_type t4764 = t4146 * t3760;
    real_type t4770 = t3561 * t3585;
    real_type t4777 = t3561 * t4159 * t3760;
    real_type t4782 = t3593 * t47;
    real_type t4783 = t3561 * t4782;
    real_type t4786 = t552 * t3760;
    real_type t4792 = t3671 * t3759 * t3601;
    real_type t4795 = t3561 * t3760;
    real_type t4797 = -t3944 * t4178 * t4792 + t4181 * t4795;
    real_type t4799 = t4188 * t858;
    real_type t4800 = t3561 * t4799;
    result__[ 289 ] = -t3568 * t3783 - t3825 * t3942 - t3831 * (t3561 * t3991 * t3760 + t3585 * (t3561 * t3760 * t4011 + 2 * t3759 * t4004 * t4712) + 2 * t4721 * t4719 - t3561 * t4021 * t3760) - t3606 * (2 * t3561 * t4022 * t3760 * t4030 + t3585 * (t3561 * t3760 * t4046 - 2 * t4035 * t4732) + t3561 * t4059 * t3760 + t3781 * t3759 * t4072) - t3623 * (t4746 * t3759 * t4082 + t3585 * (t3759 * t3781 * t4108 + t3759 * t4089 * t4712) + t4712 * t3759 * t4125 + t3781 * t3759 * t4136) - t3627 * (t3561 * t3760 * t4144 - t3561 * t3839 * t4764 - t3759 * t4147 * t4712) - t3637 * (-t3597 * t3760 * t3849 * t4770 + t3633 * t3760 * t3944 * t4042 + t4777) - t3641 * (-2 * t3671 * t3759 * t4166 * t4783 - t3561 * t3754 * t4786) - t4184 * t4797 - t4800 * t3776;
    real_type t4805 = t3593 * t3803;
    real_type t4816 = t4022 * t3803;
    real_type t4846 = t4159 * t3803;
    real_type t4856 = t3802 * t4176;
    real_type t4859 = -t3803 * t4181 + t4179 * t4856;
    real_type t4861 = t858 * t3802;
    result__[ 290 ] = -t3568 * t3814 - t3825 * t3968 - t3831 * (-t3991 * t3803 + t3585 * (-t3803 * t4011 - 2 * t4004 * t4805) - 2 * t4023 * t3803 + t4021 * t3803) - t3606 * (-2 * t4816 * t4030 + t3585 * (-t3803 * t4046 + 2 * t4035 * t4805) - t4059 * t3803 - t3802 * t4073) - t3623 * (-t4816 * t4082 + t3585 * (-t3802 * t4109 - t4089 * t4805) - t3822 * t4126 - t3802 * t4137) - t3627 * (-t3803 * t4144 + t3803 * t4150 + t4147 * t4805) - t3637 * (t3597 * t3803 * t3904 - t3633 * t3803 * t4157 - t4846) - t3641 * (2 * t3593 * t3802 * t4167 * t47 + t3803 * t4172) - t4184 * t4859 + t4188 * t4861 * t4186;
    real_type t4864 = LR__[19];
    result__[ 291 ] = t4864 * t3567;
    result__[ 292 ] = -t4864 * t3645;
    result__[ 293 ] = -t3561 * t4864 * t3760;
    result__[ 294 ] = t4864 * t3803;
    real_type t4868 = LR__[20];
    result__[ 295 ] = t4868 * t3567;
    result__[ 296 ] = -t4868 * t3645;
    result__[ 297 ] = -t3561 * t4868 * t3760;
    result__[ 298 ] = t4868 * t3803;
    real_type t4872 = LR__[21];
    result__[ 299 ] = t4872 * t3567;
    result__[ 300 ] = -t4872 * t3645;
    result__[ 301 ] = -t3561 * t4872 * t3760;
    result__[ 302 ] = t4872 * t3803;
    real_type t4876 = LR__[22];
    result__[ 303 ] = t4876 * t3567;
    result__[ 304 ] = -t4876 * t3645;
    result__[ 305 ] = -t3561 * t4876 * t3760;
    result__[ 306 ] = t4876 * t3803;
    real_type t4880 = LR__[23];
    result__[ 307 ] = t4880 * t3567;
    result__[ 308 ] = -t4880 * t3645;
    result__[ 309 ] = -t3561 * t4880 * t3760;
    result__[ 310 ] = t4880 * t3803;
    real_type t4884 = LR__[24];
    result__[ 311 ] = t4884 * t3567;
    result__[ 312 ] = -t4884 * t3645;
    result__[ 313 ] = -t3561 * t4884 * t3760;
    result__[ 314 ] = t4884 * t3803;
    real_type t4888 = LR__[25];
    result__[ 315 ] = t4888 * t3567;
    result__[ 316 ] = -t4888 * t3645;
    result__[ 317 ] = -t3561 * t4888 * t3760;
    result__[ 318 ] = t4888 * t3803;
    real_type t4892 = LR__[26];
    result__[ 319 ] = t4892 * t3567;
    result__[ 320 ] = -t4892 * t3645;
    result__[ 321 ] = -t3561 * t4892 * t3760;
    result__[ 322 ] = t4892 * t3803;
    real_type t4896 = LR__[27];
    result__[ 323 ] = t4896 * t3567;
    result__[ 324 ] = -t4896 * t3645;
    result__[ 325 ] = -t3561 * t4896 * t3760;
    result__[ 326 ] = t4896 * t3803;
    real_type t4900 = LR__[28];
    result__[ 327 ] = t4900 * t3567;
    result__[ 328 ] = -t4900 * t3645;
    result__[ 329 ] = -t3561 * t4900 * t3760;
    result__[ 330 ] = t4900 * t3803;
    real_type t4904 = LR__[29];
    result__[ 331 ] = t4904 * t3567;
    result__[ 332 ] = -t4904 * t3645;
    result__[ 333 ] = -t3561 * t4904 * t3760;
    result__[ 334 ] = t4904 * t3803;
    real_type t4908 = LR__[30];
    result__[ 335 ] = t4908 * t3567;
    result__[ 336 ] = -t4908 * t3645;
    result__[ 337 ] = -t3561 * t4908 * t3760;
    result__[ 338 ] = t4908 * t3803;
    real_type t4912 = LR__[31];
    result__[ 339 ] = t4912 * t3567;
    result__[ 340 ] = -t4912 * t3645;
    result__[ 341 ] = -t3561 * t4912 * t3760;
    result__[ 342 ] = t4912 * t3803;
    real_type t4916 = LR__[32];
    result__[ 343 ] = t4916 * t3567;
    result__[ 344 ] = -t4916 * t3645;
    result__[ 345 ] = -t3561 * t4916 * t3760;
    result__[ 346 ] = t4916 * t3803;
    real_type t4924 = t3637 * t858;
    real_type t4926 = t4799 * t3567;
    result__[ 347 ] = t3606 * t4187 * t4401 + t3623 * t4186 * t4187 + t3567 * t4924 + t4926;
    real_type t4932 = t4799 * t3645;
    result__[ 348 ] = -t3606 * t4250 * t4401 - t3623 * t4186 * t4250 - t3645 * t4924 - t4932;
    result__[ 349 ] = -t3606 * t4186 * t4402 + t3623 * t4401 * t4402;
    real_type t4945 = t4800 * t3760;
    result__[ 350 ] = -t3561 * t3606 * t4719 * t858 - t3561 * t3623 * t3776 * t858 - t3561 * t3760 * t4924 - t4945;
    real_type t4951 = t4799 * t3803;
    result__[ 351 ] = t3606 * t4401 * t4861 + t3623 * t4186 * t4861 + t3803 * t4924 + t4951;
    real_type t4952 = t3585 * t560;
    real_type t4953 = t3831 * t4952;
    real_type t4960 = t3564 * t560;
    real_type t4962 = t4184 * t3566 * t4960;
    result__[ 352 ] = -t4953 * t4177 - t3606 * (-t3567 * t4178 - t4005 * t4396) - t3623 * t4183 + t4962;
    real_type t4970 = t4184 * t3644 * t4960;
    result__[ 353 ] = t4953 * t4245 - t3606 * (t3645 * t4178 + t4194 * t4396) - t3623 * t4248 - t4970;
    result__[ 354 ] = -t3606 * (t3672 * t4181 - t4179 * t4465) - t3623 * t4399;
    result__[ 355 ] = t3585 * t3606 * t3672 * t4396 - t3585 * t3623 * t4178 * t4465 + t3831 * t4465 * t4553;
    real_type t4986 = t3606 * t3908;
    result__[ 356 ] = t3564 * t4181 * t4986 - t3623 * t4416 * t4553 - t3672 * t4953;
    real_type t4990 = t3561 * t3831;
    real_type t5002 = t3561 * t4184 * t3671 * t3759 * t560;
    result__[ 357 ] = t4990 * t4952 * t4792 - t3606 * (t3561 * t3760 * t4178 + t4396 * t4732) - t3623 * t4797 - t5002;
    real_type t5010 = t4184 * t3802 * t4960;
    result__[ 358 ] = -t4953 * t4856 - t3606 * (-t3803 * t4178 - t4396 * t4805) - t3623 * t4859 + t5010;
    real_type t5011 = t3736 - t3590 + t1714 + t68 + t70 - t72;
    real_type t5012 = t5011 * t3581;
    real_type t5013 = t3593 * t5012;
    real_type t5015 = -t3688;
    real_type t5016 = t3564 * t5015;
    real_type t5021 = t5011 * t3599;
    real_type t5022 = t3593 * t5021;
    real_type t5026 = LR__[2];
    real_type t5033 = t1735 * t3993 + t1739 + t1740 + t1744 - t1746 - 2 * t4017 + 2 * t4019 + t706 - t713 + t719 + t720;
    real_type t5034 = t3593 * t5033;
    real_type t5036 = t3597 * t3579;
    real_type t5043 = t1755 * t3993 + t1759 - t1760 + t1761 + t1762 + 4 * t3996 + t3999 - t4080 + t541 - t543 + t636 - t683 + t690 + t691 + t694 - t695 + t823;
    real_type t5044 = t3564 * t5043;
    real_type t5047 = t4576 - t3997 + t1767 + t511 + t4066 + t1768 - t636 + t637 - t514 - t515 + t516 + t543;
    real_type t5048 = t3564 * t5047;
    real_type t5065 = t3993 * t674 + t1761 + t1762 + t1787 + t1789 + t3999 - t4080 + t4610 + t541 - t543 + t636 - t683 + t690 + t691 + t694 - t695 + t823;
    real_type t5066 = t3581 * t5065;
    real_type t5068 = t3597 * t41;
    real_type t5069 = t3572 * t5068;
    real_type t5071 = t1795 * t3597 - t4116 + t5069;
    real_type t5072 = t3581 * t5071;
    real_type t5073 = t3601 * t1800;
    real_type t5075 = t3599 * t5073 + t5072;
    real_type t5076 = t3564 * t5075;
    real_type t5080 = t3575 * t5068;
    real_type t5083 = t4092 + t5080 + t3597 * (-t37 + t97 - t45 + t33 - t48 + t3578 + t52);
    real_type t5085 = t3581 * t5083 + t4150;
    real_type t5086 = t3564 * t5085;
    real_type t5089 = t3993 * t813 + t1817 + t1819 + t1822 + t1824 + t4019 + t4629 + t570 - t583 + t587 + t588;
    real_type t5090 = t3581 * t5089;
    real_type t5094 = t3585 * t3987;
    real_type t5095 = t5094 * t3567;
    real_type t5096 = t3593 * t1832;
    real_type t5098 = t4529 * t3567;
    real_type t5101 = t3564 * t83;
    real_type t5102 = t3601 * t3566;
    real_type t5103 = t3641 * t3585;
    real_type t5106 = t4184 * t4952;
    real_type t5108 = XR__[15];
    real_type t5109 = t5108 * t3566;
    real_type t5110 = LR__[11];
    real_type t5113 = XR__[16];
    real_type t5114 = sin(t5113);
    real_type t5115 = t5114 * t3581;
    real_type t5116 = cos(t5113);
    real_type t5118 = -t3599 * t5116 + t5115;
    real_type t5120 = t3593 * t3601 * t5118;
    real_type t5121 = t5120 * t3567;
    real_type t5124 = t3581 * t5116 + t3599 * t5114;
    real_type t5125 = t5124 * t3567;
    real_type t5127 = LR__[12];
    real_type t5129 = t1868 * t5116;
    real_type t5130 = XR__[11];
    real_type t5131 = t5129 - t5130 - t1867;
    real_type t5133 = t5114 * t1873;
    real_type t5134 = XR__[10];
    real_type t5135 = t5133 - t5134;
    real_type t5138 = LR__[14];
    real_type t5139 = t5138 * (t3581 * t5131 - t3599 * t5135);
    real_type t5141 = t5116 * t1873;
    real_type t5142 = t5141 + t1867 + t5130;
    real_type t5145 = t1868 * t5114 + t5134;
    real_type t5148 = LR__[15];
    real_type t5149 = t5148 * (t3581 * t5145 + t3599 * t5142);
    real_type t5152 = -t1892 - XR__[14];
    real_type t5154 = XR__[13];
    real_type t5155 = t3599 * t5154;
    real_type t5157 = LR__[17];
    real_type t5158 = t5157 * (t3581 * t5152 + t5155);
    real_type t5160 = -t5152;
    real_type t5162 = t3581 * t5154;
    real_type t5164 = LR__[18];
    real_type t5165 = t5164 * (t3599 * t5160 + t5162);
    result__[ 359 ] = -t3825 * (-t3566 * t5016 - t3567 * t5013 - t3587) - t5026 * (-t3567 * t3674 - t3567 * t3679 - t3567 * t5022) - t3831 * (-2 * t4005 * t4054 + t3585 * (-t3567 * t5034 + 2 * t3567 * t5036) - t4022 * t3566 * t5044 - t3566 * t5048) - t3606 * (2 * t4254 * t3567 + t3585 * (-t3567 * t4262 + 2 * t4005 * t4029) - t4270 * t3567 - t4034 * t3567) - t3623 * (-t4031 * t4328 + t3585 * (-t3566 * t5076 - t4005 * t5066) - t3640 * t5086 - t3567 * t5090) - t3627 * (-t3567 * t5096 - t5095 + t5098) + t5103 * t5102 * t5101 - t5106 * t4177 - t5110 * t5109 * t4186 - t5127 * (t5121 - t5125) + t5139 * t3567 + t5149 * t3567 + t5158 * t3567 + t5165 * t3567;
    real_type t5208 = t5094 * t3645;
    real_type t5210 = t4529 * t3645;
    real_type t5213 = t3601 * t3644;
    real_type t5217 = t5108 * t3644;
    real_type t5220 = t5120 * t3645;
    real_type t5221 = t5124 * t3645;
    result__[ 360 ] = -t3825 * (t3644 * t5016 + t3645 * t5013 + t3648) - t5026 * (t3645 * t3674 + t3645 * t3679 + t3645 * t5022) - t3831 * (2 * t4194 * t4054 + t3585 * (t3645 * t5034 - 2 * t3645 * t5036) + t4022 * t3644 * t5044 + t3644 * t5048) - t3606 * (-2 * t4254 * t3645 + t3585 * (t3645 * t4262 - 2 * t4029 * t4194) + t4270 * t3645 + t4034 * t3645) - t3623 * (t4205 * t4328 + t3585 * (t3644 * t5076 + t4194 * t5066) + t3664 * t5086 + t3645 * t5090) - t3627 * (t3645 * t5096 + t5208 - t5210) - t5103 * t5213 * t5101 + t5106 * t4245 + t5110 * t5217 * t4186 - t5127 * (-t5220 + t5221) - t5139 * t3645 - t5149 * t3645 - t5158 * t3645 - t5165 * t3645;
    real_type t5228 = t5022 * t3672;
    real_type t5232 = t3684 * t3582;
    real_type t5233 = t5013 * t3672;
    real_type t5243 = -t3990;
    real_type t5245 = t3593 * t5243 * t3672;
    real_type t5253 = t3599 * t5071;
    real_type t5268 = t5108 * t3671;
    real_type t5271 = -t5124;
    real_type t5274 = t3593 * t3601 * t5271 * t3672;
    real_type t5275 = t5118 * t3672;
    result__[ 361 ] = -t3825 * (-t3620 * t3671 + t3675 + t5228) - t5026 * (-t3672 * t3828 - t5232 - t5233) - t3606 * (2 * t4023 * t3672 + t3585 * (t3672 * t4011 + t4412) - t5245 - t4021 * t3672) - t3623 * (t4276 * t3599 * t4088 + t3585 * (t3693 * t3599 * t5065 - t3671 * t3564 * (t3581 * t5073 - t5253)) - t3908 * t3564 * (-t3599 * t5083 + t4368) + t3672 * t3599 * t5089) - t5110 * t5268 * t4401 - t5127 * (t5274 - t5275) + t5138 * (-t3581 * t5135 - t3599 * t5131) * t3672 + t5148 * (t3581 * t5142 - t3599 * t5145) * t3672 + t5157 * (-t3599 * t5152 + t5162) * t3672 + t5164 * (t3581 * t5160 - t5155) * t3672;
    real_type t5296 = t3585 * t5012;
    real_type t5297 = t5296 * t3672;
    real_type t5301 = t3593 * t3673 * t3672;
    real_type t5302 = t3585 * t5021;
    real_type t5305 = t5026 * (-t3672 * t5302 + t5301);
    real_type t5319 = t3599 * t3672;
    real_type t5340 = t3593 * t3987 * t3672;
    real_type t5349 = t5127 * t3626;
    real_type t5350 = t5349 * t5275;
    result__[ 362 ] = -t3825 * (t3694 - t5297) - t5305 - t3831 * (-2 * t3684 * t4054 - t4022 * t5033 * t3672 - t3593 * (-t3672 * t5034 + 2 * t3672 * t5036) + 2 * t4439 * t5044) - t3606 * (-t3585 * t3672 * t4269 - t3593 * t4264 + 2 * t4029 * t4276 - 4 * t4418 * t5319) - t3623 * (2 * t4439 * t4329 - t4276 * t5066 - t3593 * (-t3671 * t5076 - t3693 * t5066) - t3714 * t5086) - t3627 * (-t1832 * t3585 * t3672 + t5340) - t3797 * t3601 * t3671 * t5101 + t4554 * t4465 - t5350;
    real_type t5352 = t3825 * t3596 * t3672;
    real_type t5354 = t5026 * t3672 * t3615;
    real_type t5360 = t3606 * (-t3701 - t5301);
    real_type t5362 = -t3683 * t3693 - t5297;
    real_type t5363 = t3623 * t5362;
    result__[ 363 ] = -t5352 - t5354 - t3831 * (-2 * t3672 * t4477 - 2 * t3894 + 2 * t3896) - t5360 - t5363 - t3627 * t87 * t3672;
    real_type t5370 = t5026 * t3677 * t3672;
    real_type t5373 = t3593 * t4266;
    real_type t5374 = t5373 * t3672;
    real_type t5385 = t5127 * t3593 * t5118 * t3672;
    result__[ 364 ] = t3825 * t3672 * t3599 * t106 + t5370 - t3606 * (t3585 * t3672 * t4259 + t5374) - t3623 * (-t1800 * t3599 * t3684 - t4367) + t3715 * t5101 - t5106 * t3672 - t5385;
    real_type t5386 = -t3608 - t3574;
    real_type t5387 = t5386 * t3581;
    real_type t5392 = t3846 * t3672;
    real_type t5393 = t5386 * t3599;
    real_type t5398 = t3630 * t3597;
    real_type t5407 = t3597 * t3633;
    real_type t5448 = -t5080 - t4092;
    real_type t5453 = -t4116 + t5069;
    result__[ 365 ] = -t3825 * (-t3593 * t3672 * t5387 - t3730) - t5026 * (-t3593 * t3672 * t5393 - t5392) - t3831 * (-2 * t3693 * t5398 + t3585 * (-t3593 * (-2 * t1735 * t3572 * t3575 + 2 * t4575 - 2 * t4576) * t3672 + 2 * t3672 * t5407) - t4324 * t3564 * (-2 * t1755 * t3572 * t3575 - 4 * t4561 + 4 * t4562) - t3671 * t3564 * (-2 * t4017 + 2 * t4561 - 2 * t4562)) - t3606 * (2 * t4022 * t4589 * t3672 + t3585 * (-t3630 * t3672 * t4042 + 2 * t3693 * t4585) - t4157 * t4375 - t4589 * t3672) - t3623 * (-t4276 * t3581 * t4613 + t3585 * (-t3693 * t3581 * (-2 * t3572 * t3575 * t674 - t4560 * t678 + t4084) - t3672 * t3581 * t5448) - t3693 * t3581 * t5453 - t3672 * t3581 * (-2 * t3572 * t3575 * t813 - t4560 * t798 + t4128));
    real_type t5466 = t3825 * t3714 * t3751;
    real_type t5468 = t5026 * t3714 * t3755;
    real_type t5485 = t3880 * t83 - t4042 * t47;
    real_type t5486 = t3564 * t5485;
    real_type t5488 = t4172 * t3672;
    real_type t5498 = t3585 * t82;
    result__[ 366 ] = -t5466 - t5468 - t3831 * (t3585 * (-2 * t3593 * t3672 * t553 - 2 * t3672 * t4687) - t4324 * t4698) - t3606 * (2 * t3564 * t4439 * t4662 - t3908 * t5486 - 2 * t4657 * t5319 + t5488) - t3623 * (-t3564 * t3581 * t4439 * t4697 - t3581 * t4276 * t711 - t4392 - t4651) - t3627 * t5498 * t4703;
    real_type t5501 = t5138 * t3671;
    real_type t5503 = t5148 * t3671;
    result__[ 367 ] = t4186 * t5501 + t4401 * t5503;
    result__[ 368 ] = t4186 * t5503 - t4401 * t5501;
    real_type t5507 = t5157 * t3671;
    real_type t5509 = t5164 * t3671;
    result__[ 369 ] = t4186 * t5507 + t4401 * t5509;
    result__[ 370 ] = t4186 * t5509 - t4401 * t5507;
    real_type t5513 = t5110 * t3671;
    result__[ 371 ] = -t5513 * t4186;
    real_type t5517 = t3593 * t3601 * t5124 * t3672;
    real_type t5518 = -t5118;
    real_type t5519 = t5518 * t3672;
    result__[ 372 ] = -t5127 * (t5517 - t5519) + t5138 * (-t1868 * t5115 - t3599 * t5141) * t3672 + t5148 * (-t1873 * t3599 * t5114 + t3581 * t5129) * t3672;
    real_type t5533 = t3593 * t5011;
    real_type t5534 = t3561 * t5533;
    real_type t5540 = t3561 * t3895;
    real_type t5591 = t3561 * t5094 * t3760;
    real_type t5595 = t3561 * t4529 * t3760;
    real_type t5598 = t3760 * t83;
    real_type t5607 = t5118 * t3760;
    real_type t5608 = t3561 * t3705;
    real_type t5609 = t5608 * t5607;
    result__[ 373 ] = -t3825 * (t3759 * t3781 * t5015 + t4719 * t5534 + t3765) - t5026 * (t3561 * t3679 * t3760 + t3776 * t5534 + t3776 * t5540) - t3831 * (2 * t4712 * t3759 * t4054 + t3585 * (t3561 * t3760 * t5034 - 2 * t4795 * t5036) + t4746 * t3759 * t5043 + t3781 * t3759 * t5047) - t3606 * (-2 * t4721 * t3776 + t3585 * (t3561 * t3760 * t4262 - 2 * t3759 * t4029 * t4712) + t3561 * t4270 * t3760 + t3561 * t4034 * t3760) - t3623 * (t4746 * t3759 * t4328 + t3585 * (t3759 * t3781 * t5075 + t3759 * t4712 * t5066) + t4712 * t3759 * t5085 + t4795 * t5090) - t3627 * (t3561 * t3760 * t5096 + t5591 - t5595) - t3959 * t3626 * t5598 + t3561 * t4184 * t4952 * t4792 + t3561 * t5110 * t5108 * t3776 - t5127 * (t3561 * t3760 * t5124 - t5609) - t3561 * t5139 * t3760 - t3561 * t5149 * t3760 - t3561 * t5158 * t3760 - t3561 * t5165 * t3760;
    real_type t5663 = t5094 * t3803;
    real_type t5665 = t4529 * t3803;
    real_type t5668 = t3601 * t3802;
    real_type t5672 = t5108 * t3802;
    real_type t5675 = t5120 * t3803;
    real_type t5676 = t5124 * t3803;
    result__[ 374 ] = -t3825 * (-t3802 * t5016 - t3803 * t5013 - t3806) - t5026 * (-t3674 * t3803 - t3679 * t3803 - t3803 * t5022) - t3831 * (-2 * t4805 * t4054 + t3585 * (-t3803 * t5034 + 2 * t3803 * t5036) - t4022 * t3802 * t5044 - t3802 * t5048) - t3606 * (2 * t4254 * t3803 + t3585 * (-t3803 * t4262 + 2 * t4029 * t4805) - t4270 * t3803 - t4034 * t3803) - t3623 * (-t4816 * t4328 + t3585 * (-t3802 * t5076 - t4805 * t5066) - t3822 * t5086 - t3803 * t5090) - t3627 * (-t3803 * t5096 - t5663 + t5665) + t5103 * t5668 * t5101 - t5106 * t4856 - t5110 * t5672 * t4186 - t5127 * (t5675 - t5676) + t5139 * t3803 + t5149 * t3803 + t5158 * t3803 + t5165 * t3803;
    real_type t5689 = -t3567 * t5302 - t3610 * t4005;
    real_type t5692 = t4005 * t3582;
    real_type t5695 = t3593 * t4045;
    real_type t5697 = t3585 * t4057;
    real_type t5701 = t3585 * t5243;
    real_type t5703 = t3593 * t4011;
    real_type t5705 = -t522 + t4000 - t4002 - t526 + t534 + t535 + t2447 + t2448;
    real_type t5706 = t3581 * t5705;
    real_type t5711 = t3597 * t29;
    real_type t5712 = t3575 * t5711;
    real_type t5715 = -t4092 + t5712 + t3597 * (t37 + t42 + t45 - t33 + t48 - t3578 - t52);
    real_type t5717 = t3599 * t5715 + t4368;
    real_type t5718 = t3564 * t5717;
    real_type t5720 = t3601 * t2466;
    real_type t5722 = t3581 * t5720 + t5253;
    real_type t5723 = t3564 * t5722;
    real_type t5725 = t683 - t3999 + t4080 + t636 + t689 - t691 + t2473 - t638;
    real_type t5726 = t3599 * t5725;
    real_type t5730 = t3627 * t4149;
    real_type t5732 = t3637 * t2483;
    real_type t5734 = t3641 * t553;
    real_type t5739 = t3593 * t709;
    real_type t5741 = t476 - t3577;
    real_type t5742 = t3585 * t5741;
    real_type t5745 = LR__[13];
    real_type t5747 = t3585 * t552;
    real_type t5749 = t3593 * t5741;
    real_type t5753 = t3575 * t23;
    real_type t5755 = t3564 * t3572;
    real_type t5756 = t23 * t3566;
    real_type t5759 = -t3593 * t5755 * t5756 + t3586 * t5753;
    real_type t5760 = LR__[16];
    real_type t5765 = t3585 * t5755 * t5756 + t4005 * t5753;
    result__[ 375 ] = -t3568 * (-t3567 * t3895 - t3567 * t5533) - t3825 * t5689 - t5026 * (t3567 * t5296 - t5692) - t3831 * (-t3567 * t5695 - t3567 * t5697) - t3606 * (-t3567 * t5701 - t3567 * t5703 + 2 * t3567 * t5706) - t3623 * (-t3567 * t5726 - t3640 * t5723 - t3854 * t5718) + t5730 * t3567 + t5732 * t3567 + t5734 * t3567 - t4962 - t4926 + t5110 * t3640 * t4176 - t5349 * t5125 - t5745 * (-t3567 * t5739 - t3567 * t5742) - t5148 * (-t3567 * t5747 - t3567 * t5749) - t5760 * t5759 - t5164 * t5765;
    real_type t5773 = t3610 * t4194 + t3645 * t5302;
    real_type t5776 = t4194 * t3582;
    real_type t5809 = t23 * t3644;
    real_type t5812 = t3593 * t5755 * t5809 - t3647 * t5753;
    real_type t5817 = -t3585 * t5755 * t5809 - t4194 * t5753;
    result__[ 376 ] = -t3568 * (t3645 * t3895 + t3645 * t5533) - t3825 * t5773 - t5026 * (-t3645 * t5296 + t5776) - t3831 * (t3645 * t5695 + t3645 * t5697) - t3606 * (t3645 * t5701 + t3645 * t5703 - 2 * t3645 * t5706) - t3623 * (t3645 * t5726 + t3664 * t5723 + t3873 * t5718) - t5730 * t3645 - t5732 * t3645 - t5734 * t3645 + t4970 + t4932 - t5110 * t3664 * t4176 + t5349 * t5221 - t5745 * (t3645 * t5739 + t3645 * t5742) - t5148 * (t3645 * t5747 + t3645 * t5749) - t5760 * t5812 - t5164 * t5817;
    result__[ 377 ] = -t3825 * t5362 - t5305 - t3606 * (t3585 * t3672 * t4269 - t3593 * t3672 * t4262 - 2 * t3599 * t3672 * t5705) - t3623 * (-t3714 * t3564 * (t3581 * t5715 - t4150) - t3908 * t3564 * (-t3599 * t5720 + t5072) - t3672 * t3581 * t5725) - t5350;
    real_type t5843 = t3585 * t5011;
    real_type t5848 = -t3610 * t3684 + t5228;
    real_type t5881 = t23 * t3671;
    real_type t5885 = -t3585 * t5755 * t5881 - t3693 * t5753;
    real_type t5886 = t5760 * t5885;
    real_type t5890 = -t3593 * t5755 * t5881 + t3684 * t5753;
    real_type t5891 = t5164 * t5890;
    result__[ 378 ] = -t3568 * (t3672 * t3835 - t3672 * t5843) - t3825 * t5848 - t5026 * (-t5233 - t5232) - t3831 * (-t3585 * t3672 * t4045 + t3593 * t3672 * t4057) - t3606 * (-t3585 * t3672 * t4011 + t5245) - t3623 * (-t3714 * t5723 + t3908 * t5718) + t5110 * t3714 * t4176 + t5127 * t3705 * t5124 * t3672 - t5745 * (-t3585 * t3672 * t709 + t3672 * t5749) - t5148 * (t3593 * t3672 * t552 - t3672 * t5742) - t5886 - t5891;
    real_type t5892 = -t5232 + t3686;
    result__[ 379 ] = -t3606 * t5892 - t3623 * (-t3675 - t5228);
    real_type t5901 = t3585 * t3988 * t3672;
    real_type t5912 = t5110 * t3593;
    real_type t5913 = t5912 * t3672;
    result__[ 380 ] = -t3831 * (-t3585 * t3672 * t563 - t5340) - t3606 * (t3593 * t3672 * t4009 - t5901) - t3623 * (-t2466 * t3581 * t3693 - t4452) + t3627 * t4146 * t3672 + t5913 - t5127 * t3585 * t5124 * t3672;
    real_type t5924 = -t3585 * t3672 * t5393 - t3693 * t3738;
    real_type t5928 = t3693 * t3728;
    real_type t5938 = t3572 * t5711 + t4116;
    real_type t5939 = t3599 * t5938;
    real_type t5940 = t3684 * t5939;
    real_type t5946 = -t5760 * t5885;
    real_type t5948 = -t5164 * t5890;
    result__[ 381 ] = -t3568 * (-t3593 * t3672 * t5386 - t3711) - t3825 * t5924 - t5026 * (t3585 * t3672 * t5387 - t5928) - t3606 * (-t3585 * t4416 * t5407 + t3593 * t4416 * t5398) - t3623 * (-t3599 * t3693 * t5448 - t5940) - t5946 - t5948;
    real_type t5950 = t3568 * t4461 * t3672;
    real_type t5952 = t3825 * t4782 * t5319;
    real_type t5954 = t5026 * t3908 * t3751;
    real_type t5957 = t3831 * t3593 * t4647 * t4703;
    real_type t5958 = -t4649;
    real_type t5973 = t5745 * t3585 * t3672;
    real_type t5975 = t5148 * t3593 * t3672;
    result__[ 382 ] = -t5950 + t5952 - t5954 - t5957 - t3606 * (-t3585 * t3672 * t5958 + 2 * t3672 * t4653) - t3623 * (-t3599 * t3672 * t4682 - t3714 * t5486) + t3627 * t4647 * t4703 - t5973 - t5975;
    result__[ 383 ] = -t5349 * t5519;
    real_type t5981 = t3561 * t5843;
    real_type t5984 = t3774 * t4712 + t3776 * t5981;
    real_type t5987 = t4712 * t3763;
    real_type t5990 = t3987 * t3760;
    real_type t6022 = t5124 * t3760;
    real_type t6038 = t3759 * t5753;
    real_type t6041 = t3671 * t3759 * t3572;
    real_type t6045 = t23 * t3561 * t3593 * t6041 - t3764 * t6038;
    real_type t6051 = -t23 * t3561 * t3585 * t6041 - t4712 * t6038;
    result__[ 384 ] = -t3568 * (t3760 * t5534 + t3760 * t5540) - t3825 * t5984 - t5026 * (-t4719 * t5981 + t5987) - t3831 * (t3561 * t3626 * t3760 * t563 + t5608 * t5990) - t3606 * (t3561 * t3760 * t5701 + t3561 * t3760 * t5703 - 2 * t4795 * t5706) - t3623 * (t3759 * t3764 * t5717 + t3759 * t4712 * t5722 + t4795 * t5726) - t3561 * t3627 * t3601 * t4764 - t3561 * t5732 * t3760 - t3561 * t3641 * t47 * t4786 + t5002 + t4945 - t3561 * t5912 * t4792 + t3561 * t5127 * t3626 * t6022 - t5745 * (t3561 * t3760 * t5739 + t3561 * t3760 * t5742) - t5148 * (t3561 * t3760 * t5747 + t3561 * t3760 * t5749) - t5760 * t6045 - t5164 * t6051;
    real_type t6059 = -t3610 * t4805 - t3803 * t5302;
    real_type t6062 = t4805 * t3582;
    real_type t6095 = t23 * t3802;
    real_type t6098 = -t3593 * t5755 * t6095 + t3805 * t5753;
    real_type t6103 = t3585 * t5755 * t6095 + t4805 * t5753;
    result__[ 385 ] = -t3568 * (-t3803 * t3895 - t3803 * t5533) - t3825 * t6059 - t5026 * (t3803 * t5296 - t6062) - t3831 * (-t3803 * t5695 - t3803 * t5697) - t3606 * (-t3803 * t5701 - t3803 * t5703 + 2 * t3803 * t5706) - t3623 * (-t3803 * t5726 - t3822 * t5723 - t3978 * t5718) + t5730 * t3803 + t5732 * t3803 + t5734 * t3803 - t5010 - t4951 + t5110 * t3822 * t4176 - t5349 * t5676 - t5745 * (-t3803 * t5739 - t3803 * t5742) - t5148 * (-t3803 * t5747 - t3803 * t5749) - t5760 * t6098 - t5164 * t6103;
    real_type t6105 = t3825 * t3615;
    real_type t6107 = t5026 * t3596;
    real_type t6109 = t3831 * t4070;
    real_type t6116 = t3585 * t3737;
    result__[ 386 ] = -t6105 * t3567 + t6107 * t3567 + t6109 * t3567 - t3606 * (t3567 * t3695 + t5692) - t3623 * t5689 - t3706 * t3625 - t3637 * (-t3567 * t3708 - t3567 * t6116) + t3855 * t3639 + t5148 * t3567 + t5164 * t3567;
    result__[ 387 ] = t6105 * t3645 - t6107 * t3645 - t6109 * t3645 - t3606 * (-t3645 * t3695 - t5776) - t3623 * t5773 + t3706 * t3658 - t3637 * (t3645 * t3708 + t3645 * t6116) - t3874 * t3639 - t5148 * t3645 - t5164 * t3645;
    result__[ 388 ] = -t5352 - t5354 - t5360 - t5363;
    result__[ 389 ] = t3606 * t5892 - t3623 * t5848 - t3628 * t3704 - t3637 * (t3593 * t3672 * t3737 - t3920) - t3909 * t3639;
    real_type t6149 = t3831 * t87 * t3672;
    result__[ 390 ] = -t3593 * t3627 * t3672 * t87 + t6149;
    real_type t6155 = t3585 * t3672 * t3731 + t5928;
    result__[ 391 ] = -t3606 * t6155 - t3623 * t5924 - t3637 * (-t3585 * t3672 * t5386 - t3593 * t3672 * t3745);
    result__[ 392 ] = t3623 * t4782 * t5319 + t3751 * t4986;
    result__[ 393 ] = t3932 * t3776 - t3561 * t5026 * t12 * t4719 - t3561 * t3831 * t3601 * t3785 - t3606 * (-t3561 * t3581 * t3585 * t3766 - t5987) - t3623 * t5984 + t3786 * t3705 * t3785 - t3637 * (t3561 * t3708 * t3760 + t3561 * t3760 * t6116) - t3561 * t5103 * t3796 - t3561 * t5148 * t3760 - t3561 * t5164 * t3760;
    result__[ 394 ] = -t6105 * t3803 + t6107 * t3803 + t6109 * t3803 - t3606 * (t3695 * t3803 + t6062) - t3623 * t6059 - t3706 * t3816 - t3637 * (-t3708 * t3803 - t3803 * t6116) + t3979 * t3639 + t5148 * t3803 + t5164 * t3803;
    real_type t6209 = t3825 * t3677;
    real_type t6211 = t3564 * t87;
    real_type t6215 = t3593 * t2966;
    real_type t6219 = t2971 * t3599;
    real_type t6220 = t3585 * t6219;
    real_type t6225 = t3581 * t2978;
    real_type t6230 = t3627 * t2984;
    real_type t6232 = t5110 * t3585;
    real_type t6235 = t5127 * t3593 * t5271;
    real_type t6237 = t3564 * t82;
    real_type t6238 = t5138 * t3566;
    result__[ 395 ] = t6209 * t3567 + t5026 * t3599 * t3566 * t6211 - t3831 * (-t3567 * t6215 - t5095 + t5098) - t3606 * (t3567 * t4513 + t3567 * t6220) - t3623 * (-t3567 * t5373 - t3586 * t6225) + t6230 * t3567 - t6232 * t3567 + t6235 * t3567 + t6238 * t6237;
    real_type t6258 = t5138 * t3644;
    result__[ 396 ] = -t6209 * t3645 - t5026 * t3599 * t3644 * t6211 - t3831 * (t3645 * t6215 + t5208 - t5210) - t3606 * (-t3645 * t4513 - t3645 * t6220) - t3623 * (t3645 * t5373 + t3647 * t6225) - t6230 * t3645 + t6232 * t3645 - t6235 * t3645 - t6258 * t6237;
    result__[ 397 ] = -t3825 * t3600 * t3672 + t5370 - t3606 * (t2971 * t3581 * t3585 * t3672 + t5374) - t3623 * (t2978 * t3599 * t3684 + t4514) + t5127 * t3593 * t5518 * t3672;
    result__[ 398 ] = -t3831 * (-t2966 * t3585 * t3672 + t5340) - t3606 * (-t3593 * t3672 * t6219 + t5901) - t3623 * (-t3585 * t3672 * t4266 + t3693 * t6225) + t5913 + t5127 * t3585 * t5271 * t3672;
    result__[ 399 ] = -t6149;
    result__[ 400 ] = t3593 * t3606 * t4382 * t4703 - t3593 * t3623 * t4387 * t4550 - t3831 * t4703 * t5498;
    result__[ 401 ] = t5385;
    real_type t6329 = t3561 * t5501;
    result__[ 402 ] = -t3561 * t3825 * t3581 * t3785 - t3561 * t5026 * t3599 * t3785 - t3831 * (t3561 * t3760 * t6215 + t5591 - t5595) - t3606 * (-t2971 * t3561 * t3585 * t3776 - t3561 * t3915 * t5990) - t3623 * (t3759 * t3764 * t6225 + t3768 * t5990) - t3561 * t6230 * t3760 + t3561 * t6232 * t3760 - t3561 * t5127 * t3593 * t5271 * t3760 - t6329 * t3759 * t82;
    real_type t6349 = t5138 * t3802;
    result__[ 403 ] = t6209 * t3803 + t5026 * t3599 * t3802 * t6211 - t3831 * (-t3803 * t6215 - t5663 + t5665) - t3606 * (t3803 * t4513 + t3803 * t6220) - t3623 * (-t3803 * t5373 - t3805 * t6225) + t6230 * t3803 - t6232 * t3803 + t6235 * t3803 + t6349 * t6237;
    real_type t6351 = -t5386;
    real_type t6352 = t3564 * t6351;
    real_type t6362 = t3585 * t3983;
    real_type t6365 = t3737 * t3597;
    real_type t6366 = t3593 * t6365;
    real_type t6371 = -t5448;
    real_type t6372 = t3599 * t6371;
    real_type t6377 = t3637 * t860;
    result__[ 404 ] = -t3568 * (-t3854 * t6352 - t3635) - t3825 * t3852 - t5026 * (t3567 * t3729 + t3567 * t3887) - t3606 * (t3567 * t3581 * t6366 - t3567 * t6351 * t6362 - t3567 * t4378) - t3623 * (-t3586 * t6372 - t4005 * t5939 - t4160) + t6377 * t3567 + t4926 + t5760 * t5759 + t5164 * t5765;
    result__[ 405 ] = -t3568 * (t3873 * t6352 + t3661) - t3825 * t3871 - t5026 * (-t3645 * t3729 - t3645 * t3887) - t3606 * (-t3581 * t3645 * t6366 + t3645 * t6351 * t6362 + t3645 * t4378) - t3623 * (t3647 * t6372 + t4194 * t5939 + t4235) - t6377 * t3645 - t4932 + t5760 * t5812 + t5164 * t5817;
    real_type t6411 = t6351 * t3672;
    result__[ 406 ] = -t3825 * t3889 - t5026 * (-t3672 * t3850 - t5392) - t3606 * (t3672 * t4159 + t4456 * t6411 - t5319 * t6366) - t3623 * (-t3581 * t3684 * t6371 - t3581 * t3693 * t5938 - t4379);
    real_type t6432 = t3585 * t6365 * t4416;
    result__[ 407 ] = -t3568 * (t3908 * t6352 - t3711) - t3825 * t3906 - t5026 * (t3672 * t4373 - t5928) - t3606 * (t4376 * t6411 + t6432) - t3623 * (t3693 * t6372 - t5940) - t5946 - t5948;
    result__[ 408 ] = -t3606 * (-t3581 * t3585 * t3672 * t6351 + t3581 * t3593 * t3672 * t3737) - t3623 * (-t3599 * t3684 * t6351 - t3903);
    result__[ 409 ] = -t3568 * (-t3672 * t6116 - t3709) - t3825 * t3926 - t5026 * t6155 - t3606 * (t3593 * t3597 * t4416 * t5386 - t6432) - t3623 * (-t3684 * t3599 * t5453 - t3693 * t3599 * (-t5712 + t4092)) - t5886 - t5891;
    result__[ 410 ] = -t3568 * (t3759 * t3764 * t6351 + t3792) - t3825 * t3956 - t5026 * (-t3760 * t3768 * t3848 - t3951 * t4719) - t3606 * (t3760 * t3983 * t4770 * t6351 + t3561 * t3760 * t4378 - t3944 * t4719 * t6365) - t3623 * (t3759 * t3764 * t6372 + t3759 * t4712 * t5939 + t4777) - t3561 * t6377 * t3760 - t4945 + t5760 * t6045 + t5164 * t6051;
    result__[ 411 ] = -t3568 * (-t3978 * t6352 - t3819) - t3825 * t3976 - t5026 * (t3729 * t3803 + t3803 * t3887) - t3606 * (t3581 * t3803 * t6366 - t3803 * t6351 * t6362 - t3803 * t4378) - t3623 * (-t3805 * t6372 - t4805 * t5939 - t4846) + t6377 * t3803 + t4951 + t5760 * t6098 + t5164 * t6103;
    real_type t6528 = t3831 * t3585;
    real_type t6532 = t3593 * t47 * t4384;
    real_type t6544 = t5745 * t3593;
    real_type t6546 = t5148 * t3585;
    result__[ 412 ] = -t3568 * t3640 * t3639 - t3825 * t3854 * t3755 + t5026 * t3854 * t3751 + t6528 * t5102 * t5101 - t3606 * (t3567 * t4391 + t3567 * t6532) - t3623 * (-t3293 * t3566 * t4186 - t3640 * t5486) + t3641 * t3566 * t3639 - t6544 * t3567 + t6546 * t3567;
    result__[ 413 ] = t3568 * t3664 * t3639 + t3825 * t3873 * t3755 - t5026 * t3873 * t3751 - t6528 * t5213 * t5101 - t3606 * (-t3645 * t4391 - t3645 * t6532) - t3623 * (t3293 * t3644 * t4186 + t3664 * t5486) - t3641 * t3644 * t3639 + t6544 * t3645 - t6546 * t3645;
    result__[ 414 ] = -t5466 - t5468 - t3606 * (-t3593 * t3672 * t4165 * t47 - t5488) - t3623 * (-t3564 * t3908 * t5958 - t3293 * t4416);
    result__[ 415 ] = -t3606 * t3672 * t4384 * t4461 + t3756 * t5486 - t5950 + t5952 - t5954 - t5957 - t5973 - t5975;
    result__[ 416 ] = -result__[392];
    result__[ 417 ] = -result__[400];
    result__[ 418 ] = t3561 * t3568 * t3593 * t3796 + t3561 * t3825 * t3714 * t3958 - t3561 * t5026 * t3714 * t3759 * t3750 - t4990 * t3626 * t5598 - t3606 * (-t3561 * t3750 * t4786 - t3760 * t4384 * t4783) - t3623 * (t3293 * t3599 * t4795 + t3759 * t4712 * t5485) - t3561 * t3641 * t3671 * t3795 + t3561 * t6544 * t3760 - t3561 * t6546 * t3760;
    result__[ 419 ] = -t3568 * t3822 * t3639 - t3825 * t3978 * t3755 + t5026 * t3978 * t3751 + t6528 * t5668 * t5101 - t3606 * (t3803 * t4391 + t3803 * t6532) - t3623 * (-t3293 * t3802 * t4186 - t3822 * t5486) + t3641 * t3802 * t3639 - t6544 * t3803 + t6546 * t3803;
    real_type t6636 = t5745 * t3567;
    result__[ 420 ] = -t6636;
    result__[ 421 ] = t5745 * t3645;
    real_type t6637 = t3561 * t5745;
    result__[ 422 ] = t6637 * t3760;
    real_type t6638 = t5745 * t3803;
    result__[ 423 ] = -t6638;
    real_type t6640 = t5148 * t3566;
    result__[ 424 ] = t4186 * t6640 - t4401 * t6238;
    real_type t6643 = t5148 * t3644;
    result__[ 425 ] = -t4186 * t6643 + t4401 * t6258;
    result__[ 426 ] = result__[367];
    real_type t6645 = t3759 * t3581;
    real_type t6647 = t3759 * t3599;
    real_type t6648 = t3561 * t5503;
    result__[ 427 ] = t6329 * t6645 - t6647 * t6648;
    real_type t6651 = t5148 * t3802;
    result__[ 428 ] = t4186 * t6651 - t4401 * t6349;
    result__[ 429 ] = -t4186 * t6238 - t4401 * t6640;
    result__[ 430 ] = t4186 * t6258 + t4401 * t6643;
    result__[ 431 ] = result__[368];
    result__[ 432 ] = t6329 * t6647 + t6645 * t6648;
    result__[ 433 ] = -t4186 * t6349 - t4401 * t6651;
    result__[ 434 ] = t5760 * t3567;
    result__[ 435 ] = -t5760 * t3645;
    result__[ 436 ] = -t3561 * t5760 * t3760;
    result__[ 437 ] = t5760 * t3803;
    real_type t6664 = t5157 * t3566;
    real_type t6666 = t5164 * t3566;
    result__[ 438 ] = t4186 * t6666 - t4401 * t6664;
    real_type t6668 = t5157 * t3644;
    real_type t6670 = t5164 * t3644;
    result__[ 439 ] = -t4186 * t6670 + t4401 * t6668;
    result__[ 440 ] = result__[369];
    real_type t6672 = t3561 * t5507;
    real_type t6674 = t3561 * t5509;
    result__[ 441 ] = t6645 * t6672 - t6647 * t6674;
    real_type t6676 = t5157 * t3802;
    real_type t6678 = t5164 * t3802;
    result__[ 442 ] = t4186 * t6678 - t4401 * t6676;
    result__[ 443 ] = -t4186 * t6664 - t4401 * t6666;
    result__[ 444 ] = t4186 * t6668 + t4401 * t6670;
    result__[ 445 ] = result__[370];
    result__[ 446 ] = t6645 * t6674 + t6647 * t6672;
    result__[ 447 ] = -t4186 * t6676 - t4401 * t6678;
    result__[ 448 ] = t3566 * t4401 * t5110 - t5133 * t6636;
    result__[ 449 ] = -t3644 * t4401 * t5110 + t5133 * result__[421];
    result__[ 450 ] = result__[371];
    result__[ 451 ] = -t5745 * t3672 * t5141;
    result__[ 452 ] = t3561 * t3671 * t3759 * t5133 * t5745 - t3561 * t5513 * t6645;
    result__[ 453 ] = t3802 * t4401 * t5110 - t5133 * t6638;
    real_type t6708 = t3564 * t5141;
    real_type t6711 = t1873 * t5124;
    real_type t6712 = t5138 * t6711;
    real_type t6714 = t1873 * t5118;
    real_type t6715 = t5148 * t6714;
    result__[ 454 ] = -t5127 * (-t3567 * t5271 - t5121) - t5745 * t5109 * t6708 + t6712 * t3567 + t6715 * t3567;
    result__[ 455 ] = -t5127 * (t3645 * t5271 + t5220) + t5745 * t5217 * t6708 - t6712 * t3645 - t6715 * t3645;
    result__[ 456 ] = -t5127 * (-t5274 - t5519) + t5138 * t6714 * t3672 + t5148 * t1873 * t5271 * t3672;
    result__[ 457 ] = t5350;
    result__[ 458 ] = result__[401];
    result__[ 459 ] = result__[451];
    result__[ 460 ] = -t5127 * (-t5517 - t5275) + t5745 * t5268 * t3564 * t5133 + t5138 * t1873 * t5518 * t3672 + t5148 * t6711 * t3672;
    result__[ 461 ] = -t5127 * (t3561 * t3760 * t5271 + t5609) + t6637 * t5268 * t3759 * t5141 - t3561 * t5138 * t1873 * t6022 - t3561 * t5148 * t1873 * t5607;
    result__[ 462 ] = -t5127 * (-t3803 * t5271 - t5675) - t5745 * t5672 * t6708 + t6712 * t3803 + t6715 * t3803;
    real_type t6761 = t3564 * t3516;
    real_type t6763 = LR__[34];
    result__[ 463 ] = t6763 * t3518 * t3566 * t6761;
    result__[ 464 ] = -t6763 * t3518 * t3644 * t6761;
    result__[ 465 ] = -t3561 * t6763 * t3518 * t3671 * t3759 * t3516;
    result__[ 466 ] = t6763 * t3518 * t3802 * t6761;
    real_type t6776 = LR__[33] * t3532;
    result__[ 467 ] = t6776 * t3567;
    result__[ 468 ] = -t6776 * t3645;
    result__[ 469 ] = -t3561 * t6776 * t3760;
    result__[ 470 ] = t6776 * t3803;
    real_type t6781 = LR__[35] * t3538;
    result__[ 471 ] = t6781 * t3567;
    result__[ 472 ] = -t6781 * t3645;
    result__[ 473 ] = -t3561 * t6781 * t3760;
    result__[ 474 ] = t6781 * t3803;
    real_type t6786 = LR__[36] * t3544;
    result__[ 475 ] = t6786 * t3567;
    result__[ 476 ] = -t6786 * t3645;
    result__[ 477 ] = -t3561 * t6786 * t3760;
    result__[ 478 ] = t6786 * t3803;
    real_type t6790 = LR__[37];
    result__[ 479 ] = t6790 * t3567;
    result__[ 480 ] = -t6790 * t3645;
    result__[ 481 ] = -t3561 * t6790 * t3760;
    result__[ 482 ] = t6790 * t3803;
    real_type t6794 = LR__[38];
    result__[ 483 ] = t6794 * t3567;
    result__[ 484 ] = -t6794 * t3645;
    result__[ 485 ] = -t3561 * t6794 * t3760;
    result__[ 486 ] = t6794 * t3803;
    #ifdef MECHATRONIX_DEBUG
    CHECK_NAN(result__,"DadjointBCDxp_sparse",487);
    #endif
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  integer
  General::DadjointBCDp_numRows() const
  { return 78; }

  integer
  General::DadjointBCDp_numCols() const
  { return 0; }

  integer
  General::DadjointBCDp_nnz() const
  { return 0; }

  void
  General::DadjointBCDp_pattern(
    integer iIndex[],
    integer jIndex[]
  ) const {

  }

  void
  General::DadjointBCDp_sparse(
    NodeType2 const             & LEFT__,
    NodeType2 const             & RIGHT__,
    P_const_pointer_type          P__,
    OMEGA_full_const_pointer_type OMEGA__,
    real_type                     result__[]
  ) const {
    // EMPTY!
  }

}

// EOF: General_Methods.cc
