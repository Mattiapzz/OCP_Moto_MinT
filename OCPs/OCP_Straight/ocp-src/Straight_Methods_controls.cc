/*-----------------------------------------------------------------------*\
 |  file: Straight_Methods.cc                                            |
 |                                                                       |
 |  version: 1.0   date 23/6/2020                                        |
 |                                                                       |
 |  Copyright (C) 2020                                                   |
 |                                                                       |
 |      Enrico Bertolazzi, Francesco Biral and Paolo Bosetti             |
 |      Dipartimento di Ingegneria Industriale                           |
 |      Universita` degli Studi di Trento                                |
 |      Via Sommarive 9, I-38123, Trento, Italy                          |
 |      email: enrico.bertolazzi@unitn.it                                |
 |             francesco.biral@unitn.it                                  |
 |             paolo.bosetti@unitn.it                                    |
\*-----------------------------------------------------------------------*/


#include "Straight.hh"
#include "Straight_Pars.hh"

using namespace std;
using Mechatronix::real_type;
using Mechatronix::integer;
using Mechatronix::ostream_type;

// user class in namespaces
using Mechatronix::Engine;
using Mechatronix::Road2D;


#if defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wunused-parameter"
#pragma clang diagnostic ignored "-Wsign-conversion"
#pragma clang diagnostic ignored "-Wunused-macros"
#elif defined(__llvm__) || defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wsign-conversion"
#pragma GCC diagnostic ignored "-Wunused-macros"
#elif defined(_MSC_VER)
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#endif

// map user defined functions and objects with macros
#define ALIAS_ISOAngle_R_DD(__t1) segmentRight.isoAngle_DD( __t1)
#define ALIAS_ISOAngle_R_D(__t1) segmentRight.isoAngle_D( __t1)
#define ALIAS_ISOAngle_R(__t1) segmentRight.isoAngle( __t1)
#define ALIAS_ISOAngle_L_DD(__t1) segmentLeft.isoAngle_DD( __t1)
#define ALIAS_ISOAngle_L_D(__t1) segmentLeft.isoAngle_D( __t1)
#define ALIAS_ISOAngle_L(__t1) segmentLeft.isoAngle( __t1)
#define ALIAS_ISOAngle_DD(__t1) segment.isoAngle_DD( __t1)
#define ALIAS_ISOAngle_D(__t1) segment.isoAngle_D( __t1)
#define ALIAS_ISOAngle(__t1) segment.isoAngle( __t1)
#define ALIAS_yISOright_R(__t1) segmentRight.isoRightY( __t1)
#define ALIAS_yISOright_L(__t1) segmentLeft.isoRightY( __t1)
#define ALIAS_yISOright(__t1) segment.isoRightY( __t1)
#define ALIAS_xISOright_R(__t1) segmentRight.isoRightX( __t1)
#define ALIAS_xISOright_L(__t1) segmentLeft.isoRightX( __t1)
#define ALIAS_xISOright(__t1) segment.isoRightX( __t1)
#define ALIAS_yISOleft_R(__t1) segmentRight.isoLeftY( __t1)
#define ALIAS_yISOleft_L(__t1) segmentLeft.isoLeftY( __t1)
#define ALIAS_yISOleft(__t1) segment.isoLeftY( __t1)
#define ALIAS_xISOleft_R(__t1) segmentRight.isoLeftX( __t1)
#define ALIAS_xISOleft_L(__t1) segmentLeft.isoLeftX( __t1)
#define ALIAS_xISOleft(__t1) segment.isoLeftX( __t1)
#define ALIAS_yISOMidLane_R_DD(__t1) segmentRight.isoY_DD( __t1)
#define ALIAS_yISOMidLane_R_D(__t1) segmentRight.isoY_D( __t1)
#define ALIAS_yISOMidLane_R(__t1) segmentRight.isoY( __t1)
#define ALIAS_yISOMidLane_L_DD(__t1) segmentLeft.isoY_DD( __t1)
#define ALIAS_yISOMidLane_L_D(__t1) segmentLeft.isoY_D( __t1)
#define ALIAS_yISOMidLane_L(__t1) segmentLeft.isoY( __t1)
#define ALIAS_yISOMidLane_DD(__t1) segment.isoY_DD( __t1)
#define ALIAS_yISOMidLane_D(__t1) segment.isoY_D( __t1)
#define ALIAS_yISOMidLane(__t1) segment.isoY( __t1)
#define ALIAS_xISOMidLane_R_DD(__t1) segmentRight.isoX_DD( __t1)
#define ALIAS_xISOMidLane_R_D(__t1) segmentRight.isoX_D( __t1)
#define ALIAS_xISOMidLane_R(__t1) segmentRight.isoX( __t1)
#define ALIAS_xISOMidLane_L_DD(__t1) segmentLeft.isoX_DD( __t1)
#define ALIAS_xISOMidLane_L_D(__t1) segmentLeft.isoX_D( __t1)
#define ALIAS_xISOMidLane_L(__t1) segmentLeft.isoX( __t1)
#define ALIAS_xISOMidLane_DD(__t1) segment.isoX_DD( __t1)
#define ALIAS_xISOMidLane_D(__t1) segment.isoX_D( __t1)
#define ALIAS_xISOMidLane(__t1) segment.isoX( __t1)
#define ALIAS_adherence_R(___dummy___) segmentRight.adherence()
#define ALIAS_adherence_L(___dummy___) segmentLeft.adherence()
#define ALIAS_adherence(___dummy___) segment.adherence()
#define ALIAS_sectionSpeedLimit_R(___dummy___) segmentRight.speedLimit()
#define ALIAS_sectionSpeedLimit_L(___dummy___) segmentLeft.speedLimit()
#define ALIAS_sectionSpeedLimit(___dummy___) segment.speedLimit()
#define ALIAS_rightWidth_R(__t1) segmentRight.rightWidth( __t1)
#define ALIAS_rightWidth_L(__t1) segmentLeft.rightWidth( __t1)
#define ALIAS_rightWidth(__t1) segment.rightWidth( __t1)
#define ALIAS_leftWidth_R_D(__t1) segmentRight.leftWidth_D( __t1)
#define ALIAS_leftWidth_R(__t1) segmentRight.leftWidth( __t1)
#define ALIAS_leftWidth_L_D(__t1) segmentLeft.leftWidth_D( __t1)
#define ALIAS_leftWidth_L(__t1) segmentLeft.leftWidth( __t1)
#define ALIAS_leftWidth_D(__t1) segment.leftWidth_D( __t1)
#define ALIAS_leftWidth(__t1) segment.leftWidth( __t1)
#define ALIAS_kappa_R_DD(__t1) segmentRight.saeCurvature_DD( __t1)
#define ALIAS_kappa_R_D(__t1) segmentRight.saeCurvature_D( __t1)
#define ALIAS_kappa_R(__t1) segmentRight.saeCurvature( __t1)
#define ALIAS_kappa_L_DD(__t1) segmentLeft.saeCurvature_DD( __t1)
#define ALIAS_kappa_L_D(__t1) segmentLeft.saeCurvature_D( __t1)
#define ALIAS_kappa_L(__t1) segmentLeft.saeCurvature( __t1)
#define ALIAS_kappa_DD(__t1) segment.saeCurvature_DD( __t1)
#define ALIAS_kappa_D(__t1) segment.saeCurvature_D( __t1)
#define ALIAS_kappa(__t1) segment.saeCurvature( __t1)
#define ALIAS_maxTorque_DD(__t1) pEngine -> maxTorqueOnWheelHub_DD( __t1)
#define ALIAS_maxTorque_D(__t1) pEngine -> maxTorqueOnWheelHub_D( __t1)
#define ALIAS_maxTorque(__t1) pEngine -> maxTorqueOnWheelHub( __t1)
#define ALIAS_roadLeftLateralBorder_DD(__t1) roadLeftLateralBorder.DD( __t1)
#define ALIAS_roadLeftLateralBorder_D(__t1) roadLeftLateralBorder.D( __t1)
#define ALIAS_roadRightLateralBorder_DD(__t1) roadRightLateralBorder.DD( __t1)
#define ALIAS_roadRightLateralBorder_D(__t1) roadRightLateralBorder.D( __t1)
#define ALIAS_MaxRollAngle_DD(__t1) MaxRollAngle.DD( __t1)
#define ALIAS_MaxRollAngle_D(__t1) MaxRollAngle.D( __t1)
#define ALIAS_MaxSteerAngle_DD(__t1) MaxSteerAngle.DD( __t1)
#define ALIAS_MaxSteerAngle_D(__t1) MaxSteerAngle.D( __t1)
#define ALIAS_LatSlipRear_DD(__t1) LatSlipRear.DD( __t1)
#define ALIAS_LatSlipRear_D(__t1) LatSlipRear.D( __t1)
#define ALIAS_LatSlipFront_DD(__t1) LatSlipFront.DD( __t1)
#define ALIAS_LatSlipFront_D(__t1) LatSlipFront.D( __t1)
#define ALIAS_LongSlipRear_DD(__t1) LongSlipRear.DD( __t1)
#define ALIAS_LongSlipRear_D(__t1) LongSlipRear.D( __t1)
#define ALIAS_LongSlipFront_DD(__t1) LongSlipFront.DD( __t1)
#define ALIAS_LongSlipFront_D(__t1) LongSlipFront.D( __t1)
#define ALIAS_RearWheelContact_DD(__t1) RearWheelContact.DD( __t1)
#define ALIAS_RearWheelContact_D(__t1) RearWheelContact.D( __t1)
#define ALIAS_FrontWheelContact_DD(__t1) FrontWheelContact.DD( __t1)
#define ALIAS_FrontWheelContact_D(__t1) FrontWheelContact.D( __t1)
#define ALIAS_OnlyTractionRear_DD(__t1) OnlyTractionRear.DD( __t1)
#define ALIAS_OnlyTractionRear_D(__t1) OnlyTractionRear.D( __t1)
#define ALIAS_OnlyBrakingRear_DD(__t1) OnlyBrakingRear.DD( __t1)
#define ALIAS_OnlyBrakingRear_D(__t1) OnlyBrakingRear.D( __t1)
#define ALIAS_OnlyBrakingFront_DD(__t1) OnlyBrakingFront.DD( __t1)
#define ALIAS_OnlyBrakingFront_D(__t1) OnlyBrakingFront.D( __t1)
#define ALIAS_tau__oControl_D_3(__t1, __t2, __t3) tau__oControl.D_3( __t1, __t2, __t3)
#define ALIAS_tau__oControl_D_2(__t1, __t2, __t3) tau__oControl.D_2( __t1, __t2, __t3)
#define ALIAS_tau__oControl_D_1(__t1, __t2, __t3) tau__oControl.D_1( __t1, __t2, __t3)
#define ALIAS_tau__oControl_D_3_3(__t1, __t2, __t3) tau__oControl.D_3_3( __t1, __t2, __t3)
#define ALIAS_tau__oControl_D_2_3(__t1, __t2, __t3) tau__oControl.D_2_3( __t1, __t2, __t3)
#define ALIAS_tau__oControl_D_2_2(__t1, __t2, __t3) tau__oControl.D_2_2( __t1, __t2, __t3)
#define ALIAS_tau__oControl_D_1_3(__t1, __t2, __t3) tau__oControl.D_1_3( __t1, __t2, __t3)
#define ALIAS_tau__oControl_D_1_2(__t1, __t2, __t3) tau__oControl.D_1_2( __t1, __t2, __t3)
#define ALIAS_tau__oControl_D_1_1(__t1, __t2, __t3) tau__oControl.D_1_1( __t1, __t2, __t3)
#define ALIAS_b__r__oControl_D_3(__t1, __t2, __t3) b__r__oControl.D_3( __t1, __t2, __t3)
#define ALIAS_b__r__oControl_D_2(__t1, __t2, __t3) b__r__oControl.D_2( __t1, __t2, __t3)
#define ALIAS_b__r__oControl_D_1(__t1, __t2, __t3) b__r__oControl.D_1( __t1, __t2, __t3)
#define ALIAS_b__r__oControl_D_3_3(__t1, __t2, __t3) b__r__oControl.D_3_3( __t1, __t2, __t3)
#define ALIAS_b__r__oControl_D_2_3(__t1, __t2, __t3) b__r__oControl.D_2_3( __t1, __t2, __t3)
#define ALIAS_b__r__oControl_D_2_2(__t1, __t2, __t3) b__r__oControl.D_2_2( __t1, __t2, __t3)
#define ALIAS_b__r__oControl_D_1_3(__t1, __t2, __t3) b__r__oControl.D_1_3( __t1, __t2, __t3)
#define ALIAS_b__r__oControl_D_1_2(__t1, __t2, __t3) b__r__oControl.D_1_2( __t1, __t2, __t3)
#define ALIAS_b__r__oControl_D_1_1(__t1, __t2, __t3) b__r__oControl.D_1_1( __t1, __t2, __t3)
#define ALIAS_b__f__oControl_D_3(__t1, __t2, __t3) b__f__oControl.D_3( __t1, __t2, __t3)
#define ALIAS_b__f__oControl_D_2(__t1, __t2, __t3) b__f__oControl.D_2( __t1, __t2, __t3)
#define ALIAS_b__f__oControl_D_1(__t1, __t2, __t3) b__f__oControl.D_1( __t1, __t2, __t3)
#define ALIAS_b__f__oControl_D_3_3(__t1, __t2, __t3) b__f__oControl.D_3_3( __t1, __t2, __t3)
#define ALIAS_b__f__oControl_D_2_3(__t1, __t2, __t3) b__f__oControl.D_2_3( __t1, __t2, __t3)
#define ALIAS_b__f__oControl_D_2_2(__t1, __t2, __t3) b__f__oControl.D_2_2( __t1, __t2, __t3)
#define ALIAS_b__f__oControl_D_1_3(__t1, __t2, __t3) b__f__oControl.D_1_3( __t1, __t2, __t3)
#define ALIAS_b__f__oControl_D_1_2(__t1, __t2, __t3) b__f__oControl.D_1_2( __t1, __t2, __t3)
#define ALIAS_b__f__oControl_D_1_1(__t1, __t2, __t3) b__f__oControl.D_1_1( __t1, __t2, __t3)
#define ALIAS_t__oControl_D_3(__t1, __t2, __t3) t__oControl.D_3( __t1, __t2, __t3)
#define ALIAS_t__oControl_D_2(__t1, __t2, __t3) t__oControl.D_2( __t1, __t2, __t3)
#define ALIAS_t__oControl_D_1(__t1, __t2, __t3) t__oControl.D_1( __t1, __t2, __t3)
#define ALIAS_t__oControl_D_3_3(__t1, __t2, __t3) t__oControl.D_3_3( __t1, __t2, __t3)
#define ALIAS_t__oControl_D_2_3(__t1, __t2, __t3) t__oControl.D_2_3( __t1, __t2, __t3)
#define ALIAS_t__oControl_D_2_2(__t1, __t2, __t3) t__oControl.D_2_2( __t1, __t2, __t3)
#define ALIAS_t__oControl_D_1_3(__t1, __t2, __t3) t__oControl.D_1_3( __t1, __t2, __t3)
#define ALIAS_t__oControl_D_1_2(__t1, __t2, __t3) t__oControl.D_1_2( __t1, __t2, __t3)
#define ALIAS_t__oControl_D_1_1(__t1, __t2, __t3) t__oControl.D_1_1( __t1, __t2, __t3)


namespace StraightDefine {

  /*\
   |    __ _
   |   / _` |
   |  | (_| |
   |   \__, |
   |   |___/
  \*/

  integer
  Straight::g_numEqns() const
  { return 4; }

  void
  Straight::g_eval(
    NodeType2 const    & NODE__,
    U_const_pointer_type U__,
    P_const_pointer_type P__,
    real_type            result__[]
  ) const {
    integer     i_segment = NODE__.i_segment;
    real_type const * Q__ = NODE__.q;
    real_type const * X__ = NODE__.x;
    real_type const * L__ = NODE__.lambda;
    Road2D::SegmentClass const & segment = pRoad->getSegmentByIndex(i_segment);
    real_type t8   = X__[38];
    real_type t9   = cos(t8);
    real_type t12  = sin(t8);
    real_type t17  = 1.0 / (-X__[1] * t12 + X__[0] * t9) * (X__[37] * Q__[1] - 1);
    real_type t19  = ModelPars[191];
    real_type t20  = ModelPars[33];
    real_type t21  = ALIAS_b__f__oControl_D_1(U__[0], t19, t20);
    result__[ 0   ] = -t21 * t17 - L__[33] * ModelPars[169];
    real_type t27  = ALIAS_b__r__oControl_D_1(U__[1], t19, t20);
    result__[ 1   ] = -t27 * t17 - L__[35] * ModelPars[170];
    real_type t31  = ALIAS_maxTorque(X__[17]);
    real_type t36  = ALIAS_t__oControl_D_1(U__[2], ModelPars[173], ModelPars[197]);
    result__[ 2   ] = -t36 * t17 + t31 * L__[34];
    real_type t42  = ModelPars[208];
    real_type t43  = ALIAS_tau__oControl_D_1(U__[3], -t42, t42);
    result__[ 3   ] = -t43 * t17 + L__[36] * ModelPars[213];
    #ifdef MECHATRONIX_DEBUG
    CHECK_NAN(result__,"g_eval",4);
    #endif
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  integer
  Straight::DgDxlp_numRows() const
  { return 4; }

  integer
  Straight::DgDxlp_numCols() const
  { return 78; }

  integer
  Straight::DgDxlp_nnz() const
  { return 21; }

  void
  Straight::DgDxlp_pattern(
    integer iIndex[],
    integer jIndex[]
  ) const {
    iIndex[ 0  ] = 0   ; jIndex[ 0  ] = 0   ;
    iIndex[ 1  ] = 0   ; jIndex[ 1  ] = 1   ;
    iIndex[ 2  ] = 0   ; jIndex[ 2  ] = 37  ;
    iIndex[ 3  ] = 0   ; jIndex[ 3  ] = 38  ;
    iIndex[ 4  ] = 0   ; jIndex[ 4  ] = 72  ;
    iIndex[ 5  ] = 1   ; jIndex[ 5  ] = 0   ;
    iIndex[ 6  ] = 1   ; jIndex[ 6  ] = 1   ;
    iIndex[ 7  ] = 1   ; jIndex[ 7  ] = 37  ;
    iIndex[ 8  ] = 1   ; jIndex[ 8  ] = 38  ;
    iIndex[ 9  ] = 1   ; jIndex[ 9  ] = 74  ;
    iIndex[ 10 ] = 2   ; jIndex[ 10 ] = 0   ;
    iIndex[ 11 ] = 2   ; jIndex[ 11 ] = 1   ;
    iIndex[ 12 ] = 2   ; jIndex[ 12 ] = 17  ;
    iIndex[ 13 ] = 2   ; jIndex[ 13 ] = 37  ;
    iIndex[ 14 ] = 2   ; jIndex[ 14 ] = 38  ;
    iIndex[ 15 ] = 2   ; jIndex[ 15 ] = 73  ;
    iIndex[ 16 ] = 3   ; jIndex[ 16 ] = 0   ;
    iIndex[ 17 ] = 3   ; jIndex[ 17 ] = 1   ;
    iIndex[ 18 ] = 3   ; jIndex[ 18 ] = 37  ;
    iIndex[ 19 ] = 3   ; jIndex[ 19 ] = 38  ;
    iIndex[ 20 ] = 3   ; jIndex[ 20 ] = 75  ;
  }

  void
  Straight::DgDxlp_sparse(
    NodeType2 const    & NODE__,
    U_const_pointer_type U__,
    P_const_pointer_type P__,
    real_type            result__[]
  ) const {
    integer     i_segment = NODE__.i_segment;
    real_type const * Q__ = NODE__.q;
    real_type const * X__ = NODE__.x;
    real_type const * L__ = NODE__.lambda;
    Road2D::SegmentClass const & segment = pRoad->getSegmentByIndex(i_segment);
    real_type t2   = Q__[1];
    real_type t5   = X__[38];
    real_type t6   = cos(t5);
    real_type t7   = X__[0];
    real_type t9   = sin(t5);
    real_type t10  = X__[1];
    real_type t12  = -t10 * t9 + t7 * t6;
    real_type t13  = t12 * t12;
    real_type t15  = 1.0 / t13 * (t2 * X__[37] - 1);
    real_type t17  = ModelPars[191];
    real_type t18  = ModelPars[33];
    real_type t19  = ALIAS_b__f__oControl_D_1(U__[0], t17, t18);
    result__[ 0   ] = t6 * t19 * t15;
    result__[ 1   ] = -t9 * t19 * t15;
    real_type t24  = 1.0 / t12 * t2;
    result__[ 2   ] = -t19 * t24;
    real_type t28  = -t10 * t6 - t7 * t9;
    result__[ 3   ] = t28 * t19 * t15;
    result__[ 4   ] = -ModelPars[169];
    real_type t32  = ALIAS_b__r__oControl_D_1(U__[1], t17, t18);
    result__[ 5   ] = t6 * t32 * t15;
    result__[ 6   ] = -t9 * t32 * t15;
    result__[ 7   ] = -t32 * t24;
    result__[ 8   ] = t28 * t32 * t15;
    result__[ 9   ] = -ModelPars[170];
    real_type t42  = ALIAS_t__oControl_D_1(U__[2], ModelPars[173], ModelPars[197]);
    result__[ 10  ] = t6 * t42 * t15;
    result__[ 11  ] = -t9 * t42 * t15;
    real_type t47  = X__[17];
    real_type t48  = ALIAS_maxTorque_D(t47);
    result__[ 12  ] = t48 * L__[34];
    result__[ 13  ] = -t42 * t24;
    result__[ 14  ] = t28 * t42 * t15;
    result__[ 15  ] = ALIAS_maxTorque(t47);
    real_type t52  = ModelPars[208];
    real_type t53  = ALIAS_tau__oControl_D_1(U__[3], -t52, t52);
    result__[ 16  ] = t6 * t53 * t15;
    result__[ 17  ] = -t9 * t53 * t15;
    result__[ 18  ] = -t53 * t24;
    result__[ 19  ] = t28 * t53 * t15;
    result__[ 20  ] = ModelPars[213];
    #ifdef MECHATRONIX_DEBUG
    CHECK_NAN(result__,"DgDxlp_sparse",21);
    #endif
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  integer
  Straight::DgDu_numRows() const
  { return 4; }

  integer
  Straight::DgDu_numCols() const
  { return 4; }

  integer
  Straight::DgDu_nnz() const
  { return 4; }

  void
  Straight::DgDu_pattern(
    integer iIndex[],
    integer jIndex[]
  ) const {
    iIndex[ 0  ] = 0   ; jIndex[ 0  ] = 0   ;
    iIndex[ 1  ] = 1   ; jIndex[ 1  ] = 1   ;
    iIndex[ 2  ] = 2   ; jIndex[ 2  ] = 2   ;
    iIndex[ 3  ] = 3   ; jIndex[ 3  ] = 3   ;
  }

  void
  Straight::DgDu_sparse(
    NodeType2 const    & NODE__,
    U_const_pointer_type U__,
    P_const_pointer_type P__,
    real_type            result__[]
  ) const {
    integer     i_segment = NODE__.i_segment;
    real_type const * Q__ = NODE__.q;
    real_type const * X__ = NODE__.x;
    real_type const * L__ = NODE__.lambda;
    Road2D::SegmentClass const & segment = pRoad->getSegmentByIndex(i_segment);
    real_type t5   = X__[38];
    real_type t6   = cos(t5);
    real_type t9   = sin(t5);
    real_type t14  = 1.0 / (X__[0] * t6 - X__[1] * t9) * (X__[37] * Q__[1] - 1);
    real_type t16  = ModelPars[191];
    real_type t17  = ModelPars[33];
    real_type t18  = ALIAS_b__f__oControl_D_1_1(U__[0], t16, t17);
    result__[ 0   ] = -t18 * t14;
    real_type t21  = ALIAS_b__r__oControl_D_1_1(U__[1], t16, t17);
    result__[ 1   ] = -t21 * t14;
    real_type t26  = ALIAS_t__oControl_D_1_1(U__[2], ModelPars[173], ModelPars[197]);
    result__[ 2   ] = -t26 * t14;
    real_type t29  = ModelPars[208];
    real_type t30  = ALIAS_tau__oControl_D_1_1(U__[3], -t29, t29);
    result__[ 3   ] = -t30 * t14;
    #ifdef MECHATRONIX_DEBUG
    CHECK_NAN(result__,"DgDu_sparse",4);
    #endif
  }

  /*\
   |   ____            _             _
   |  / ___|___  _ __ | |_ _ __ ___ | |___
   | | |   / _ \| '_ \| __| '__/ _ \| / __|
   | | |__| (_) | | | | |_| | | (_) | \__ \
   |  \____\___/|_| |_|\__|_|  \___/|_|___/
  \*/

  /*\
   |                      _
   |  _  _   _____ ____ _| |
   | | || | / -_) V / _` | |
   |  \_,_|_\___|\_/\__,_|_|
   |     |___|
  \*/
  integer
  Straight::u_numEqns() const
  { return 4; }

  void
  Straight::u_eval_analytic(
    NodeType2 const    & NODE__,
    P_const_pointer_type P__,
    U_pointer_type       U__
  ) const {
    integer     i_segment = NODE__.i_segment;
    real_type const * Q__ = NODE__.q;
    real_type const * X__ = NODE__.x;
    real_type const * L__ = NODE__.lambda;
    Road2D::SegmentClass const & segment = pRoad->getSegmentByIndex(i_segment);
    real_type t4   = X__[38];
    real_type t5   = cos(t4);
    real_type t8   = sin(t4);
    real_type t17  = 1.0 / (X__[37] * Q__[1] - 1) * (X__[0] * t5 - X__[1] * t8);
    real_type t19  = ModelPars[191];
    real_type t20  = ModelPars[33];
    U__[ iU_b__f__o ] = b__f__oControl.solve(-t17 * L__[33] * ModelPars[169], t19, t20);
    U__[ iU_b__r__o ] = b__r__oControl.solve(-t17 * L__[35] * ModelPars[170], t19, t20);
    real_type t27  = ALIAS_maxTorque(X__[17]);
    U__[ iU_t__o    ] = t__oControl.solve(t17 * t27 * L__[34], ModelPars[173], ModelPars[197]);
    real_type t36  = ModelPars[208];
    U__[ iU_tau__o  ] = tau__oControl.solve(t17 * L__[36] * ModelPars[213], -t36, t36);
  }

  void
  Straight::u_eval_analytic(
    NodeType2 const    & LEFT__,
    NodeType2 const    & RIGHT__,
    P_const_pointer_type P__,
    U_pointer_type       U__
  ) const {
    NodeType2 NODE__;
    real_type Q__[13];
    real_type X__[39];
    real_type L__[39];
    NODE__.i_segment = LEFT__.i_segment;
    NODE__.q         = Q__;
    NODE__.x         = X__;
    NODE__.lambda    = L__;
    // Qvars
    Q__[0] = (LEFT__.q[0]+RIGHT__.q[0])/2;
    Q__[1] = (LEFT__.q[1]+RIGHT__.q[1])/2;
    Q__[2] = (LEFT__.q[2]+RIGHT__.q[2])/2;
    Q__[3] = (LEFT__.q[3]+RIGHT__.q[3])/2;
    Q__[4] = (LEFT__.q[4]+RIGHT__.q[4])/2;
    Q__[5] = (LEFT__.q[5]+RIGHT__.q[5])/2;
    Q__[6] = (LEFT__.q[6]+RIGHT__.q[6])/2;
    Q__[7] = (LEFT__.q[7]+RIGHT__.q[7])/2;
    Q__[8] = (LEFT__.q[8]+RIGHT__.q[8])/2;
    Q__[9] = (LEFT__.q[9]+RIGHT__.q[9])/2;
    Q__[10] = (LEFT__.q[10]+RIGHT__.q[10])/2;
    Q__[11] = (LEFT__.q[11]+RIGHT__.q[11])/2;
    Q__[12] = (LEFT__.q[12]+RIGHT__.q[12])/2;
    // Xvars
    X__[0] = (LEFT__.x[0]+RIGHT__.x[0])/2;
    X__[1] = (LEFT__.x[1]+RIGHT__.x[1])/2;
    X__[2] = (LEFT__.x[2]+RIGHT__.x[2])/2;
    X__[3] = (LEFT__.x[3]+RIGHT__.x[3])/2;
    X__[4] = (LEFT__.x[4]+RIGHT__.x[4])/2;
    X__[5] = (LEFT__.x[5]+RIGHT__.x[5])/2;
    X__[6] = (LEFT__.x[6]+RIGHT__.x[6])/2;
    X__[7] = (LEFT__.x[7]+RIGHT__.x[7])/2;
    X__[8] = (LEFT__.x[8]+RIGHT__.x[8])/2;
    X__[9] = (LEFT__.x[9]+RIGHT__.x[9])/2;
    X__[10] = (LEFT__.x[10]+RIGHT__.x[10])/2;
    X__[11] = (LEFT__.x[11]+RIGHT__.x[11])/2;
    X__[12] = (LEFT__.x[12]+RIGHT__.x[12])/2;
    X__[13] = (LEFT__.x[13]+RIGHT__.x[13])/2;
    X__[14] = (LEFT__.x[14]+RIGHT__.x[14])/2;
    X__[15] = (LEFT__.x[15]+RIGHT__.x[15])/2;
    X__[16] = (LEFT__.x[16]+RIGHT__.x[16])/2;
    X__[17] = (LEFT__.x[17]+RIGHT__.x[17])/2;
    X__[18] = (LEFT__.x[18]+RIGHT__.x[18])/2;
    X__[19] = (LEFT__.x[19]+RIGHT__.x[19])/2;
    X__[20] = (LEFT__.x[20]+RIGHT__.x[20])/2;
    X__[21] = (LEFT__.x[21]+RIGHT__.x[21])/2;
    X__[22] = (LEFT__.x[22]+RIGHT__.x[22])/2;
    X__[23] = (LEFT__.x[23]+RIGHT__.x[23])/2;
    X__[24] = (LEFT__.x[24]+RIGHT__.x[24])/2;
    X__[25] = (LEFT__.x[25]+RIGHT__.x[25])/2;
    X__[26] = (LEFT__.x[26]+RIGHT__.x[26])/2;
    X__[27] = (LEFT__.x[27]+RIGHT__.x[27])/2;
    X__[28] = (LEFT__.x[28]+RIGHT__.x[28])/2;
    X__[29] = (LEFT__.x[29]+RIGHT__.x[29])/2;
    X__[30] = (LEFT__.x[30]+RIGHT__.x[30])/2;
    X__[31] = (LEFT__.x[31]+RIGHT__.x[31])/2;
    X__[32] = (LEFT__.x[32]+RIGHT__.x[32])/2;
    X__[33] = (LEFT__.x[33]+RIGHT__.x[33])/2;
    X__[34] = (LEFT__.x[34]+RIGHT__.x[34])/2;
    X__[35] = (LEFT__.x[35]+RIGHT__.x[35])/2;
    X__[36] = (LEFT__.x[36]+RIGHT__.x[36])/2;
    X__[37] = (LEFT__.x[37]+RIGHT__.x[37])/2;
    X__[38] = (LEFT__.x[38]+RIGHT__.x[38])/2;
    // Lvars
    L__[0] = (LEFT__.lambda[0]+RIGHT__.lambda[0])/2;
    L__[1] = (LEFT__.lambda[1]+RIGHT__.lambda[1])/2;
    L__[2] = (LEFT__.lambda[2]+RIGHT__.lambda[2])/2;
    L__[3] = (LEFT__.lambda[3]+RIGHT__.lambda[3])/2;
    L__[4] = (LEFT__.lambda[4]+RIGHT__.lambda[4])/2;
    L__[5] = (LEFT__.lambda[5]+RIGHT__.lambda[5])/2;
    L__[6] = (LEFT__.lambda[6]+RIGHT__.lambda[6])/2;
    L__[7] = (LEFT__.lambda[7]+RIGHT__.lambda[7])/2;
    L__[8] = (LEFT__.lambda[8]+RIGHT__.lambda[8])/2;
    L__[9] = (LEFT__.lambda[9]+RIGHT__.lambda[9])/2;
    L__[10] = (LEFT__.lambda[10]+RIGHT__.lambda[10])/2;
    L__[11] = (LEFT__.lambda[11]+RIGHT__.lambda[11])/2;
    L__[12] = (LEFT__.lambda[12]+RIGHT__.lambda[12])/2;
    L__[13] = (LEFT__.lambda[13]+RIGHT__.lambda[13])/2;
    L__[14] = (LEFT__.lambda[14]+RIGHT__.lambda[14])/2;
    L__[15] = (LEFT__.lambda[15]+RIGHT__.lambda[15])/2;
    L__[16] = (LEFT__.lambda[16]+RIGHT__.lambda[16])/2;
    L__[17] = (LEFT__.lambda[17]+RIGHT__.lambda[17])/2;
    L__[18] = (LEFT__.lambda[18]+RIGHT__.lambda[18])/2;
    L__[19] = (LEFT__.lambda[19]+RIGHT__.lambda[19])/2;
    L__[20] = (LEFT__.lambda[20]+RIGHT__.lambda[20])/2;
    L__[21] = (LEFT__.lambda[21]+RIGHT__.lambda[21])/2;
    L__[22] = (LEFT__.lambda[22]+RIGHT__.lambda[22])/2;
    L__[23] = (LEFT__.lambda[23]+RIGHT__.lambda[23])/2;
    L__[24] = (LEFT__.lambda[24]+RIGHT__.lambda[24])/2;
    L__[25] = (LEFT__.lambda[25]+RIGHT__.lambda[25])/2;
    L__[26] = (LEFT__.lambda[26]+RIGHT__.lambda[26])/2;
    L__[27] = (LEFT__.lambda[27]+RIGHT__.lambda[27])/2;
    L__[28] = (LEFT__.lambda[28]+RIGHT__.lambda[28])/2;
    L__[29] = (LEFT__.lambda[29]+RIGHT__.lambda[29])/2;
    L__[30] = (LEFT__.lambda[30]+RIGHT__.lambda[30])/2;
    L__[31] = (LEFT__.lambda[31]+RIGHT__.lambda[31])/2;
    L__[32] = (LEFT__.lambda[32]+RIGHT__.lambda[32])/2;
    L__[33] = (LEFT__.lambda[33]+RIGHT__.lambda[33])/2;
    L__[34] = (LEFT__.lambda[34]+RIGHT__.lambda[34])/2;
    L__[35] = (LEFT__.lambda[35]+RIGHT__.lambda[35])/2;
    L__[36] = (LEFT__.lambda[36]+RIGHT__.lambda[36])/2;
    L__[37] = (LEFT__.lambda[37]+RIGHT__.lambda[37])/2;
    L__[38] = (LEFT__.lambda[38]+RIGHT__.lambda[38])/2;
    this->u_eval_analytic( NODE__, P__, U__ );
  }

  /*\
   |   ___       ___      _                       _      _   _
   |  |   \ _  _|   \__ _| |_ __   __ _ _ _  __ _| |_  _| |_(_)__
   |  | |) | || | |) \ \ / | '_ \ / _` | ' \/ _` | | || |  _| / _|
   |  |___/ \_,_|___//_\_\_| .__/ \__,_|_||_\__,_|_|\_, |\__|_\__|
   |                       |_|                      |__/
  \*/
  void
  Straight::DuDxlp_full_analytic(
    NodeType2 const          & NODE__,
    P_const_pointer_type       P__,
    U_const_pointer_type       U__,
    MatrixWrapper<real_type> & DuDxlp
  ) const {
    integer     i_segment = NODE__.i_segment;
    real_type const * Q__ = NODE__.q;
    real_type const * X__ = NODE__.x;
    real_type const * L__ = NODE__.lambda;
    DuDxlp(0, 0) = -b__f__oControl.solve_rhs(-L__[33] * ModelPars[169] * (cos(X__[38]) * X__[0] - sin(X__[38]) * X__[1]) / (X__[37] * Q__[1] - 1), ModelPars[191], ModelPars[33]) * L__[33] * ModelPars[169] * cos(X__[38]) / (X__[37] * Q__[1] - 1);
    DuDxlp(1, 0) = -b__r__oControl.solve_rhs(-L__[35] * ModelPars[170] * (cos(X__[38]) * X__[0] - sin(X__[38]) * X__[1]) / (X__[37] * Q__[1] - 1), ModelPars[191], ModelPars[33]) * L__[35] * ModelPars[170] * cos(X__[38]) / (X__[37] * Q__[1] - 1);
    DuDxlp(2, 0) = t__oControl.solve_rhs(L__[34] * ALIAS_maxTorque(X__[17]) * (cos(X__[38]) * X__[0] - sin(X__[38]) * X__[1]) / (X__[37] * Q__[1] - 1), ModelPars[173], ModelPars[197]) * L__[34] * ALIAS_maxTorque(X__[17]) * cos(X__[38]) / (X__[37] * Q__[1] - 1);
    DuDxlp(3, 0) = tau__oControl.solve_rhs(L__[36] * ModelPars[213] * (cos(X__[38]) * X__[0] - sin(X__[38]) * X__[1]) / (X__[37] * Q__[1] - 1), -ModelPars[208], ModelPars[208]) * L__[36] * ModelPars[213] * cos(X__[38]) / (X__[37] * Q__[1] - 1);
    DuDxlp(0, 1) = b__f__oControl.solve_rhs(-L__[33] * ModelPars[169] * (cos(X__[38]) * X__[0] - sin(X__[38]) * X__[1]) / (X__[37] * Q__[1] - 1), ModelPars[191], ModelPars[33]) * L__[33] * ModelPars[169] * sin(X__[38]) / (X__[37] * Q__[1] - 1);
    DuDxlp(1, 1) = b__r__oControl.solve_rhs(-L__[35] * ModelPars[170] * (cos(X__[38]) * X__[0] - sin(X__[38]) * X__[1]) / (X__[37] * Q__[1] - 1), ModelPars[191], ModelPars[33]) * L__[35] * ModelPars[170] * sin(X__[38]) / (X__[37] * Q__[1] - 1);
    DuDxlp(2, 1) = -t__oControl.solve_rhs(L__[34] * ALIAS_maxTorque(X__[17]) * (cos(X__[38]) * X__[0] - sin(X__[38]) * X__[1]) / (X__[37] * Q__[1] - 1), ModelPars[173], ModelPars[197]) * L__[34] * ALIAS_maxTorque(X__[17]) * sin(X__[38]) / (X__[37] * Q__[1] - 1);
    DuDxlp(3, 1) = -tau__oControl.solve_rhs(L__[36] * ModelPars[213] * (cos(X__[38]) * X__[0] - sin(X__[38]) * X__[1]) / (X__[37] * Q__[1] - 1), -ModelPars[208], ModelPars[208]) * L__[36] * ModelPars[213] * sin(X__[38]) / (X__[37] * Q__[1] - 1);
    DuDxlp(0, 2) = 0;
    DuDxlp(1, 2) = 0;
    DuDxlp(2, 2) = 0;
    DuDxlp(3, 2) = 0;
    DuDxlp(0, 3) = 0;
    DuDxlp(1, 3) = 0;
    DuDxlp(2, 3) = 0;
    DuDxlp(3, 3) = 0;
    DuDxlp(0, 4) = 0;
    DuDxlp(1, 4) = 0;
    DuDxlp(2, 4) = 0;
    DuDxlp(3, 4) = 0;
    DuDxlp(0, 5) = 0;
    DuDxlp(1, 5) = 0;
    DuDxlp(2, 5) = 0;
    DuDxlp(3, 5) = 0;
    DuDxlp(0, 6) = 0;
    DuDxlp(1, 6) = 0;
    DuDxlp(2, 6) = 0;
    DuDxlp(3, 6) = 0;
    DuDxlp(0, 7) = 0;
    DuDxlp(1, 7) = 0;
    DuDxlp(2, 7) = 0;
    DuDxlp(3, 7) = 0;
    DuDxlp(0, 8) = 0;
    DuDxlp(1, 8) = 0;
    DuDxlp(2, 8) = 0;
    DuDxlp(3, 8) = 0;
    DuDxlp(0, 9) = 0;
    DuDxlp(1, 9) = 0;
    DuDxlp(2, 9) = 0;
    DuDxlp(3, 9) = 0;
    DuDxlp(0, 10) = 0;
    DuDxlp(1, 10) = 0;
    DuDxlp(2, 10) = 0;
    DuDxlp(3, 10) = 0;
    DuDxlp(0, 11) = 0;
    DuDxlp(1, 11) = 0;
    DuDxlp(2, 11) = 0;
    DuDxlp(3, 11) = 0;
    DuDxlp(0, 12) = 0;
    DuDxlp(1, 12) = 0;
    DuDxlp(2, 12) = 0;
    DuDxlp(3, 12) = 0;
    DuDxlp(0, 13) = 0;
    DuDxlp(1, 13) = 0;
    DuDxlp(2, 13) = 0;
    DuDxlp(3, 13) = 0;
    DuDxlp(0, 14) = 0;
    DuDxlp(1, 14) = 0;
    DuDxlp(2, 14) = 0;
    DuDxlp(3, 14) = 0;
    DuDxlp(0, 15) = 0;
    DuDxlp(1, 15) = 0;
    DuDxlp(2, 15) = 0;
    DuDxlp(3, 15) = 0;
    DuDxlp(0, 16) = 0;
    DuDxlp(1, 16) = 0;
    DuDxlp(2, 16) = 0;
    DuDxlp(3, 16) = 0;
    DuDxlp(0, 17) = 0;
    DuDxlp(1, 17) = 0;
    DuDxlp(2, 17) = t__oControl.solve_rhs(L__[34] * ALIAS_maxTorque(X__[17]) * (cos(X__[38]) * X__[0] - sin(X__[38]) * X__[1]) / (X__[37] * Q__[1] - 1), ModelPars[173], ModelPars[197]) * L__[34] * ALIAS_maxTorque_D(X__[17]) * (cos(X__[38]) * X__[0] - sin(X__[38]) * X__[1]) / (X__[37] * Q__[1] - 1);
    DuDxlp(3, 17) = 0;
    DuDxlp(0, 18) = 0;
    DuDxlp(1, 18) = 0;
    DuDxlp(2, 18) = 0;
    DuDxlp(3, 18) = 0;
    DuDxlp(0, 19) = 0;
    DuDxlp(1, 19) = 0;
    DuDxlp(2, 19) = 0;
    DuDxlp(3, 19) = 0;
    DuDxlp(0, 20) = 0;
    DuDxlp(1, 20) = 0;
    DuDxlp(2, 20) = 0;
    DuDxlp(3, 20) = 0;
    DuDxlp(0, 21) = 0;
    DuDxlp(1, 21) = 0;
    DuDxlp(2, 21) = 0;
    DuDxlp(3, 21) = 0;
    DuDxlp(0, 22) = 0;
    DuDxlp(1, 22) = 0;
    DuDxlp(2, 22) = 0;
    DuDxlp(3, 22) = 0;
    DuDxlp(0, 23) = 0;
    DuDxlp(1, 23) = 0;
    DuDxlp(2, 23) = 0;
    DuDxlp(3, 23) = 0;
    DuDxlp(0, 24) = 0;
    DuDxlp(1, 24) = 0;
    DuDxlp(2, 24) = 0;
    DuDxlp(3, 24) = 0;
    DuDxlp(0, 25) = 0;
    DuDxlp(1, 25) = 0;
    DuDxlp(2, 25) = 0;
    DuDxlp(3, 25) = 0;
    DuDxlp(0, 26) = 0;
    DuDxlp(1, 26) = 0;
    DuDxlp(2, 26) = 0;
    DuDxlp(3, 26) = 0;
    DuDxlp(0, 27) = 0;
    DuDxlp(1, 27) = 0;
    DuDxlp(2, 27) = 0;
    DuDxlp(3, 27) = 0;
    DuDxlp(0, 28) = 0;
    DuDxlp(1, 28) = 0;
    DuDxlp(2, 28) = 0;
    DuDxlp(3, 28) = 0;
    DuDxlp(0, 29) = 0;
    DuDxlp(1, 29) = 0;
    DuDxlp(2, 29) = 0;
    DuDxlp(3, 29) = 0;
    DuDxlp(0, 30) = 0;
    DuDxlp(1, 30) = 0;
    DuDxlp(2, 30) = 0;
    DuDxlp(3, 30) = 0;
    DuDxlp(0, 31) = 0;
    DuDxlp(1, 31) = 0;
    DuDxlp(2, 31) = 0;
    DuDxlp(3, 31) = 0;
    DuDxlp(0, 32) = 0;
    DuDxlp(1, 32) = 0;
    DuDxlp(2, 32) = 0;
    DuDxlp(3, 32) = 0;
    DuDxlp(0, 33) = 0;
    DuDxlp(1, 33) = 0;
    DuDxlp(2, 33) = 0;
    DuDxlp(3, 33) = 0;
    DuDxlp(0, 34) = 0;
    DuDxlp(1, 34) = 0;
    DuDxlp(2, 34) = 0;
    DuDxlp(3, 34) = 0;
    DuDxlp(0, 35) = 0;
    DuDxlp(1, 35) = 0;
    DuDxlp(2, 35) = 0;
    DuDxlp(3, 35) = 0;
    DuDxlp(0, 36) = 0;
    DuDxlp(1, 36) = 0;
    DuDxlp(2, 36) = 0;
    DuDxlp(3, 36) = 0;
    DuDxlp(0, 37) = b__f__oControl.solve_rhs(-L__[33] * ModelPars[169] * (cos(X__[38]) * X__[0] - sin(X__[38]) * X__[1]) / (X__[37] * Q__[1] - 1), ModelPars[191], ModelPars[33]) * L__[33] * ModelPars[169] * (cos(X__[38]) * X__[0] - sin(X__[38]) * X__[1]) * pow(X__[37] * Q__[1] - 1, -2) * Q__[1];
    DuDxlp(1, 37) = b__r__oControl.solve_rhs(-L__[35] * ModelPars[170] * (cos(X__[38]) * X__[0] - sin(X__[38]) * X__[1]) / (X__[37] * Q__[1] - 1), ModelPars[191], ModelPars[33]) * L__[35] * ModelPars[170] * (cos(X__[38]) * X__[0] - sin(X__[38]) * X__[1]) * pow(X__[37] * Q__[1] - 1, -2) * Q__[1];
    DuDxlp(2, 37) = -t__oControl.solve_rhs(L__[34] * ALIAS_maxTorque(X__[17]) * (cos(X__[38]) * X__[0] - sin(X__[38]) * X__[1]) / (X__[37] * Q__[1] - 1), ModelPars[173], ModelPars[197]) * L__[34] * ALIAS_maxTorque(X__[17]) * (cos(X__[38]) * X__[0] - sin(X__[38]) * X__[1]) * pow(X__[37] * Q__[1] - 1, -2) * Q__[1];
    DuDxlp(3, 37) = -tau__oControl.solve_rhs(L__[36] * ModelPars[213] * (cos(X__[38]) * X__[0] - sin(X__[38]) * X__[1]) / (X__[37] * Q__[1] - 1), -ModelPars[208], ModelPars[208]) * L__[36] * ModelPars[213] * (cos(X__[38]) * X__[0] - sin(X__[38]) * X__[1]) * pow(X__[37] * Q__[1] - 1, -2) * Q__[1];
    DuDxlp(0, 38) = -b__f__oControl.solve_rhs(-L__[33] * ModelPars[169] * (cos(X__[38]) * X__[0] - sin(X__[38]) * X__[1]) / (X__[37] * Q__[1] - 1), ModelPars[191], ModelPars[33]) * L__[33] * ModelPars[169] * (-cos(X__[38]) * X__[1] - sin(X__[38]) * X__[0]) / (X__[37] * Q__[1] - 1);
    DuDxlp(1, 38) = -b__r__oControl.solve_rhs(-L__[35] * ModelPars[170] * (cos(X__[38]) * X__[0] - sin(X__[38]) * X__[1]) / (X__[37] * Q__[1] - 1), ModelPars[191], ModelPars[33]) * L__[35] * ModelPars[170] * (-cos(X__[38]) * X__[1] - sin(X__[38]) * X__[0]) / (X__[37] * Q__[1] - 1);
    DuDxlp(2, 38) = t__oControl.solve_rhs(L__[34] * ALIAS_maxTorque(X__[17]) * (cos(X__[38]) * X__[0] - sin(X__[38]) * X__[1]) / (X__[37] * Q__[1] - 1), ModelPars[173], ModelPars[197]) * L__[34] * ALIAS_maxTorque(X__[17]) * (-cos(X__[38]) * X__[1] - sin(X__[38]) * X__[0]) / (X__[37] * Q__[1] - 1);
    DuDxlp(3, 38) = tau__oControl.solve_rhs(L__[36] * ModelPars[213] * (cos(X__[38]) * X__[0] - sin(X__[38]) * X__[1]) / (X__[37] * Q__[1] - 1), -ModelPars[208], ModelPars[208]) * L__[36] * ModelPars[213] * (-cos(X__[38]) * X__[1] - sin(X__[38]) * X__[0]) / (X__[37] * Q__[1] - 1);
    DuDxlp(0, 39) = 0;
    DuDxlp(1, 39) = 0;
    DuDxlp(2, 39) = 0;
    DuDxlp(3, 39) = 0;
    DuDxlp(0, 40) = 0;
    DuDxlp(1, 40) = 0;
    DuDxlp(2, 40) = 0;
    DuDxlp(3, 40) = 0;
    DuDxlp(0, 41) = 0;
    DuDxlp(1, 41) = 0;
    DuDxlp(2, 41) = 0;
    DuDxlp(3, 41) = 0;
    DuDxlp(0, 42) = 0;
    DuDxlp(1, 42) = 0;
    DuDxlp(2, 42) = 0;
    DuDxlp(3, 42) = 0;
    DuDxlp(0, 43) = 0;
    DuDxlp(1, 43) = 0;
    DuDxlp(2, 43) = 0;
    DuDxlp(3, 43) = 0;
    DuDxlp(0, 44) = 0;
    DuDxlp(1, 44) = 0;
    DuDxlp(2, 44) = 0;
    DuDxlp(3, 44) = 0;
    DuDxlp(0, 45) = 0;
    DuDxlp(1, 45) = 0;
    DuDxlp(2, 45) = 0;
    DuDxlp(3, 45) = 0;
    DuDxlp(0, 46) = 0;
    DuDxlp(1, 46) = 0;
    DuDxlp(2, 46) = 0;
    DuDxlp(3, 46) = 0;
    DuDxlp(0, 47) = 0;
    DuDxlp(1, 47) = 0;
    DuDxlp(2, 47) = 0;
    DuDxlp(3, 47) = 0;
    DuDxlp(0, 48) = 0;
    DuDxlp(1, 48) = 0;
    DuDxlp(2, 48) = 0;
    DuDxlp(3, 48) = 0;
    DuDxlp(0, 49) = 0;
    DuDxlp(1, 49) = 0;
    DuDxlp(2, 49) = 0;
    DuDxlp(3, 49) = 0;
    DuDxlp(0, 50) = 0;
    DuDxlp(1, 50) = 0;
    DuDxlp(2, 50) = 0;
    DuDxlp(3, 50) = 0;
    DuDxlp(0, 51) = 0;
    DuDxlp(1, 51) = 0;
    DuDxlp(2, 51) = 0;
    DuDxlp(3, 51) = 0;
    DuDxlp(0, 52) = 0;
    DuDxlp(1, 52) = 0;
    DuDxlp(2, 52) = 0;
    DuDxlp(3, 52) = 0;
    DuDxlp(0, 53) = 0;
    DuDxlp(1, 53) = 0;
    DuDxlp(2, 53) = 0;
    DuDxlp(3, 53) = 0;
    DuDxlp(0, 54) = 0;
    DuDxlp(1, 54) = 0;
    DuDxlp(2, 54) = 0;
    DuDxlp(3, 54) = 0;
    DuDxlp(0, 55) = 0;
    DuDxlp(1, 55) = 0;
    DuDxlp(2, 55) = 0;
    DuDxlp(3, 55) = 0;
    DuDxlp(0, 56) = 0;
    DuDxlp(1, 56) = 0;
    DuDxlp(2, 56) = 0;
    DuDxlp(3, 56) = 0;
    DuDxlp(0, 57) = 0;
    DuDxlp(1, 57) = 0;
    DuDxlp(2, 57) = 0;
    DuDxlp(3, 57) = 0;
    DuDxlp(0, 58) = 0;
    DuDxlp(1, 58) = 0;
    DuDxlp(2, 58) = 0;
    DuDxlp(3, 58) = 0;
    DuDxlp(0, 59) = 0;
    DuDxlp(1, 59) = 0;
    DuDxlp(2, 59) = 0;
    DuDxlp(3, 59) = 0;
    DuDxlp(0, 60) = 0;
    DuDxlp(1, 60) = 0;
    DuDxlp(2, 60) = 0;
    DuDxlp(3, 60) = 0;
    DuDxlp(0, 61) = 0;
    DuDxlp(1, 61) = 0;
    DuDxlp(2, 61) = 0;
    DuDxlp(3, 61) = 0;
    DuDxlp(0, 62) = 0;
    DuDxlp(1, 62) = 0;
    DuDxlp(2, 62) = 0;
    DuDxlp(3, 62) = 0;
    DuDxlp(0, 63) = 0;
    DuDxlp(1, 63) = 0;
    DuDxlp(2, 63) = 0;
    DuDxlp(3, 63) = 0;
    DuDxlp(0, 64) = 0;
    DuDxlp(1, 64) = 0;
    DuDxlp(2, 64) = 0;
    DuDxlp(3, 64) = 0;
    DuDxlp(0, 65) = 0;
    DuDxlp(1, 65) = 0;
    DuDxlp(2, 65) = 0;
    DuDxlp(3, 65) = 0;
    DuDxlp(0, 66) = 0;
    DuDxlp(1, 66) = 0;
    DuDxlp(2, 66) = 0;
    DuDxlp(3, 66) = 0;
    DuDxlp(0, 67) = 0;
    DuDxlp(1, 67) = 0;
    DuDxlp(2, 67) = 0;
    DuDxlp(3, 67) = 0;
    DuDxlp(0, 68) = 0;
    DuDxlp(1, 68) = 0;
    DuDxlp(2, 68) = 0;
    DuDxlp(3, 68) = 0;
    DuDxlp(0, 69) = 0;
    DuDxlp(1, 69) = 0;
    DuDxlp(2, 69) = 0;
    DuDxlp(3, 69) = 0;
    DuDxlp(0, 70) = 0;
    DuDxlp(1, 70) = 0;
    DuDxlp(2, 70) = 0;
    DuDxlp(3, 70) = 0;
    DuDxlp(0, 71) = 0;
    DuDxlp(1, 71) = 0;
    DuDxlp(2, 71) = 0;
    DuDxlp(3, 71) = 0;
    DuDxlp(0, 72) = -b__f__oControl.solve_rhs(-L__[33] * ModelPars[169] * (cos(X__[38]) * X__[0] - sin(X__[38]) * X__[1]) / (X__[37] * Q__[1] - 1), ModelPars[191], ModelPars[33]) * ModelPars[169] * (cos(X__[38]) * X__[0] - sin(X__[38]) * X__[1]) / (X__[37] * Q__[1] - 1);
    DuDxlp(1, 72) = 0;
    DuDxlp(2, 72) = 0;
    DuDxlp(3, 72) = 0;
    DuDxlp(0, 73) = 0;
    DuDxlp(1, 73) = 0;
    DuDxlp(2, 73) = t__oControl.solve_rhs(L__[34] * ALIAS_maxTorque(X__[17]) * (cos(X__[38]) * X__[0] - sin(X__[38]) * X__[1]) / (X__[37] * Q__[1] - 1), ModelPars[173], ModelPars[197]) * ALIAS_maxTorque(X__[17]) * (cos(X__[38]) * X__[0] - sin(X__[38]) * X__[1]) / (X__[37] * Q__[1] - 1);
    DuDxlp(3, 73) = 0;
    DuDxlp(0, 74) = 0;
    DuDxlp(1, 74) = -b__r__oControl.solve_rhs(-L__[35] * ModelPars[170] * (cos(X__[38]) * X__[0] - sin(X__[38]) * X__[1]) / (X__[37] * Q__[1] - 1), ModelPars[191], ModelPars[33]) * ModelPars[170] * (cos(X__[38]) * X__[0] - sin(X__[38]) * X__[1]) / (X__[37] * Q__[1] - 1);
    DuDxlp(2, 74) = 0;
    DuDxlp(3, 74) = 0;
    DuDxlp(0, 75) = 0;
    DuDxlp(1, 75) = 0;
    DuDxlp(2, 75) = 0;
    DuDxlp(3, 75) = tau__oControl.solve_rhs(L__[36] * ModelPars[213] * (cos(X__[38]) * X__[0] - sin(X__[38]) * X__[1]) / (X__[37] * Q__[1] - 1), -ModelPars[208], ModelPars[208]) * ModelPars[213] * (cos(X__[38]) * X__[0] - sin(X__[38]) * X__[1]) / (X__[37] * Q__[1] - 1);
    DuDxlp(0, 76) = 0;
    DuDxlp(1, 76) = 0;
    DuDxlp(2, 76) = 0;
    DuDxlp(3, 76) = 0;
    DuDxlp(0, 77) = 0;
    DuDxlp(1, 77) = 0;
    DuDxlp(2, 77) = 0;
    DuDxlp(3, 77) = 0;
  }

  void
  Straight::DuDxlp_full_analytic(
    NodeType2 const          & LEFT__,
    NodeType2 const          & RIGHT__,
    P_const_pointer_type       P__,
    U_const_pointer_type       U__,
    MatrixWrapper<real_type> & DuDxlp
  ) const {
    NodeType2 NODE__;
    real_type Q__[13];
    real_type X__[39];
    real_type L__[39];
    NODE__.i_segment = LEFT__.i_segment;
    NODE__.q         = Q__;
    NODE__.x         = X__;
    NODE__.lambda    = L__;
    // Qvars
    Q__[0] = (LEFT__.q[0]+RIGHT__.q[0])/2;
    Q__[1] = (LEFT__.q[1]+RIGHT__.q[1])/2;
    Q__[2] = (LEFT__.q[2]+RIGHT__.q[2])/2;
    Q__[3] = (LEFT__.q[3]+RIGHT__.q[3])/2;
    Q__[4] = (LEFT__.q[4]+RIGHT__.q[4])/2;
    Q__[5] = (LEFT__.q[5]+RIGHT__.q[5])/2;
    Q__[6] = (LEFT__.q[6]+RIGHT__.q[6])/2;
    Q__[7] = (LEFT__.q[7]+RIGHT__.q[7])/2;
    Q__[8] = (LEFT__.q[8]+RIGHT__.q[8])/2;
    Q__[9] = (LEFT__.q[9]+RIGHT__.q[9])/2;
    Q__[10] = (LEFT__.q[10]+RIGHT__.q[10])/2;
    Q__[11] = (LEFT__.q[11]+RIGHT__.q[11])/2;
    Q__[12] = (LEFT__.q[12]+RIGHT__.q[12])/2;
    // Xvars
    X__[0] = (LEFT__.x[0]+RIGHT__.x[0])/2;
    X__[1] = (LEFT__.x[1]+RIGHT__.x[1])/2;
    X__[2] = (LEFT__.x[2]+RIGHT__.x[2])/2;
    X__[3] = (LEFT__.x[3]+RIGHT__.x[3])/2;
    X__[4] = (LEFT__.x[4]+RIGHT__.x[4])/2;
    X__[5] = (LEFT__.x[5]+RIGHT__.x[5])/2;
    X__[6] = (LEFT__.x[6]+RIGHT__.x[6])/2;
    X__[7] = (LEFT__.x[7]+RIGHT__.x[7])/2;
    X__[8] = (LEFT__.x[8]+RIGHT__.x[8])/2;
    X__[9] = (LEFT__.x[9]+RIGHT__.x[9])/2;
    X__[10] = (LEFT__.x[10]+RIGHT__.x[10])/2;
    X__[11] = (LEFT__.x[11]+RIGHT__.x[11])/2;
    X__[12] = (LEFT__.x[12]+RIGHT__.x[12])/2;
    X__[13] = (LEFT__.x[13]+RIGHT__.x[13])/2;
    X__[14] = (LEFT__.x[14]+RIGHT__.x[14])/2;
    X__[15] = (LEFT__.x[15]+RIGHT__.x[15])/2;
    X__[16] = (LEFT__.x[16]+RIGHT__.x[16])/2;
    X__[17] = (LEFT__.x[17]+RIGHT__.x[17])/2;
    X__[18] = (LEFT__.x[18]+RIGHT__.x[18])/2;
    X__[19] = (LEFT__.x[19]+RIGHT__.x[19])/2;
    X__[20] = (LEFT__.x[20]+RIGHT__.x[20])/2;
    X__[21] = (LEFT__.x[21]+RIGHT__.x[21])/2;
    X__[22] = (LEFT__.x[22]+RIGHT__.x[22])/2;
    X__[23] = (LEFT__.x[23]+RIGHT__.x[23])/2;
    X__[24] = (LEFT__.x[24]+RIGHT__.x[24])/2;
    X__[25] = (LEFT__.x[25]+RIGHT__.x[25])/2;
    X__[26] = (LEFT__.x[26]+RIGHT__.x[26])/2;
    X__[27] = (LEFT__.x[27]+RIGHT__.x[27])/2;
    X__[28] = (LEFT__.x[28]+RIGHT__.x[28])/2;
    X__[29] = (LEFT__.x[29]+RIGHT__.x[29])/2;
    X__[30] = (LEFT__.x[30]+RIGHT__.x[30])/2;
    X__[31] = (LEFT__.x[31]+RIGHT__.x[31])/2;
    X__[32] = (LEFT__.x[32]+RIGHT__.x[32])/2;
    X__[33] = (LEFT__.x[33]+RIGHT__.x[33])/2;
    X__[34] = (LEFT__.x[34]+RIGHT__.x[34])/2;
    X__[35] = (LEFT__.x[35]+RIGHT__.x[35])/2;
    X__[36] = (LEFT__.x[36]+RIGHT__.x[36])/2;
    X__[37] = (LEFT__.x[37]+RIGHT__.x[37])/2;
    X__[38] = (LEFT__.x[38]+RIGHT__.x[38])/2;
    // Lvars
    L__[0] = (LEFT__.lambda[0]+RIGHT__.lambda[0])/2;
    L__[1] = (LEFT__.lambda[1]+RIGHT__.lambda[1])/2;
    L__[2] = (LEFT__.lambda[2]+RIGHT__.lambda[2])/2;
    L__[3] = (LEFT__.lambda[3]+RIGHT__.lambda[3])/2;
    L__[4] = (LEFT__.lambda[4]+RIGHT__.lambda[4])/2;
    L__[5] = (LEFT__.lambda[5]+RIGHT__.lambda[5])/2;
    L__[6] = (LEFT__.lambda[6]+RIGHT__.lambda[6])/2;
    L__[7] = (LEFT__.lambda[7]+RIGHT__.lambda[7])/2;
    L__[8] = (LEFT__.lambda[8]+RIGHT__.lambda[8])/2;
    L__[9] = (LEFT__.lambda[9]+RIGHT__.lambda[9])/2;
    L__[10] = (LEFT__.lambda[10]+RIGHT__.lambda[10])/2;
    L__[11] = (LEFT__.lambda[11]+RIGHT__.lambda[11])/2;
    L__[12] = (LEFT__.lambda[12]+RIGHT__.lambda[12])/2;
    L__[13] = (LEFT__.lambda[13]+RIGHT__.lambda[13])/2;
    L__[14] = (LEFT__.lambda[14]+RIGHT__.lambda[14])/2;
    L__[15] = (LEFT__.lambda[15]+RIGHT__.lambda[15])/2;
    L__[16] = (LEFT__.lambda[16]+RIGHT__.lambda[16])/2;
    L__[17] = (LEFT__.lambda[17]+RIGHT__.lambda[17])/2;
    L__[18] = (LEFT__.lambda[18]+RIGHT__.lambda[18])/2;
    L__[19] = (LEFT__.lambda[19]+RIGHT__.lambda[19])/2;
    L__[20] = (LEFT__.lambda[20]+RIGHT__.lambda[20])/2;
    L__[21] = (LEFT__.lambda[21]+RIGHT__.lambda[21])/2;
    L__[22] = (LEFT__.lambda[22]+RIGHT__.lambda[22])/2;
    L__[23] = (LEFT__.lambda[23]+RIGHT__.lambda[23])/2;
    L__[24] = (LEFT__.lambda[24]+RIGHT__.lambda[24])/2;
    L__[25] = (LEFT__.lambda[25]+RIGHT__.lambda[25])/2;
    L__[26] = (LEFT__.lambda[26]+RIGHT__.lambda[26])/2;
    L__[27] = (LEFT__.lambda[27]+RIGHT__.lambda[27])/2;
    L__[28] = (LEFT__.lambda[28]+RIGHT__.lambda[28])/2;
    L__[29] = (LEFT__.lambda[29]+RIGHT__.lambda[29])/2;
    L__[30] = (LEFT__.lambda[30]+RIGHT__.lambda[30])/2;
    L__[31] = (LEFT__.lambda[31]+RIGHT__.lambda[31])/2;
    L__[32] = (LEFT__.lambda[32]+RIGHT__.lambda[32])/2;
    L__[33] = (LEFT__.lambda[33]+RIGHT__.lambda[33])/2;
    L__[34] = (LEFT__.lambda[34]+RIGHT__.lambda[34])/2;
    L__[35] = (LEFT__.lambda[35]+RIGHT__.lambda[35])/2;
    L__[36] = (LEFT__.lambda[36]+RIGHT__.lambda[36])/2;
    L__[37] = (LEFT__.lambda[37]+RIGHT__.lambda[37])/2;
    L__[38] = (LEFT__.lambda[38]+RIGHT__.lambda[38])/2;
    this->DuDxlp_full_analytic( NODE__, P__, U__, DuDxlp );
  }

  /*\
   |   ___       ___      _                               _
   |  |   \ _  _|   \__ _| |_ __   _ _ _  _ _ __  ___ _ _(_)__
   |  | |) | || | |) \ \ / | '_ \ | ' \ || | '  \/ -_) '_| / _|
   |  |___/ \_,_|___//_\_\_| .__/ |_||_\_,_|_|_|_\___|_| |_\__|
   |                       |_|
  \*/

  bool
  Straight::DuDxlp_full_numeric(
    NodeType2 const          & NODE__,
    P_const_pointer_type       P__,
    U_const_pointer_type       U__,
    MatrixWrapper<real_type> & DuDxlp
  ) const {
    static integer DgDu_I[ 4 ], DgDu_J[ 4 ];
    static integer DgDxlp_I[ 21 ], DgDxlp_J[ 21 ];
    static bool    computed_pattern = false;
    if ( !computed_pattern ) {
      this->DgDu_pattern( DgDu_I, DgDu_J );
      this->DgDxlp_pattern( DgDxlp_I, DgDxlp_J );
      computed_pattern = true;
    }
    real_type DgDu_V[ 4 ], DgDxlp_V[ 21 ];
    this->DgDu_sparse( NODE__, U__, P__, DgDu_V );
    this->DgDxlp_sparse( NODE__, U__, P__, DgDxlp_V );

    integer   ipiv[ 4 ];
    real_type DgDu_storage[ 16 ];
    MatrixWrapper<real_type> DgDu( DgDu_storage, 4, 4, 4 );
    DgDu.zero_fill();
    DuDxlp.zero_fill();

    // fill DgDu
    DgDu( DgDu_I[ 0 ], DgDu_J[ 0 ] ) = DgDu_V[0];
    DgDu( DgDu_I[ 1 ], DgDu_J[ 1 ] ) = DgDu_V[1];
    DgDu( DgDu_I[ 2 ], DgDu_J[ 2 ] ) = DgDu_V[2];
    DgDu( DgDu_I[ 3 ], DgDu_J[ 3 ] ) = DgDu_V[3];
    // fill DgDxlp
    DuDxlp( DgDxlp_I[ 0 ], DgDxlp_J[ 0] ) = -DgDxlp_V[0];
    DuDxlp( DgDxlp_I[ 1 ], DgDxlp_J[ 1] ) = -DgDxlp_V[1];
    DuDxlp( DgDxlp_I[ 2 ], DgDxlp_J[ 2] ) = -DgDxlp_V[2];
    DuDxlp( DgDxlp_I[ 3 ], DgDxlp_J[ 3] ) = -DgDxlp_V[3];
    DuDxlp( DgDxlp_I[ 4 ], DgDxlp_J[ 4] ) = -DgDxlp_V[4];
    DuDxlp( DgDxlp_I[ 5 ], DgDxlp_J[ 5] ) = -DgDxlp_V[5];
    DuDxlp( DgDxlp_I[ 6 ], DgDxlp_J[ 6] ) = -DgDxlp_V[6];
    DuDxlp( DgDxlp_I[ 7 ], DgDxlp_J[ 7] ) = -DgDxlp_V[7];
    DuDxlp( DgDxlp_I[ 8 ], DgDxlp_J[ 8] ) = -DgDxlp_V[8];
    DuDxlp( DgDxlp_I[ 9 ], DgDxlp_J[ 9] ) = -DgDxlp_V[9];
    DuDxlp( DgDxlp_I[ 10 ], DgDxlp_J[ 10] ) = -DgDxlp_V[10];
    DuDxlp( DgDxlp_I[ 11 ], DgDxlp_J[ 11] ) = -DgDxlp_V[11];
    DuDxlp( DgDxlp_I[ 12 ], DgDxlp_J[ 12] ) = -DgDxlp_V[12];
    DuDxlp( DgDxlp_I[ 13 ], DgDxlp_J[ 13] ) = -DgDxlp_V[13];
    DuDxlp( DgDxlp_I[ 14 ], DgDxlp_J[ 14] ) = -DgDxlp_V[14];
    DuDxlp( DgDxlp_I[ 15 ], DgDxlp_J[ 15] ) = -DgDxlp_V[15];
    DuDxlp( DgDxlp_I[ 16 ], DgDxlp_J[ 16] ) = -DgDxlp_V[16];
    DuDxlp( DgDxlp_I[ 17 ], DgDxlp_J[ 17] ) = -DgDxlp_V[17];
    DuDxlp( DgDxlp_I[ 18 ], DgDxlp_J[ 18] ) = -DgDxlp_V[18];
    DuDxlp( DgDxlp_I[ 19 ], DgDxlp_J[ 19] ) = -DgDxlp_V[19];
    DuDxlp( DgDxlp_I[ 20 ], DgDxlp_J[ 20] ) = -DgDxlp_V[20];
    integer info = alglin::gesv( 4, 78, DgDu.get_data(), 4, ipiv, DuDxlp.get_data(), 4 );
    return info == 0;
  }

  bool
  Straight::DuDxlp_full_numeric(
    NodeType2 const          & LEFT__,
    NodeType2 const          & RIGHT__,
    P_const_pointer_type       P__,
    U_const_pointer_type       U__,
    MatrixWrapper<real_type> & DuDxlp
  ) const {
    NodeType2 NODE__;
    real_type Q__[13];
    real_type X__[39];
    real_type L__[39];
    NODE__.i_segment = LEFT__.i_segment;
    NODE__.q         = Q__;
    NODE__.x         = X__;
    NODE__.lambda    = L__;
    // Qvars
    Q__[0] = (LEFT__.q[0]+RIGHT__.q[0])/2;
    Q__[1] = (LEFT__.q[1]+RIGHT__.q[1])/2;
    Q__[2] = (LEFT__.q[2]+RIGHT__.q[2])/2;
    Q__[3] = (LEFT__.q[3]+RIGHT__.q[3])/2;
    Q__[4] = (LEFT__.q[4]+RIGHT__.q[4])/2;
    Q__[5] = (LEFT__.q[5]+RIGHT__.q[5])/2;
    Q__[6] = (LEFT__.q[6]+RIGHT__.q[6])/2;
    Q__[7] = (LEFT__.q[7]+RIGHT__.q[7])/2;
    Q__[8] = (LEFT__.q[8]+RIGHT__.q[8])/2;
    Q__[9] = (LEFT__.q[9]+RIGHT__.q[9])/2;
    Q__[10] = (LEFT__.q[10]+RIGHT__.q[10])/2;
    Q__[11] = (LEFT__.q[11]+RIGHT__.q[11])/2;
    Q__[12] = (LEFT__.q[12]+RIGHT__.q[12])/2;
    // Xvars
    X__[0] = (LEFT__.x[0]+RIGHT__.x[0])/2;
    X__[1] = (LEFT__.x[1]+RIGHT__.x[1])/2;
    X__[2] = (LEFT__.x[2]+RIGHT__.x[2])/2;
    X__[3] = (LEFT__.x[3]+RIGHT__.x[3])/2;
    X__[4] = (LEFT__.x[4]+RIGHT__.x[4])/2;
    X__[5] = (LEFT__.x[5]+RIGHT__.x[5])/2;
    X__[6] = (LEFT__.x[6]+RIGHT__.x[6])/2;
    X__[7] = (LEFT__.x[7]+RIGHT__.x[7])/2;
    X__[8] = (LEFT__.x[8]+RIGHT__.x[8])/2;
    X__[9] = (LEFT__.x[9]+RIGHT__.x[9])/2;
    X__[10] = (LEFT__.x[10]+RIGHT__.x[10])/2;
    X__[11] = (LEFT__.x[11]+RIGHT__.x[11])/2;
    X__[12] = (LEFT__.x[12]+RIGHT__.x[12])/2;
    X__[13] = (LEFT__.x[13]+RIGHT__.x[13])/2;
    X__[14] = (LEFT__.x[14]+RIGHT__.x[14])/2;
    X__[15] = (LEFT__.x[15]+RIGHT__.x[15])/2;
    X__[16] = (LEFT__.x[16]+RIGHT__.x[16])/2;
    X__[17] = (LEFT__.x[17]+RIGHT__.x[17])/2;
    X__[18] = (LEFT__.x[18]+RIGHT__.x[18])/2;
    X__[19] = (LEFT__.x[19]+RIGHT__.x[19])/2;
    X__[20] = (LEFT__.x[20]+RIGHT__.x[20])/2;
    X__[21] = (LEFT__.x[21]+RIGHT__.x[21])/2;
    X__[22] = (LEFT__.x[22]+RIGHT__.x[22])/2;
    X__[23] = (LEFT__.x[23]+RIGHT__.x[23])/2;
    X__[24] = (LEFT__.x[24]+RIGHT__.x[24])/2;
    X__[25] = (LEFT__.x[25]+RIGHT__.x[25])/2;
    X__[26] = (LEFT__.x[26]+RIGHT__.x[26])/2;
    X__[27] = (LEFT__.x[27]+RIGHT__.x[27])/2;
    X__[28] = (LEFT__.x[28]+RIGHT__.x[28])/2;
    X__[29] = (LEFT__.x[29]+RIGHT__.x[29])/2;
    X__[30] = (LEFT__.x[30]+RIGHT__.x[30])/2;
    X__[31] = (LEFT__.x[31]+RIGHT__.x[31])/2;
    X__[32] = (LEFT__.x[32]+RIGHT__.x[32])/2;
    X__[33] = (LEFT__.x[33]+RIGHT__.x[33])/2;
    X__[34] = (LEFT__.x[34]+RIGHT__.x[34])/2;
    X__[35] = (LEFT__.x[35]+RIGHT__.x[35])/2;
    X__[36] = (LEFT__.x[36]+RIGHT__.x[36])/2;
    X__[37] = (LEFT__.x[37]+RIGHT__.x[37])/2;
    X__[38] = (LEFT__.x[38]+RIGHT__.x[38])/2;
    // Lvars
    L__[0] = (LEFT__.lambda[0]+RIGHT__.lambda[0])/2;
    L__[1] = (LEFT__.lambda[1]+RIGHT__.lambda[1])/2;
    L__[2] = (LEFT__.lambda[2]+RIGHT__.lambda[2])/2;
    L__[3] = (LEFT__.lambda[3]+RIGHT__.lambda[3])/2;
    L__[4] = (LEFT__.lambda[4]+RIGHT__.lambda[4])/2;
    L__[5] = (LEFT__.lambda[5]+RIGHT__.lambda[5])/2;
    L__[6] = (LEFT__.lambda[6]+RIGHT__.lambda[6])/2;
    L__[7] = (LEFT__.lambda[7]+RIGHT__.lambda[7])/2;
    L__[8] = (LEFT__.lambda[8]+RIGHT__.lambda[8])/2;
    L__[9] = (LEFT__.lambda[9]+RIGHT__.lambda[9])/2;
    L__[10] = (LEFT__.lambda[10]+RIGHT__.lambda[10])/2;
    L__[11] = (LEFT__.lambda[11]+RIGHT__.lambda[11])/2;
    L__[12] = (LEFT__.lambda[12]+RIGHT__.lambda[12])/2;
    L__[13] = (LEFT__.lambda[13]+RIGHT__.lambda[13])/2;
    L__[14] = (LEFT__.lambda[14]+RIGHT__.lambda[14])/2;
    L__[15] = (LEFT__.lambda[15]+RIGHT__.lambda[15])/2;
    L__[16] = (LEFT__.lambda[16]+RIGHT__.lambda[16])/2;
    L__[17] = (LEFT__.lambda[17]+RIGHT__.lambda[17])/2;
    L__[18] = (LEFT__.lambda[18]+RIGHT__.lambda[18])/2;
    L__[19] = (LEFT__.lambda[19]+RIGHT__.lambda[19])/2;
    L__[20] = (LEFT__.lambda[20]+RIGHT__.lambda[20])/2;
    L__[21] = (LEFT__.lambda[21]+RIGHT__.lambda[21])/2;
    L__[22] = (LEFT__.lambda[22]+RIGHT__.lambda[22])/2;
    L__[23] = (LEFT__.lambda[23]+RIGHT__.lambda[23])/2;
    L__[24] = (LEFT__.lambda[24]+RIGHT__.lambda[24])/2;
    L__[25] = (LEFT__.lambda[25]+RIGHT__.lambda[25])/2;
    L__[26] = (LEFT__.lambda[26]+RIGHT__.lambda[26])/2;
    L__[27] = (LEFT__.lambda[27]+RIGHT__.lambda[27])/2;
    L__[28] = (LEFT__.lambda[28]+RIGHT__.lambda[28])/2;
    L__[29] = (LEFT__.lambda[29]+RIGHT__.lambda[29])/2;
    L__[30] = (LEFT__.lambda[30]+RIGHT__.lambda[30])/2;
    L__[31] = (LEFT__.lambda[31]+RIGHT__.lambda[31])/2;
    L__[32] = (LEFT__.lambda[32]+RIGHT__.lambda[32])/2;
    L__[33] = (LEFT__.lambda[33]+RIGHT__.lambda[33])/2;
    L__[34] = (LEFT__.lambda[34]+RIGHT__.lambda[34])/2;
    L__[35] = (LEFT__.lambda[35]+RIGHT__.lambda[35])/2;
    L__[36] = (LEFT__.lambda[36]+RIGHT__.lambda[36])/2;
    L__[37] = (LEFT__.lambda[37]+RIGHT__.lambda[37])/2;
    L__[38] = (LEFT__.lambda[38]+RIGHT__.lambda[38])/2;
    return this->DuDxlp_full_numeric( NODE__, P__, U__, DuDxlp );
  }

  /*\
   |   ____                                  _   _     _       _
   |  / ___|  ___  __ _ _ __ ___   ___ _ __ | |_| |   (_)_ __ | | __
   |  \___ \ / _ \/ _` | '_ ` _ \ / _ \ '_ \| __| |   | | '_ \| |/ /
   |   ___) |  __/ (_| | | | | | |  __/ | | | |_| |___| | | | |   <
   |  |____/ \___|\__, |_| |_| |_|\___|_| |_|\__|_____|_|_| |_|_|\_\
   |              |___/
  \*/

  integer
  Straight::segmentLink_numEqns() const
  { return 0; }

  void
  Straight::segmentLink_eval(
    NodeType const     & L,
    NodeType const     & R,
    P_const_pointer_type p,
    real_type            segmentLink[]
  ) const {
    LW_ERROR0("NON IMPLEMENTATA\n");
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  integer
  Straight::DsegmentLinkDxp_numRows() const
  { return 0; }

  integer
  Straight::DsegmentLinkDxp_numCols() const
  { return 0; }

  integer
  Straight::DsegmentLinkDxp_nnz() const
  { return 0; }

  void
  Straight::DsegmentLinkDxp_pattern(
    integer iIndex[],
    integer jIndex[]
  ) const {
    LW_ERROR0("NON IMPLEMENTATA\n");
  }

  void
  Straight::DsegmentLinkDxp_sparse(
    NodeType const     & L,
    NodeType const     & R,
    P_const_pointer_type p,
    real_type            DsegmentLinkDxp[]
  ) const {
    LW_ERROR0("NON IMPLEMENTATA\n");
  }

  /*\
   |     _
   |  _ | |_  _ _ __  _ __
   | | || | || | '  \| '_ \
   |  \__/ \_,_|_|_|_| .__/
   |                 |_|
  \*/

  integer
  Straight::jump_numEqns() const
  { return 78; }

  void
  Straight::jump_eval(
    NodeType2 const    & LEFT__,
    NodeType2 const    & RIGHT__,
    P_const_pointer_type P__,
    real_type            result__[]
  ) const {
    integer i_segment_left  = LEFT__.i_segment;
    real_type const * QL__  = LEFT__.q;
    real_type const * XL__  = LEFT__.x;
    real_type const * LL__  = LEFT__.lambda;
    integer i_segment_right = RIGHT__.i_segment;
    real_type const * QR__  = RIGHT__.q;
    real_type const * XR__  = RIGHT__.x;
    real_type const * LR__  = RIGHT__.lambda;
    Road2D::SegmentClass const & segmentLeft  = pRoad->getSegmentByIndex(i_segment_left);
    Road2D::SegmentClass const & segmentRight = pRoad->getSegmentByIndex(i_segment_right);
    real_type t1   = XR__[0];
    real_type t2   = XL__[0];
    result__[ 0   ] = t1 - t2;
    real_type t3   = XR__[1];
    real_type t4   = XL__[1];
    result__[ 1   ] = t3 - t4;
    result__[ 2   ] = XR__[2] - XL__[2];
    real_type t7   = XR__[3];
    real_type t8   = XL__[3];
    result__[ 3   ] = t7 - t8;
    real_type t9   = XR__[4];
    real_type t10  = XL__[4];
    result__[ 4   ] = t9 - t10;
    real_type t11  = XR__[5];
    real_type t12  = XL__[5];
    result__[ 5   ] = t11 - t12;
    real_type t13  = XR__[6];
    real_type t14  = XL__[6];
    result__[ 6   ] = t13 - t14;
    real_type t15  = XR__[7];
    real_type t16  = XL__[7];
    result__[ 7   ] = t15 - t16;
    real_type t17  = XR__[8];
    real_type t18  = XL__[8];
    result__[ 8   ] = t17 - t18;
    result__[ 9   ] = XR__[9] - XL__[9];
    real_type t21  = XR__[10];
    real_type t22  = XL__[10];
    result__[ 10  ] = t21 - t22;
    real_type t23  = XR__[11];
    real_type t24  = XL__[11];
    result__[ 11  ] = t23 - t24;
    result__[ 12  ] = XR__[12] - XL__[12];
    real_type t27  = XR__[13];
    real_type t28  = XL__[13];
    result__[ 13  ] = t27 - t28;
    real_type t29  = XR__[14];
    real_type t30  = XL__[14];
    result__[ 14  ] = t29 - t30;
    real_type t31  = XR__[15];
    real_type t32  = XL__[15];
    result__[ 15  ] = t31 - t32;
    real_type t33  = XR__[16];
    real_type t34  = XL__[16];
    result__[ 16  ] = t33 - t34;
    result__[ 17  ] = XR__[17] - XL__[17];
    result__[ 18  ] = XR__[18] - XL__[18];
    result__[ 19  ] = XR__[19] - XL__[19];
    result__[ 20  ] = XR__[20] - XL__[20];
    result__[ 21  ] = XR__[21] - XL__[21];
    result__[ 22  ] = XR__[22] - XL__[22];
    result__[ 23  ] = XR__[23] - XL__[23];
    result__[ 24  ] = XR__[24] - XL__[24];
    result__[ 25  ] = XR__[25] - XL__[25];
    result__[ 26  ] = XR__[26] - XL__[26];
    result__[ 27  ] = XR__[27] - XL__[27];
    result__[ 28  ] = XR__[28] - XL__[28];
    result__[ 29  ] = XR__[29] - XL__[29];
    result__[ 30  ] = XR__[30] - XL__[30];
    result__[ 31  ] = XR__[31] - XL__[31];
    result__[ 32  ] = XR__[32] - XL__[32];
    result__[ 33  ] = XR__[33] - XL__[33];
    result__[ 34  ] = XR__[34] - XL__[34];
    result__[ 35  ] = XR__[35] - XL__[35];
    result__[ 36  ] = XR__[36] - XL__[36];
    real_type t75  = XR__[37];
    real_type t76  = XL__[37];
    result__[ 37  ] = t75 - t76;
    real_type t77  = XR__[38];
    real_type t78  = XL__[38];
    result__[ 38  ] = t77 - t78;
    real_type t80  = ALIAS_kappa_L(QR__[0]);
    real_type t83  = 1.0 / (t80 * t75 - 1);
    real_type t84  = cos(t77);
    real_type t86  = sin(t77);
    real_type t88  = t1 * t84 - t3 * t86;
    real_type t89  = t88 * t83;
    real_type t90  = ModelPars[25];
    real_type t91  = LR__[0];
    real_type t94  = cos(t15);
    real_type t95  = ModelPars[76];
    real_type t97  = ModelPars[233];
    real_type t98  = t97 * t95 * t94;
    real_type t99  = sin(t15);
    real_type t100 = ModelPars[24];
    real_type t101 = ModelPars[219];
    real_type t102 = -t100 + t101;
    real_type t104 = ModelPars[78];
    real_type t105 = t100 * t104;
    real_type t106 = t95 * t102 - t105;
    real_type t107 = t106 * t99;
    real_type t108 = ModelPars[75];
    real_type t109 = ModelPars[71];
    real_type t110 = t109 * t108;
    real_type t111 = ModelPars[66];
    real_type t112 = cos(t111);
    real_type t114 = t97 * t95 * t112;
    real_type t115 = sin(t111);
    real_type t117 = -t95 * t102;
    real_type t118 = t117 + t105;
    real_type t119 = t118 * t115;
    real_type t120 = ModelPars[214];
    real_type t121 = cos(t120);
    real_type t122 = t121 * t110;
    real_type t123 = ModelPars[204];
    real_type t124 = ModelPars[77];
    real_type t125 = t124 * t123;
    real_type t126 = t124 * t17;
    real_type t127 = ModelPars[31];
    real_type t128 = t127 * t90;
    real_type t129 = -t98 + t107 - t110 + t114 + t119 + t122 + t125 - t126 - t128;
    real_type t130 = cos(t7);
    real_type t131 = t130 * t129;
    real_type t132 = ModelPars[65];
    real_type t133 = t9 + t132;
    real_type t134 = cos(t133);
    real_type t135 = t134 * t89;
    real_type t136 = t135 * t131;
    real_type t137 = t106 * t94;
    real_type t139 = t97 * t95 * t99;
    real_type t140 = t118 * t112;
    real_type t142 = t97 * t95 * t115;
    real_type t143 = sin(t120);
    real_type t144 = t143 * t110;
    real_type t145 = ModelPars[30];
    real_type t146 = t145 * t90;
    real_type t147 = t137 + t139 + t140 - t142 - t144 + t146;
    real_type t148 = t130 * t147;
    real_type t149 = sin(t133);
    real_type t151 = t149 * t148 * t89;
    real_type t152 = t130 * t90;
    real_type t153 = t11 * t152;
    real_type t154 = sin(t7);
    real_type t155 = ModelPars[149];
    real_type t156 = t155 * t124;
    real_type t157 = ModelPars[190];
    real_type t158 = ModelPars[220];
    real_type t160 = t158 * t157 + t156;
    real_type t161 = t160 * t154;
    real_type t163 = t13 * t161 + t153;
    real_type t166 = LR__[4];
    real_type t168 = t118 * t99;
    real_type t169 = t106 * t115;
    real_type t171 = t154 * (t98 + t168 + t110 - t114 + t169 - t122 - t125 + t126 + t128);
    real_type t176 = t154 * t90;
    real_type t177 = t11 * t176;
    real_type t178 = -t160;
    real_type t179 = t13 * t178;
    real_type t184 = -t135 * t171 - t149 * t147 * t154 * t89 - t88 * t83 * (t130 * t179 + t177);
    real_type t185 = LR__[5];
    real_type t187 = t160 * t89;
    real_type t188 = t134 * t13;
    real_type t189 = LR__[6];
    real_type t192 = t98 - t107;
    real_type t195 = t137 + t139;
    real_type t197 = t149 * t195 * t89;
    real_type t199 = LR__[7];
    real_type t201 = t83 * t124;
    real_type t202 = t149 * t88;
    real_type t203 = LR__[8];
    real_type t207 = ALIAS_kappa_L(QL__[0]);
    real_type t210 = 1.0 / (t207 * t76 - 1);
    real_type t211 = cos(t78);
    real_type t213 = sin(t78);
    real_type t215 = t2 * t211 - t4 * t213;
    real_type t216 = t215 * t210;
    real_type t217 = LL__[0];
    real_type t220 = cos(t16);
    real_type t222 = t97 * t95 * t220;
    real_type t223 = sin(t16);
    real_type t224 = t106 * t223;
    real_type t225 = t124 * t18;
    real_type t226 = -t222 + t224 - t110 + t114 + t119 + t122 + t125 - t225 - t128;
    real_type t227 = cos(t8);
    real_type t228 = t227 * t226;
    real_type t229 = t10 + t132;
    real_type t230 = cos(t229);
    real_type t231 = t230 * t216;
    real_type t232 = t231 * t228;
    real_type t233 = t106 * t220;
    real_type t235 = t97 * t95 * t223;
    real_type t236 = t233 + t235 + t140 - t142 - t144 + t146;
    real_type t237 = t227 * t236;
    real_type t238 = sin(t229);
    real_type t240 = t238 * t237 * t216;
    real_type t241 = t227 * t90;
    real_type t242 = t12 * t241;
    real_type t243 = sin(t8);
    real_type t244 = t160 * t243;
    real_type t246 = t14 * t244 + t242;
    real_type t249 = LL__[4];
    real_type t251 = t118 * t223;
    real_type t253 = t243 * (t222 + t251 + t110 - t114 + t169 - t122 - t125 + t225 + t128);
    real_type t258 = t243 * t90;
    real_type t259 = t12 * t258;
    real_type t260 = t14 * t178;
    real_type t265 = -t231 * t253 - t238 * t236 * t243 * t216 - t215 * t210 * (t227 * t260 + t259);
    real_type t266 = LL__[5];
    real_type t268 = t160 * t216;
    real_type t269 = t230 * t14;
    real_type t270 = LL__[6];
    real_type t273 = t222 - t224;
    real_type t276 = t233 + t235;
    real_type t278 = t238 * t276 * t216;
    real_type t280 = LL__[7];
    real_type t282 = t210 * t124;
    real_type t283 = t238 * t215;
    real_type t284 = LL__[8];
    result__[ 39  ] = -t91 * t90 * t89 + t166 * (-t163 * t89 + t136 - t151) + t185 * t184 + t189 * t188 * t187 + t199 * (-t134 * t192 * t89 - t197) + t203 * t202 * t201 + t217 * t90 * t216 - t249 * (-t246 * t216 + t232 - t240) - t266 * t265 - t270 * t269 * t268 - t280 * (-t230 * t273 * t216 - t278) - t284 * t283 * t282;
    real_type t287 = LR__[1];
    real_type t293 = LR__[3];
    real_type t299 = -t149 * t129 * t89 - t134 * t147 * t89;
    real_type t304 = t130 * t160;
    real_type t311 = -t192;
    real_type t312 = t311 * t154;
    real_type t315 = -t134 * t195 * t154 * t89 - t149 * t312 * t89;
    real_type t318 = t83 * t154 * t124;
    real_type t319 = t134 * t88;
    real_type t320 = t203 * t319;
    real_type t322 = LL__[1];
    real_type t328 = LL__[3];
    real_type t334 = -t238 * t226 * t216 - t230 * t236 * t216;
    real_type t339 = t227 * t160;
    real_type t346 = -t273;
    real_type t347 = t346 * t243;
    real_type t350 = -t230 * t276 * t243 * t216 - t238 * t347 * t216;
    real_type t353 = t210 * t243 * t124;
    real_type t354 = t230 * t215;
    real_type t355 = t284 * t354;
    result__[ 40  ] = -t287 * t90 * t89 + t293 * (t163 * t89 - t136 + t151) + t185 * t299 + t189 * (-t149 * t13 * t154 * t187 - t304 * t89) + t199 * t315 + t320 * t318 + t322 * t90 * t216 - t328 * (t246 * t216 - t232 + t240) - t266 * t334 - t270 * (-t238 * t14 * t243 * t268 - t339 * t216) - t280 * t350 - t355 * t353;
    real_type t359 = ModelPars[151];
    real_type t360 = t359 * t110;
    real_type t361 = t94 * t94;
    real_type t363 = ModelPars[164];
    real_type t364 = t97 * t117 - t363;
    real_type t365 = 2 * t364;
    real_type t371 = t100 * t100;
    real_type t372 = t104 * t371;
    real_type t373 = ModelPars[15];
    real_type t374 = ModelPars[20];
    real_type t375 = (t100 - t101 - t97) * (t100 - t101 + t97) * t95 + t372 - t373 + t374;
    real_type t377 = t99 * t375 * t94;
    real_type t378 = t112 * t112;
    real_type t380 = -t365 * t378;
    real_type t382 = t115 * t375 * t112;
    real_type t383 = t109 * t109;
    real_type t384 = t383 * t108;
    real_type t385 = ModelPars[14];
    real_type t386 = ModelPars[19];
    real_type t387 = t384 + t385 - t386;
    real_type t390 = (t387 * t143 + t360) * t121;
    real_type t391 = ModelPars[161];
    real_type t392 = t108 * t391;
    real_type t393 = t143 * t109;
    real_type t394 = t393 * t392;
    real_type t395 = ModelPars[23];
    real_type t396 = t395 + t155;
    real_type t398 = t124 * t396 * t17;
    real_type t399 = t396 * t124;
    real_type t400 = t123 * t399;
    real_type t401 = t145 * t128;
    real_type t402 = ModelPars[0];
    real_type t403 = t365 * t361 - t360 + t377 + t380 - t382 + t390 + t394 - t398 + t400 - t401 - t402;
    real_type t404 = t403 * t130;
    real_type t406 = -t375;
    real_type t407 = t406 * t361;
    real_type t409 = t364 * t99 * t94;
    real_type t410 = 2 * t409;
    real_type t411 = t375 * t378;
    real_type t413 = t364 * t115 * t112;
    real_type t414 = 2 * t413;
    real_type t415 = t121 * t121;
    real_type t416 = -t387;
    real_type t417 = t416 * t415;
    real_type t419 = t121 * t109 * t392;
    real_type t421 = t393 * t108 * t359;
    real_type t422 = t17 * t17;
    real_type t423 = t422 * t124;
    real_type t424 = t423 / 2;
    real_type t425 = ModelPars[127];
    real_type t427 = t124 * t425 * t17;
    real_type t430 = (t425 - t123 / 2) * t125;
    real_type t431 = t391 * t110;
    real_type t432 = t145 * t145;
    real_type t433 = t127 * t127;
    real_type t434 = -t432 + t433;
    real_type t436 = t434 * t90 / 2;
    real_type t437 = ModelPars[10];
    real_type t438 = t437 / 2;
    real_type t439 = ModelPars[12];
    real_type t440 = t439 / 2;
    real_type t441 = t407 + t410 + t411 - t414 + t417 - t419 + t421 + t424 - t427 + t430 + t384 + t431 + t436 + t385 - t386 + t438 - t440;
    real_type t443 = t149 * t89;
    real_type t446 = t11 * t130;
    real_type t448 = t155 * t399;
    real_type t449 = t158 * t158;
    real_type t450 = t157 * t449;
    real_type t452 = t157 * t158 * t395;
    real_type t453 = ModelPars[13];
    real_type t454 = ModelPars[17];
    real_type t455 = ModelPars[165];
    real_type t456 = ModelPars[166];
    real_type t457 = t448 + t450 + t452 - t453 + t454 - t455 + t456;
    real_type t460 = -t13 * t457 * t154 - t147 * t446;
    real_type t468 = t124 * t425 * t155;
    real_type t471 = t157 * t158 * ModelPars[234];
    real_type t472 = ModelPars[163];
    real_type t473 = -t124 * t17 * t155 + t468 - t471 - t472;
    real_type t474 = t473 * t154;
    real_type t476 = -t129 * t446 - t13 * t474;
    real_type t479 = t134 * t134;
    real_type t485 = t154 * t441;
    real_type t487 = t479 * t89;
    real_type t490 = t154 * t403;
    real_type t494 = t130 * t130;
    real_type t498 = t11 * t154;
    real_type t501 = t13 * t473;
    real_type t509 = t154 * t130;
    real_type t510 = t147 * t11;
    real_type t513 = t13 * t457;
    real_type t518 = t11 * t13;
    real_type t521 = t11 * t11;
    real_type t522 = t521 * t90;
    real_type t523 = 2 * t421;
    real_type t524 = t432 * t90;
    real_type t525 = ModelPars[11];
    real_type t526 = t407 + t410 + t411 - t414 - t522 + t417 + t523 - t524 + t384 + t385 - t386 + t437 - t525;
    real_type t529 = t13 * t160;
    real_type t537 = t101 * t100;
    real_type t539 = t101 * t101;
    real_type t541 = t97 * t97;
    real_type t543 = 2 * t371 - 4 * t537 + 2 * t539 - 2 * t541;
    real_type t545 = 2 * t372;
    real_type t546 = 2 * t373;
    real_type t547 = 2 * t374;
    real_type t548 = t95 * t543 + t545 - t546 + t547;
    real_type t552 = -t97 * t100 + t97 * t101;
    real_type t553 = 4 * t552;
    real_type t555 = 4 * t363;
    real_type t556 = t95 * t553 + t555;
    real_type t561 = -t95 * t543 - t545 + t546 - t547;
    real_type t562 = t378 * t561;
    real_type t565 = -t95 * t553 - t555;
    real_type t567 = t112 * t115 * t565;
    real_type t568 = 2 * t387;
    real_type t569 = t415 * t568;
    real_type t570 = 2 * t419;
    real_type t571 = 2 * t427;
    real_type t574 = t123 * t123;
    real_type t575 = -2 * t123 * t425 + t574;
    real_type t576 = t124 * t575;
    real_type t577 = 2 * t384;
    real_type t578 = 2 * t431;
    real_type t580 = -t434 * t90;
    real_type t581 = 2 * t385;
    real_type t582 = 2 * t386;
    real_type t583 = t94 * t99 * t556 + t361 * t548 - t423 - t437 + t439 - t523 + t562 + t567 + t569 + t570 + t571 + t576 - t577 - t578 + t580 - t581 + t582;
    real_type t589 = t378 * t556;
    real_type t591 = t112 * t115 * t561;
    real_type t593 = 2 * t360;
    real_type t595 = (t568 * t143 + t593) * t121;
    real_type t596 = -t396;
    real_type t598 = 2 * t124 * t596;
    real_type t600 = 2 * t394;
    real_type t603 = t123 * t155 + t123 * t395;
    real_type t605 = 2 * t124 * t603;
    real_type t606 = 2 * t401;
    real_type t607 = 2 * t402;
    real_type t608 = t94 * t99 * t548 + t17 * t598 + t361 * t565 + t589 + t591 - t593 + t595 + t600 + t605 - t606 - t607;
    real_type t612 = t97 * t95;
    real_type t613 = t612 * t11 * t94;
    real_type t614 = 2 * t613;
    real_type t615 = 2 * t102;
    real_type t617 = 2 * t105;
    real_type t618 = t615 * t95 - t617;
    real_type t619 = t11 * t618;
    real_type t621 = 2 * t114;
    real_type t624 = -t615 * t95 + t617;
    real_type t625 = t115 * t624;
    real_type t626 = 2 * t122;
    real_type t627 = 2 * t110;
    real_type t628 = 2 * t125;
    real_type t629 = 2 * t126;
    real_type t630 = 2 * t128;
    real_type t638 = t11 * t624;
    real_type t640 = t618 * t115;
    real_type t651 = t99 * t97 * t11 * t95;
    real_type t652 = 2 * t651;
    real_type t654 = 2 * t142;
    real_type t655 = 2 * t144;
    real_type t656 = 2 * t146;
    real_type t657 = t112 * t618 + t654 + t655 - t656;
    real_type t661 = t155 * t395;
    real_type t662 = t155 * t155;
    real_type t663 = -t661 - t662;
    real_type t672 = 2 * t124 * t663 - 2 * t450 - 2 * t452 + 2 * t453 - 2 * t454 + 2 * t455 - 2 * t456;
    real_type t677 = t112 * t624 - t654 - t655 + t656;
    real_type t682 = 2 * t537;
    real_type t683 = -t371 + t682 - t539 + t541;
    real_type t685 = t95 * t683 - t372 + t373 - t374;
    real_type t688 = -2 * t552;
    real_type t690 = 2 * t363;
    real_type t691 = t95 * t688 - t690;
    real_type t696 = -t95 * t683 + t372 - t373 + t374;
    real_type t697 = t378 * t696;
    real_type t700 = -t95 * t688 + t690;
    real_type t702 = t112 * t115 * t700;
    real_type t703 = t94 * t99 * t691 + t361 * t685 + t384 + t385 - t386 + t417 + t437 - t522 + t523 - t524 - t525 + t697 + t702;
    real_type t705 = 2 * t178;
    real_type t710 = -t124 * t575;
    real_type t711 = t432 + t433;
    real_type t712 = t711 * t90;
    real_type t713 = t130 * t498 * t13 * t705 + t494 * t703 + t423 + t522 - t523 + t525 - t570 - t571 + t578 + t710 + t712;
    real_type t719 = t124 * t662;
    real_type t723 = ModelPars[167];
    real_type t724 = t124 * t661 + t719 + t158 * (t395 + t158) * t157 + t723 + t453;
    real_type t730 = -t473;
    real_type t733 = t13 * t730;
    real_type t734 = t154 * t733;
    real_type t744 = t371 - t682 + t539 + t541;
    real_type t746 = ModelPars[18];
    real_type t747 = ModelPars[16];
    real_type t748 = t744 * t95 + t372 + t746 + t747;
    real_type t750 = t748 * t154 * t89;
    real_type t766 = t83 * t13;
    real_type t767 = t88 * t766;
    real_type t768 = t454 * t130;
    real_type t773 = t149 * t768 * t767 - t89 * t154 * t454;
    real_type t774 = LR__[9];
    real_type t776 = t83 * t154;
    real_type t777 = t746 * t88;
    real_type t778 = LR__[10];
    real_type t783 = t220 * t220;
    real_type t786 = t223 * t375 * t220;
    real_type t788 = t124 * t396 * t18;
    real_type t789 = t365 * t783 - t360 + t380 - t382 + t390 + t394 + t400 - t401 - t402 + t786 - t788;
    real_type t790 = t789 * t227;
    real_type t792 = t406 * t783;
    real_type t794 = t364 * t223 * t220;
    real_type t795 = 2 * t794;
    real_type t796 = t18 * t18;
    real_type t797 = t796 * t124;
    real_type t798 = t797 / 2;
    real_type t800 = t124 * t425 * t18;
    real_type t801 = t792 + t795 + t411 - t414 + t417 - t419 + t421 + t798 - t800 + t430 + t384 + t431 + t436 + t385 - t386 + t438 - t440;
    real_type t803 = t238 * t216;
    real_type t806 = t12 * t227;
    real_type t810 = -t14 * t457 * t243 - t236 * t806;
    real_type t817 = -t124 * t18 * t155 + t468 - t471 - t472;
    real_type t818 = t817 * t243;
    real_type t820 = -t14 * t818 - t226 * t806;
    real_type t823 = t230 * t230;
    real_type t829 = t243 * t801;
    real_type t831 = t823 * t216;
    real_type t834 = t243 * t789;
    real_type t838 = t227 * t227;
    real_type t842 = t12 * t243;
    real_type t845 = t14 * t817;
    real_type t853 = t243 * t227;
    real_type t854 = t236 * t12;
    real_type t857 = t14 * t457;
    real_type t862 = t12 * t14;
    real_type t865 = t12 * t12;
    real_type t866 = t865 * t90;
    real_type t867 = t792 + t795 + t411 - t414 - t866 + t417 + t523 - t524 + t384 + t385 - t386 + t437 - t525;
    real_type t870 = t14 * t160;
    real_type t880 = 2 * t800;
    real_type t881 = t220 * t223 * t556 + t783 * t548 - t437 + t439 - t523 + t562 + t567 + t569 + t570 + t576 - t577 - t578 + t580 - t581 + t582 - t797 + t880;
    real_type t888 = t220 * t223 * t548 + t18 * t598 + t783 * t565 + t589 + t591 - t593 + t595 + t600 + t605 - t606 - t607;
    real_type t892 = t612 * t12 * t220;
    real_type t893 = 2 * t892;
    real_type t894 = t12 * t618;
    real_type t896 = 2 * t225;
    real_type t904 = t12 * t624;
    real_type t916 = t223 * t97 * t12 * t95;
    real_type t917 = 2 * t916;
    real_type t931 = t220 * t223 * t691 + t783 * t685 + t384 + t385 - t386 + t417 + t437 + t523 - t524 - t525 + t697 + t702 - t866;
    real_type t936 = t227 * t842 * t14 * t705 + t838 * t931 - t523 + t525 - t570 + t578 + t710 + t712 + t797 + t866 - t880;
    real_type t946 = -t817;
    real_type t949 = t14 * t946;
    real_type t950 = t243 * t949;
    real_type t961 = t748 * t243 * t216;
    real_type t977 = t210 * t14;
    real_type t978 = t215 * t977;
    real_type t979 = t454 * t227;
    real_type t984 = -t216 * t243 * t454 + t238 * t979 * t978;
    real_type t985 = LL__[9];
    real_type t987 = t210 * t243;
    real_type t988 = t746 * t215;
    real_type t989 = LL__[10];
    result__[ 41  ] = t91 * t184 + t287 * t299 + t293 * (t404 * t89 + t134 * (-2 * t443 * t441 * t130 - t460 * t89) - t149 * t476 * t89 - 2 * t479 * t404 * t89) + t166 * (-2 * t487 * t130 * t485 + t134 * (2 * t443 * t130 * t490 - (2 * t13 * t473 * t494 - 2 * t498 * t131 - t501) * t89) - t149 * (-2 * t13 * t457 * t494 + 2 * t510 * t509 + t513) * t89 - t88 * t83 * (-t130 * t154 * t526 - 2 * t518 * t160 * t494 + t11 * t529)) + t185 * (-t487 * t494 * t583 + t134 * (-t443 * t494 * t608 - t88 * t83 * (t494 * (-t614 + t99 * t619 + t11 * (t621 + t625 + t626 - t627 + t628 - t629 - t630)) + 2 * t509 * t13 * t473 + t614 + t99 * t638 + t11 * (-t621 + t640 - t626 + t627 - t628 + t629 + t630))) - t202 * t83 * (t494 * (t11 * t657 + t94 * t638 - t652) + t509 * t13 * t672 + t94 * t619 + t652 + t11 * t677) - t88 * t83 * t713) + t189 * (-t134 * (t724 * t130 - t518 * t161) * t89 + t443 * t730 * t130 + t734 * t89) + t199 * (t134 * t312 * t11 * t89 - t149 * t498 * t195 * t89 - t750) + t203 * (2 * t149 * t124 * t88 * t83 * (-t13 * t130 * t155 / 2 + t498 / 2) + t154 * t399 * t89) + t774 * t773 - t778 * t777 * t776 - t217 * t265 - t322 * t334 - t328 * (t790 * t216 + t230 * (-2 * t803 * t801 * t227 - t810 * t216) - t238 * t820 * t216 - 2 * t823 * t790 * t216) - t249 * (-2 * t831 * t227 * t829 + t230 * (2 * t803 * t227 * t834 - (2 * t14 * t817 * t838 - 2 * t842 * t228 - t845) * t216) - t238 * (-2 * t14 * t457 * t838 + 2 * t854 * t853 + t857) * t216 - t215 * t210 * (-2 * t862 * t160 * t838 - t227 * t243 * t867 + t12 * t870)) - t266 * (-t831 * t838 * t881 + t230 * (-t803 * t838 * t888 - t215 * t210 * (t838 * (-t893 + t223 * t894 + t12 * (t621 + t625 + t626 - t627 + t628 - t896 - t630)) + 2 * t853 * t14 * t817 + t893 + t223 * t904 + t12 * (-t621 + t640 - t626 + t627 - t628 + t896 + t630))) - t283 * t210 * (t838 * (t12 * t657 + t220 * t904 - t917) + t853 * t14 * t672 + t220 * t894 + t917 + t12 * t677) - t215 * t210 * t936) - t270 * (-t230 * (t724 * t227 - t862 * t244) * t216 + t803 * t946 * t227 + t950 * t216) - t280 * (t230 * t347 * t12 * t216 - t238 * t842 * t276 * t216 - t961) - t284 * (2 * t238 * t124 * t215 * t210 * (-t14 * t227 * t155 / 2 + t842 / 2) + t243 * t399 * t216) - t985 * t984 + t989 * t988 * t987;
    result__[ 42  ] = LL__[19] * t216 - LR__[19] * t89;
    result__[ 43  ] = LL__[20] * t216 - LR__[20] * t89;
    result__[ 44  ] = LL__[21] * t216 - LR__[21] * t89;
    result__[ 45  ] = LL__[22] * t216 - LR__[22] * t89;
    result__[ 46  ] = LL__[23] * t216 - LR__[23] * t89;
    result__[ 47  ] = LL__[24] * t216 - LR__[24] * t89;
    result__[ 48  ] = LL__[25] * t216 - LR__[25] * t89;
    result__[ 49  ] = LL__[26] * t216 - LR__[26] * t89;
    result__[ 50  ] = LL__[27] * t216 - LR__[27] * t89;
    result__[ 51  ] = LL__[28] * t216 - LR__[28] * t89;
    result__[ 52  ] = LL__[29] * t216 - LR__[29] * t89;
    result__[ 53  ] = LL__[30] * t216 - LR__[30] * t89;
    result__[ 54  ] = LL__[31] * t216 - LR__[31] * t89;
    result__[ 55  ] = LL__[32] * t216 - LR__[32] * t89;
    real_type t1048 = t83 * t130;
    real_type t1056 = t778 * t746 * t89;
    real_type t1057 = t210 * t227;
    real_type t1065 = t989 * t746 * t216;
    result__[ 56  ] = -t166 * t777 * t1048 + t249 * t988 * t1057 - t185 * t777 * t776 - t199 * t746 * t89 + t280 * t746 * t216 + t266 * t988 * t987 - t1056 + t1065;
    real_type t1066 = t134 * t454;
    real_type t1078 = t774 * t88 * t83 * t454;
    real_type t1079 = t230 * t454;
    real_type t1091 = t985 * t215 * t210 * t454;
    result__[ 57  ] = t293 * t1066 * t767 + t166 * (-t443 * t154 * t454 * t13 - t768 * t89) + t185 * t773 - t1078 - t328 * t1079 * t978 - t249 * (-t803 * t243 * t454 * t14 - t979 * t216) - t266 * t984 + t1091;
    real_type t1096 = cos(t33);
    real_type t1098 = ModelPars[124];
    real_type t1099 = -ModelPars[122] + t1098;
    real_type t1103 = -t1099;
    real_type t1104 = sin(t33);
    real_type t1105 = t1104 * t1103;
    real_type t1109 = LR__[14];
    real_type t1112 = t1096 * t1103;
    real_type t1119 = LR__[15];
    real_type t1122 = ModelPars[125];
    real_type t1123 = -t1122 - t29;
    real_type t1127 = LR__[17];
    real_type t1134 = LR__[18];
    real_type t1137 = cos(t34);
    real_type t1141 = sin(t34);
    real_type t1142 = t1141 * t1103;
    real_type t1146 = LL__[14];
    real_type t1149 = t1137 * t1103;
    real_type t1156 = LL__[15];
    real_type t1159 = -t1122 - t30;
    real_type t1163 = LL__[17];
    real_type t1170 = LL__[18];
    real_type t1173 = t118 * t220;
    real_type t1174 = t106 * t112;
    real_type t1175 = t1173 - t235 + t1174 + t142 + t144 - t146;
    real_type t1176 = t1175 * t227;
    real_type t1185 = t226 * t243;
    real_type t1188 = t1175 * t243;
    real_type t1195 = LL__[2];
    real_type t1198 = -4 * t364;
    real_type t1202 = -t1198 * t378;
    real_type t1203 = 2 * t382;
    real_type t1204 = -t568;
    real_type t1207 = (t1204 * t143 - t593) * t121;
    real_type t1209 = 2 * t400;
    real_type t1210 = t1198 * t783 + t1202 + t1203 + t1207 - t1209 + t593 - t600 + t606 + t607 - 2 * t786 + 2 * t788;
    real_type t1220 = 2 * t406;
    real_type t1224 = -t378 * t1220;
    real_type t1225 = 4 * t413;
    real_type t1226 = t1204 * t415;
    real_type t1227 = t434 * t90;
    real_type t1228 = t783 * t1220 + t1224 - t1225 + t1226 + t1227 + t437 - t439 + t523 - t570 + t577 + t578 + t581 - t582 + t710 + 4 * t794 + t797 - t880;
    real_type t1233 = t406 * t378;
    real_type t1234 = t387 * t415;
    real_type t1235 = t375 * t783 + t1233 + t1234 - t384 - t385 + t386 + t414 + t439 - t523 + t524 - t795 + t866;
    real_type t1252 = t817 * t227;
    real_type t1261 = -t985 * t1079 * t978 + t774 * t1066 * t767 - t1109 * ((t1099 * t1096 - t1098 - t23) * t130 - t154 * (t1105 - t21)) * t89 - t1119 * ((t1112 + t1098 + t23) * t154 + t130 * (t1099 * t1104 + t21)) * t89 - t1127 * (t1123 * t130 + t154 * t27) * t89 - t1134 * (-t1123 * t154 + t130 * t27) * t89 + t1146 * ((t1099 * t1137 - t1098 - t24) * t227 - t243 * (t1142 - t22)) * t216 + t1156 * ((t1149 + t1098 + t24) * t243 + t227 * (t1099 * t1141 + t22)) * t216 + t1163 * (t1159 * t227 + t243 * t28) * t216 + t1170 * (-t1159 * t243 + t227 * t28) * t216 - t322 * (-t232 - t238 * t1176 * t216 - t215 * t210 * (t243 * t260 - t242)) - t1195 * (-t230 * t1185 * t216 - t238 * t1188 * t216 - (t14 * t339 - t259) * t216) - t328 * (t230 * (2 * t216 * t12 * t226 - t238 * t1210 * t216) - 2 * t803 * t854 - t823 * t215 * t210 * t1228 - t215 * t210 * t1235) - t249 * (2 * t823 * t834 * t216 + t230 * (2 * t803 * t829 - (-t14 * t457 * t227 + t236 * t842) * t216) - t238 * (t12 * t1185 - t14 * t1252) * t216 - t834 * t216);
    real_type t1267 = t378 * t548;
    real_type t1269 = t112 * t115 * t556;
    real_type t1270 = t220 * t223 * t565 + t783 * t561 + t1226 + t1227 + t1267 + t1269 + t437 - t439 + t523 - t570 + t577 + t578 + t581 - t582 + t710 + t797 - t880;
    real_type t1273 = t12 * t118;
    real_type t1275 = t1174 + t144 + t142 - t146;
    real_type t1277 = t12 * t1275 + t220 * t1273 - t916;
    real_type t1280 = t124 * t663 - t450 - t452 + t453 - t454 + t455 - t456;
    real_type t1288 = t223 * t1273;
    real_type t1299 = t378 * t691;
    real_type t1301 = t112 * t115 * t696;
    real_type t1304 = (t416 * t143 - t360) * t121;
    real_type t1306 = -t124 * t603;
    real_type t1307 = t220 * t223 * t685 + t783 * t700 + t1299 + t1301 + t1304 + t1306 + t360 - t394 + t401 + t402 + t788;
    real_type t1313 = t230 * t817 * t216;
    real_type t1314 = -t724;
    real_type t1318 = t12 * t160 * t216;
    real_type t1323 = -t1137 * t243 + t1141 * t227;
    real_type t1326 = t238 * t14 * t1323 * t216;
    real_type t1329 = t227 * t1137 + t243 * t1141;
    real_type t1330 = t1329 * t216;
    real_type t1332 = LL__[12];
    real_type t1334 = t118 * t94;
    real_type t1335 = t1334 - t139 + t1174 + t142 + t144 - t146;
    real_type t1336 = t1335 * t130;
    real_type t1345 = t129 * t154;
    real_type t1348 = t1335 * t154;
    real_type t1355 = LR__[2];
    real_type t1360 = t1198 * t361 + t1202 + t1203 + t1207 - t1209 - 2 * t377 + 2 * t398 + t593 - t600 + t606 + t607;
    real_type t1372 = t361 * t1220 + t1224 - t1225 + t1226 + t1227 + 4 * t409 + t423 + t437 - t439 + t523 - t570 - t571 + t577 + t578 + t581 - t582 + t710;
    real_type t1377 = t375 * t361 + t1233 + t1234 - t384 - t385 + t386 - t410 + t414 + t439 + t522 - t523 + t524;
    real_type t1394 = t473 * t130;
    real_type t1408 = t94 * t99 * t565 + t361 * t561 + t1226 + t1227 + t1267 + t1269 + t423 + t437 - t439 + t523 - t570 - t571 + t577 + t578 + t581 - t582 + t710;
    real_type t1411 = t11 * t118;
    real_type t1414 = t11 * t1275 + t94 * t1411 - t651;
    real_type t1423 = t99 * t1411;
    real_type t1434 = t94 * t99 * t685 + t361 * t700 + t1299 + t1301 + t1304 + t1306 + t360 - t394 + t398 + t401 + t402;
    real_type t1440 = t134 * t473 * t89;
    real_type t1444 = t11 * t160 * t89;
    real_type t1449 = -t1096 * t154 + t1104 * t130;
    real_type t1452 = t149 * t13 * t1449 * t89;
    real_type t1455 = t130 * t1096 + t154 * t1104;
    real_type t1456 = t1455 * t89;
    real_type t1458 = LR__[12];
    real_type t1460 = t32 * t215;
    real_type t1461 = LL__[11];
    real_type t1464 = t31 * t88;
    real_type t1465 = LR__[11];
    real_type t1468 = t83 * t156;
    real_type t1469 = t13 * t88;
    real_type t1473 = t210 * t156;
    real_type t1474 = t14 * t215;
    real_type t1478 = -t266 * (-t831 * t227 * t888 + t230 * (-t803 * t227 * t1270 - t215 * t210 * (t243 * t14 * t1280 + t227 * t1277)) - t283 * t210 * (t227 * (t892 + t1288 + t12 * (-t114 + t169 - t122 + t110 - t125 + t225 + t128)) + t950) - t216 * t227 * t1307) - t270 * (-t238 * t1314 * t216 - t1313 + t1318) - t1332 * (t1326 - t1330) + t287 * (-t136 - t149 * t1336 * t89 - t88 * t83 * (t154 * t179 - t153)) + t1355 * (-t134 * t1345 * t89 - t149 * t1348 * t89 - (t13 * t304 - t177) * t89) + t293 * (t134 * (2 * t89 * t11 * t129 - t149 * t1360 * t89) - 2 * t443 * t510 - t479 * t88 * t83 * t1372 - t88 * t83 * t1377) + t166 * (2 * t479 * t490 * t89 + t134 * (2 * t443 * t485 - (-t13 * t457 * t130 + t147 * t498) * t89) - t149 * (t11 * t1345 - t13 * t1394) * t89 - t490 * t89) + t185 * (-t487 * t130 * t608 + t134 * (-t443 * t130 * t1408 - t88 * t83 * (t154 * t13 * t1280 + t130 * t1414)) - t202 * t83 * (t130 * (t613 + t1423 + t11 * (-t114 + t169 - t122 + t110 - t125 + t126 + t128)) + t734) - t89 * t130 * t1434) + t189 * (-t149 * t1314 * t89 - t1440 + t1444) + t1458 * (t1452 - t1456) - t1461 * t1460 * t987 + t1465 * t1464 * t776 - t203 * t134 * t1469 * t1468 + t284 * t230 * t1474 * t1473;
    result__[ 58  ] = t1261 + t1478;
    real_type t1485 = -t744 * t95 - t372 - t746 - t747;
    real_type t1499 = -t230 * t1188 * t216 - t803 * t253;
    real_type t1503 = t803 * t228;
    real_type t1518 = t711 * t90 / 2;
    real_type t1519 = t525 / 2;
    real_type t1527 = t12 * t106;
    real_type t1537 = -t124 * t663;
    real_type t1538 = t1537 + t450 + t452 - t453 + t454 - t455 + t456;
    real_type t1546 = -t711 * t90;
    real_type t1554 = t425 - t18;
    real_type t1558 = LL__[13];
    real_type t1566 = t223 * t100;
    real_type t1568 = t220 * t100;
    real_type t1570 = t231 * t1566 - t803 * t1568;
    real_type t1571 = LL__[16];
    real_type t1573 = t1458 * t188 * t1456 - t1332 * t269 * t1330 - t199 * t1485 * t89 + t280 * t1485 * t216 + t1056 - t1065 + t1078 - t1091 - t217 * (-t238 * t1175 * t216 - t230 * t226 * t216) - t322 * t1499 - t1195 * (t230 * t1176 * t216 - t1503) - t328 * (-t230 * t857 * t216 - t238 * t845 * t216) - t249 * (t230 * t820 * t216 - t238 * t810 * t216 + 2 * t216 * t227 * (-t419 + t798 - t800 - t421 + t430 + t431 + t1518 + t1519)) - t266 * (-t354 * t210 * (t227 * t949 + t243 * (-t892 + t223 * t1527 + t12 * (t114 + t119 + t122 - t110 + t125 - t225 - t128))) - t283 * t210 * (t227 * t14 * t1538 + t243 * t1277) - t216 * t243 * (t570 - t797 + t880 + t523 + t576 - t578 + t1546 - t525)) - t1558 * (-t230 * t1554 * t216 - t238 * t596 * t216) - t1156 * (-t238 * t1554 * t216 - t230 * t396 * t216) - t1571 * t1570;
    real_type t1576 = t803 * t1566 + t231 * t1568;
    real_type t1587 = -t134 * t1348 * t89 - t443 * t171;
    real_type t1591 = t443 * t131;
    real_type t1612 = t11 * t106;
    real_type t1634 = t425 - t17;
    real_type t1638 = LR__[13];
    real_type t1646 = t99 * t100;
    real_type t1648 = t94 * t100;
    real_type t1650 = t135 * t1646 - t443 * t1648;
    real_type t1651 = LR__[16];
    real_type t1655 = t135 * t1648 + t443 * t1646;
    real_type t1669 = -t1170 * t1576 + t91 * (-t134 * t129 * t89 - t149 * t1335 * t89) + t287 * t1587 + t1355 * (t134 * t1336 * t89 - t1591) + t293 * (-t134 * t513 * t89 - t149 * t501 * t89) + t166 * (t134 * t476 * t89 - t149 * t460 * t89 + 2 * t89 * t130 * (-t419 + t424 - t427 - t421 + t430 + t431 + t1518 + t1519)) + t185 * (-t319 * t83 * (t130 * t733 + t154 * (-t613 + t99 * t1612 + t11 * (t114 + t119 + t122 - t110 + t125 - t126 - t128))) - t202 * t83 * (t130 * t13 * t1538 + t154 * t1414) - t89 * t154 * (t570 - t423 + t571 + t523 + t576 - t578 + t1546 - t525)) + t1638 * (-t134 * t1634 * t89 - t149 * t596 * t89) + t1119 * (-t134 * t396 * t89 - t149 * t1634 * t89) + t1651 * t1650 + t1134 * t1655 + t1461 * t283 * t977 + t270 * t949 * t216 + t284 * t399 * t216 - t189 * t733 * t89 - t203 * t399 * t89 - t1465 * t202 * t766;
    result__[ 59  ] = t1573 + t1669;
    real_type t1684 = t1334 - t139;
    real_type t1708 = t1173 - t235;
    result__[ 60  ] = t287 * t176 * t89 - t1355 * t152 * t89 - t293 * t529 * t89 + t166 * (t134 * t148 * t89 + t1591) + t185 * t1587 + t189 * t149 * t13 * t187 + t199 * (-t134 * t1684 * t89 - t149 * t192 * t89) - t320 * t201 - t1119 * t89 - t1134 * t89 - t322 * t258 * t216 + t1195 * t241 * t216 + t328 * t870 * t216 - t249 * (t230 * t237 * t216 + t1503) - t266 * t1499 - t270 * t238 * t14 * t268 - t280 * (-t230 * t1708 * t216 - t238 * t273 * t216) + t355 * t282 + t1156 * t216 + t1170 * t216;
    real_type t1724 = -t448 - t450 - t452 - t453 - t723;
    real_type t1729 = -t1724;
    real_type t1737 = t1537 + t450 + t452 + t453 + t723;
    real_type t1744 = t719 + t450 + t453 + t723;
    real_type t1749 = -t1455;
    real_type t1754 = t1109 * t88;
    real_type t1783 = -t1329;
    real_type t1788 = t1146 * t215;
    result__[ 61  ] = -t287 * t304 * t89 - t1355 * t154 * t88 * t83 * t160 + t293 * (-t149 * t1724 * t89 - t1440 + t1444) + t166 * (t134 * t1729 * t154 * t89 + t149 * t474 * t89) + t185 * (-t135 * t130 * t1737 - t149 * t1394 * t89) - t189 * t1744 * t89 + t1465 * t134 * t89 - t1458 * t149 * t1749 * t89 - t1754 * t83 * t155 + t322 * t339 * t216 + t1195 * t243 * t215 * t210 * t160 - t328 * (-t238 * t1724 * t216 - t1313 + t1318) - t249 * (t230 * t1729 * t243 * t216 + t238 * t818 * t216) - t266 * (-t238 * t1252 * t216 - t231 * t227 * t1737) + t270 * t1744 * t216 - t1461 * t230 * t216 + t1332 * t238 * t1783 * t216 + t1788 * t210 * t155;
    real_type t1790 = t98 + t168;
    real_type t1830 = t222 + t251;
    result__[ 62  ] = t91 * (-t319 * t83 * t1790 - t197) + t287 * t315 + t1355 * (t134 * t195 * t130 * t89 + t149 * t130 * t311 * t89) + t166 * (t149 * t1684 * t11 * t130 * t89 - t134 * t446 * t1790 * t89 - t748 * t130 * t89) + t185 * (-t135 * t154 * (t613 + t1423) - t443 * t154 * (t94 * t1612 + t651) - t750) - t199 * t748 * t89 - t1056 - t1651 * t1650 - t1134 * t1655 - t217 * (-t354 * t210 * t1830 - t278) - t322 * t350 - t1195 * (t230 * t276 * t227 * t216 + t238 * t227 * t346 * t216) - t249 * (t238 * t1708 * t12 * t227 * t216 - t230 * t806 * t1830 * t216 - t748 * t227 * t216) - t266 * (-t231 * t243 * (t892 + t1288) - t803 * t243 * (t220 * t1527 + t916) - t961) + t280 * t748 * t216 + t1065 + t1571 * t1570 + t1170 * t1576;
    real_type t1898 = t124 * t596;
    result__[ 63  ] = t91 * t202 * t201 + t287 * t319 * t318 - t1355 * t319 * t83 * t130 * t124 - t293 * t134 * t1469 * t1468 + t166 * (t149 * t124 * (t13 * t154 * t155 + t446) * t89 + t130 * t399 * t89) + t185 * (-t202 * t83 * (-t154 * t11 * t124 + t130 * t13 * t156) - t88 * t776 * t1898) - t203 * t88 * t201 + t1638 * t149 * t89 - t1119 * t134 * t89 - t217 * t283 * t282 - t322 * t354 * t353 + t1195 * t354 * t210 * t227 * t124 + t328 * t230 * t1474 * t1473 - t249 * (t238 * t124 * (t14 * t243 * t155 + t806) * t216 + t227 * t399 * t216) - t266 * (-t283 * t210 * (-t243 * t12 * t124 + t227 * t14 * t156) - t215 * t987 * t1898) + t284 * t215 * t282 - t1558 * t238 * t216 + t1156 * t230 * t216;
    real_type t1947 = t1638 * t89;
    real_type t1948 = t1558 * t216;
    result__[ 64  ] = t1947 - t1948;
    real_type t1950 = t1119 * t88;
    real_type t1953 = t1156 * t215;
    result__[ 65  ] = t1754 * t1048 - t1788 * t1057 - t1950 * t776 + t1953 * t987;
    result__[ 66  ] = t1950 * t1048 - t1953 * t1057 + t1754 * t776 - t1788 * t987;
    result__[ 67  ] = t1571 * t216 - t1651 * t89;
    real_type t1961 = t1127 * t88;
    real_type t1963 = t1134 * t88;
    real_type t1965 = t1163 * t215;
    real_type t1967 = t1170 * t215;
    result__[ 68  ] = t1961 * t1048 - t1965 * t1057 - t1963 * t776 + t1967 * t987;
    result__[ 69  ] = t1963 * t1048 - t1967 * t1057 + t1961 * t776 - t1965 * t987;
    result__[ 70  ] = -t1465 * t88 * t1048 + t1461 * t215 * t1057 + t1947 * t1105 - t1948 * t1142;
    result__[ 71  ] = t1458 * (-t1749 * t89 - t1452) + t1638 * t1464 * t83 * t1112 - t1109 * t1103 * t1455 * t89 - t1119 * t1103 * t1449 * t89 - t1332 * (-t1783 * t216 - t1326) - t1558 * t1460 * t210 * t1149 + t1146 * t1103 * t1329 * t216 + t1156 * t1103 * t1323 * t216;
    real_type t2003 = ModelPars[120];
    real_type t2005 = ModelPars[212];
    result__[ 72  ] = LL__[34] * t2005 * t215 * t210 * t2003 - LR__[34] * t2005 * t88 * t83 * t2003;
    real_type t2015 = ModelPars[209];
    result__[ 73  ] = LL__[33] * t2015 * t216 - LR__[33] * t2015 * t89;
    real_type t2022 = ModelPars[210];
    result__[ 74  ] = LL__[35] * t2022 * t216 - LR__[35] * t2022 * t89;
    real_type t2029 = ModelPars[211];
    result__[ 75  ] = LL__[36] * t2029 * t216 - LR__[36] * t2029 * t89;
    result__[ 76  ] = LL__[37] * t216 - LR__[37] * t89;
    result__[ 77  ] = LL__[38] * t216 - LR__[38] * t89;
    #ifdef MECHATRONIX_DEBUG
    CHECK_NAN(result__,"jump_eval",78);
    #endif
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  integer
  Straight::DjumpDxlp_numRows() const
  { return 78; }

  integer
  Straight::DjumpDxlp_numCols() const
  { return 156; }

  integer
  Straight::DjumpDxlp_nnz() const
  { return 798; }

  void
  Straight::DjumpDxlp_pattern(
    integer iIndex[],
    integer jIndex[]
  ) const {
    iIndex[ 0  ] = 0   ; jIndex[ 0  ] = 0   ;
    iIndex[ 1  ] = 0   ; jIndex[ 1  ] = 78  ;
    iIndex[ 2  ] = 1   ; jIndex[ 2  ] = 1   ;
    iIndex[ 3  ] = 1   ; jIndex[ 3  ] = 79  ;
    iIndex[ 4  ] = 2   ; jIndex[ 4  ] = 2   ;
    iIndex[ 5  ] = 2   ; jIndex[ 5  ] = 80  ;
    iIndex[ 6  ] = 3   ; jIndex[ 6  ] = 3   ;
    iIndex[ 7  ] = 3   ; jIndex[ 7  ] = 81  ;
    iIndex[ 8  ] = 4   ; jIndex[ 8  ] = 4   ;
    iIndex[ 9  ] = 4   ; jIndex[ 9  ] = 82  ;
    iIndex[ 10 ] = 5   ; jIndex[ 10 ] = 5   ;
    iIndex[ 11 ] = 5   ; jIndex[ 11 ] = 83  ;
    iIndex[ 12 ] = 6   ; jIndex[ 12 ] = 6   ;
    iIndex[ 13 ] = 6   ; jIndex[ 13 ] = 84  ;
    iIndex[ 14 ] = 7   ; jIndex[ 14 ] = 7   ;
    iIndex[ 15 ] = 7   ; jIndex[ 15 ] = 85  ;
    iIndex[ 16 ] = 8   ; jIndex[ 16 ] = 8   ;
    iIndex[ 17 ] = 8   ; jIndex[ 17 ] = 86  ;
    iIndex[ 18 ] = 9   ; jIndex[ 18 ] = 9   ;
    iIndex[ 19 ] = 9   ; jIndex[ 19 ] = 87  ;
    iIndex[ 20 ] = 10  ; jIndex[ 20 ] = 10  ;
    iIndex[ 21 ] = 10  ; jIndex[ 21 ] = 88  ;
    iIndex[ 22 ] = 11  ; jIndex[ 22 ] = 11  ;
    iIndex[ 23 ] = 11  ; jIndex[ 23 ] = 89  ;
    iIndex[ 24 ] = 12  ; jIndex[ 24 ] = 12  ;
    iIndex[ 25 ] = 12  ; jIndex[ 25 ] = 90  ;
    iIndex[ 26 ] = 13  ; jIndex[ 26 ] = 13  ;
    iIndex[ 27 ] = 13  ; jIndex[ 27 ] = 91  ;
    iIndex[ 28 ] = 14  ; jIndex[ 28 ] = 14  ;
    iIndex[ 29 ] = 14  ; jIndex[ 29 ] = 92  ;
    iIndex[ 30 ] = 15  ; jIndex[ 30 ] = 15  ;
    iIndex[ 31 ] = 15  ; jIndex[ 31 ] = 93  ;
    iIndex[ 32 ] = 16  ; jIndex[ 32 ] = 16  ;
    iIndex[ 33 ] = 16  ; jIndex[ 33 ] = 94  ;
    iIndex[ 34 ] = 17  ; jIndex[ 34 ] = 17  ;
    iIndex[ 35 ] = 17  ; jIndex[ 35 ] = 95  ;
    iIndex[ 36 ] = 18  ; jIndex[ 36 ] = 18  ;
    iIndex[ 37 ] = 18  ; jIndex[ 37 ] = 96  ;
    iIndex[ 38 ] = 19  ; jIndex[ 38 ] = 19  ;
    iIndex[ 39 ] = 19  ; jIndex[ 39 ] = 97  ;
    iIndex[ 40 ] = 20  ; jIndex[ 40 ] = 20  ;
    iIndex[ 41 ] = 20  ; jIndex[ 41 ] = 98  ;
    iIndex[ 42 ] = 21  ; jIndex[ 42 ] = 21  ;
    iIndex[ 43 ] = 21  ; jIndex[ 43 ] = 99  ;
    iIndex[ 44 ] = 22  ; jIndex[ 44 ] = 22  ;
    iIndex[ 45 ] = 22  ; jIndex[ 45 ] = 100 ;
    iIndex[ 46 ] = 23  ; jIndex[ 46 ] = 23  ;
    iIndex[ 47 ] = 23  ; jIndex[ 47 ] = 101 ;
    iIndex[ 48 ] = 24  ; jIndex[ 48 ] = 24  ;
    iIndex[ 49 ] = 24  ; jIndex[ 49 ] = 102 ;
    iIndex[ 50 ] = 25  ; jIndex[ 50 ] = 25  ;
    iIndex[ 51 ] = 25  ; jIndex[ 51 ] = 103 ;
    iIndex[ 52 ] = 26  ; jIndex[ 52 ] = 26  ;
    iIndex[ 53 ] = 26  ; jIndex[ 53 ] = 104 ;
    iIndex[ 54 ] = 27  ; jIndex[ 54 ] = 27  ;
    iIndex[ 55 ] = 27  ; jIndex[ 55 ] = 105 ;
    iIndex[ 56 ] = 28  ; jIndex[ 56 ] = 28  ;
    iIndex[ 57 ] = 28  ; jIndex[ 57 ] = 106 ;
    iIndex[ 58 ] = 29  ; jIndex[ 58 ] = 29  ;
    iIndex[ 59 ] = 29  ; jIndex[ 59 ] = 107 ;
    iIndex[ 60 ] = 30  ; jIndex[ 60 ] = 30  ;
    iIndex[ 61 ] = 30  ; jIndex[ 61 ] = 108 ;
    iIndex[ 62 ] = 31  ; jIndex[ 62 ] = 31  ;
    iIndex[ 63 ] = 31  ; jIndex[ 63 ] = 109 ;
    iIndex[ 64 ] = 32  ; jIndex[ 64 ] = 32  ;
    iIndex[ 65 ] = 32  ; jIndex[ 65 ] = 110 ;
    iIndex[ 66 ] = 33  ; jIndex[ 66 ] = 33  ;
    iIndex[ 67 ] = 33  ; jIndex[ 67 ] = 111 ;
    iIndex[ 68 ] = 34  ; jIndex[ 68 ] = 34  ;
    iIndex[ 69 ] = 34  ; jIndex[ 69 ] = 112 ;
    iIndex[ 70 ] = 35  ; jIndex[ 70 ] = 35  ;
    iIndex[ 71 ] = 35  ; jIndex[ 71 ] = 113 ;
    iIndex[ 72 ] = 36  ; jIndex[ 72 ] = 36  ;
    iIndex[ 73 ] = 36  ; jIndex[ 73 ] = 114 ;
    iIndex[ 74 ] = 37  ; jIndex[ 74 ] = 37  ;
    iIndex[ 75 ] = 37  ; jIndex[ 75 ] = 115 ;
    iIndex[ 76 ] = 38  ; jIndex[ 76 ] = 38  ;
    iIndex[ 77 ] = 38  ; jIndex[ 77 ] = 116 ;
    iIndex[ 78 ] = 39  ; jIndex[ 78 ] = 0   ;
    iIndex[ 79 ] = 39  ; jIndex[ 79 ] = 1   ;
    iIndex[ 80 ] = 39  ; jIndex[ 80 ] = 3   ;
    iIndex[ 81 ] = 39  ; jIndex[ 81 ] = 4   ;
    iIndex[ 82 ] = 39  ; jIndex[ 82 ] = 5   ;
    iIndex[ 83 ] = 39  ; jIndex[ 83 ] = 6   ;
    iIndex[ 84 ] = 39  ; jIndex[ 84 ] = 7   ;
    iIndex[ 85 ] = 39  ; jIndex[ 85 ] = 8   ;
    iIndex[ 86 ] = 39  ; jIndex[ 86 ] = 37  ;
    iIndex[ 87 ] = 39  ; jIndex[ 87 ] = 38  ;
    iIndex[ 88 ] = 39  ; jIndex[ 88 ] = 39  ;
    iIndex[ 89 ] = 39  ; jIndex[ 89 ] = 43  ;
    iIndex[ 90 ] = 39  ; jIndex[ 90 ] = 44  ;
    iIndex[ 91 ] = 39  ; jIndex[ 91 ] = 45  ;
    iIndex[ 92 ] = 39  ; jIndex[ 92 ] = 46  ;
    iIndex[ 93 ] = 39  ; jIndex[ 93 ] = 47  ;
    iIndex[ 94 ] = 39  ; jIndex[ 94 ] = 78  ;
    iIndex[ 95 ] = 39  ; jIndex[ 95 ] = 79  ;
    iIndex[ 96 ] = 39  ; jIndex[ 96 ] = 81  ;
    iIndex[ 97 ] = 39  ; jIndex[ 97 ] = 82  ;
    iIndex[ 98 ] = 39  ; jIndex[ 98 ] = 83  ;
    iIndex[ 99 ] = 39  ; jIndex[ 99 ] = 84  ;
    iIndex[ 100 ] = 39  ; jIndex[ 100 ] = 85  ;
    iIndex[ 101 ] = 39  ; jIndex[ 101 ] = 86  ;
    iIndex[ 102 ] = 39  ; jIndex[ 102 ] = 115 ;
    iIndex[ 103 ] = 39  ; jIndex[ 103 ] = 116 ;
    iIndex[ 104 ] = 39  ; jIndex[ 104 ] = 117 ;
    iIndex[ 105 ] = 39  ; jIndex[ 105 ] = 121 ;
    iIndex[ 106 ] = 39  ; jIndex[ 106 ] = 122 ;
    iIndex[ 107 ] = 39  ; jIndex[ 107 ] = 123 ;
    iIndex[ 108 ] = 39  ; jIndex[ 108 ] = 124 ;
    iIndex[ 109 ] = 39  ; jIndex[ 109 ] = 125 ;
    iIndex[ 110 ] = 40  ; jIndex[ 110 ] = 0   ;
    iIndex[ 111 ] = 40  ; jIndex[ 111 ] = 1   ;
    iIndex[ 112 ] = 40  ; jIndex[ 112 ] = 3   ;
    iIndex[ 113 ] = 40  ; jIndex[ 113 ] = 4   ;
    iIndex[ 114 ] = 40  ; jIndex[ 114 ] = 5   ;
    iIndex[ 115 ] = 40  ; jIndex[ 115 ] = 6   ;
    iIndex[ 116 ] = 40  ; jIndex[ 116 ] = 7   ;
    iIndex[ 117 ] = 40  ; jIndex[ 117 ] = 8   ;
    iIndex[ 118 ] = 40  ; jIndex[ 118 ] = 37  ;
    iIndex[ 119 ] = 40  ; jIndex[ 119 ] = 38  ;
    iIndex[ 120 ] = 40  ; jIndex[ 120 ] = 40  ;
    iIndex[ 121 ] = 40  ; jIndex[ 121 ] = 42  ;
    iIndex[ 122 ] = 40  ; jIndex[ 122 ] = 44  ;
    iIndex[ 123 ] = 40  ; jIndex[ 123 ] = 45  ;
    iIndex[ 124 ] = 40  ; jIndex[ 124 ] = 46  ;
    iIndex[ 125 ] = 40  ; jIndex[ 125 ] = 47  ;
    iIndex[ 126 ] = 40  ; jIndex[ 126 ] = 78  ;
    iIndex[ 127 ] = 40  ; jIndex[ 127 ] = 79  ;
    iIndex[ 128 ] = 40  ; jIndex[ 128 ] = 81  ;
    iIndex[ 129 ] = 40  ; jIndex[ 129 ] = 82  ;
    iIndex[ 130 ] = 40  ; jIndex[ 130 ] = 83  ;
    iIndex[ 131 ] = 40  ; jIndex[ 131 ] = 84  ;
    iIndex[ 132 ] = 40  ; jIndex[ 132 ] = 85  ;
    iIndex[ 133 ] = 40  ; jIndex[ 133 ] = 86  ;
    iIndex[ 134 ] = 40  ; jIndex[ 134 ] = 115 ;
    iIndex[ 135 ] = 40  ; jIndex[ 135 ] = 116 ;
    iIndex[ 136 ] = 40  ; jIndex[ 136 ] = 118 ;
    iIndex[ 137 ] = 40  ; jIndex[ 137 ] = 120 ;
    iIndex[ 138 ] = 40  ; jIndex[ 138 ] = 122 ;
    iIndex[ 139 ] = 40  ; jIndex[ 139 ] = 123 ;
    iIndex[ 140 ] = 40  ; jIndex[ 140 ] = 124 ;
    iIndex[ 141 ] = 40  ; jIndex[ 141 ] = 125 ;
    iIndex[ 142 ] = 41  ; jIndex[ 142 ] = 0   ;
    iIndex[ 143 ] = 41  ; jIndex[ 143 ] = 1   ;
    iIndex[ 144 ] = 41  ; jIndex[ 144 ] = 3   ;
    iIndex[ 145 ] = 41  ; jIndex[ 145 ] = 4   ;
    iIndex[ 146 ] = 41  ; jIndex[ 146 ] = 5   ;
    iIndex[ 147 ] = 41  ; jIndex[ 147 ] = 6   ;
    iIndex[ 148 ] = 41  ; jIndex[ 148 ] = 7   ;
    iIndex[ 149 ] = 41  ; jIndex[ 149 ] = 8   ;
    iIndex[ 150 ] = 41  ; jIndex[ 150 ] = 37  ;
    iIndex[ 151 ] = 41  ; jIndex[ 151 ] = 38  ;
    iIndex[ 152 ] = 41  ; jIndex[ 152 ] = 39  ;
    iIndex[ 153 ] = 41  ; jIndex[ 153 ] = 40  ;
    iIndex[ 154 ] = 41  ; jIndex[ 154 ] = 42  ;
    iIndex[ 155 ] = 41  ; jIndex[ 155 ] = 43  ;
    iIndex[ 156 ] = 41  ; jIndex[ 156 ] = 44  ;
    iIndex[ 157 ] = 41  ; jIndex[ 157 ] = 45  ;
    iIndex[ 158 ] = 41  ; jIndex[ 158 ] = 46  ;
    iIndex[ 159 ] = 41  ; jIndex[ 159 ] = 47  ;
    iIndex[ 160 ] = 41  ; jIndex[ 160 ] = 48  ;
    iIndex[ 161 ] = 41  ; jIndex[ 161 ] = 49  ;
    iIndex[ 162 ] = 41  ; jIndex[ 162 ] = 78  ;
    iIndex[ 163 ] = 41  ; jIndex[ 163 ] = 79  ;
    iIndex[ 164 ] = 41  ; jIndex[ 164 ] = 81  ;
    iIndex[ 165 ] = 41  ; jIndex[ 165 ] = 82  ;
    iIndex[ 166 ] = 41  ; jIndex[ 166 ] = 83  ;
    iIndex[ 167 ] = 41  ; jIndex[ 167 ] = 84  ;
    iIndex[ 168 ] = 41  ; jIndex[ 168 ] = 85  ;
    iIndex[ 169 ] = 41  ; jIndex[ 169 ] = 86  ;
    iIndex[ 170 ] = 41  ; jIndex[ 170 ] = 115 ;
    iIndex[ 171 ] = 41  ; jIndex[ 171 ] = 116 ;
    iIndex[ 172 ] = 41  ; jIndex[ 172 ] = 117 ;
    iIndex[ 173 ] = 41  ; jIndex[ 173 ] = 118 ;
    iIndex[ 174 ] = 41  ; jIndex[ 174 ] = 120 ;
    iIndex[ 175 ] = 41  ; jIndex[ 175 ] = 121 ;
    iIndex[ 176 ] = 41  ; jIndex[ 176 ] = 122 ;
    iIndex[ 177 ] = 41  ; jIndex[ 177 ] = 123 ;
    iIndex[ 178 ] = 41  ; jIndex[ 178 ] = 124 ;
    iIndex[ 179 ] = 41  ; jIndex[ 179 ] = 125 ;
    iIndex[ 180 ] = 41  ; jIndex[ 180 ] = 126 ;
    iIndex[ 181 ] = 41  ; jIndex[ 181 ] = 127 ;
    iIndex[ 182 ] = 42  ; jIndex[ 182 ] = 0   ;
    iIndex[ 183 ] = 42  ; jIndex[ 183 ] = 1   ;
    iIndex[ 184 ] = 42  ; jIndex[ 184 ] = 37  ;
    iIndex[ 185 ] = 42  ; jIndex[ 185 ] = 38  ;
    iIndex[ 186 ] = 42  ; jIndex[ 186 ] = 58  ;
    iIndex[ 187 ] = 42  ; jIndex[ 187 ] = 78  ;
    iIndex[ 188 ] = 42  ; jIndex[ 188 ] = 79  ;
    iIndex[ 189 ] = 42  ; jIndex[ 189 ] = 115 ;
    iIndex[ 190 ] = 42  ; jIndex[ 190 ] = 116 ;
    iIndex[ 191 ] = 42  ; jIndex[ 191 ] = 136 ;
    iIndex[ 192 ] = 43  ; jIndex[ 192 ] = 0   ;
    iIndex[ 193 ] = 43  ; jIndex[ 193 ] = 1   ;
    iIndex[ 194 ] = 43  ; jIndex[ 194 ] = 37  ;
    iIndex[ 195 ] = 43  ; jIndex[ 195 ] = 38  ;
    iIndex[ 196 ] = 43  ; jIndex[ 196 ] = 59  ;
    iIndex[ 197 ] = 43  ; jIndex[ 197 ] = 78  ;
    iIndex[ 198 ] = 43  ; jIndex[ 198 ] = 79  ;
    iIndex[ 199 ] = 43  ; jIndex[ 199 ] = 115 ;
    iIndex[ 200 ] = 43  ; jIndex[ 200 ] = 116 ;
    iIndex[ 201 ] = 43  ; jIndex[ 201 ] = 137 ;
    iIndex[ 202 ] = 44  ; jIndex[ 202 ] = 0   ;
    iIndex[ 203 ] = 44  ; jIndex[ 203 ] = 1   ;
    iIndex[ 204 ] = 44  ; jIndex[ 204 ] = 37  ;
    iIndex[ 205 ] = 44  ; jIndex[ 205 ] = 38  ;
    iIndex[ 206 ] = 44  ; jIndex[ 206 ] = 60  ;
    iIndex[ 207 ] = 44  ; jIndex[ 207 ] = 78  ;
    iIndex[ 208 ] = 44  ; jIndex[ 208 ] = 79  ;
    iIndex[ 209 ] = 44  ; jIndex[ 209 ] = 115 ;
    iIndex[ 210 ] = 44  ; jIndex[ 210 ] = 116 ;
    iIndex[ 211 ] = 44  ; jIndex[ 211 ] = 138 ;
    iIndex[ 212 ] = 45  ; jIndex[ 212 ] = 0   ;
    iIndex[ 213 ] = 45  ; jIndex[ 213 ] = 1   ;
    iIndex[ 214 ] = 45  ; jIndex[ 214 ] = 37  ;
    iIndex[ 215 ] = 45  ; jIndex[ 215 ] = 38  ;
    iIndex[ 216 ] = 45  ; jIndex[ 216 ] = 61  ;
    iIndex[ 217 ] = 45  ; jIndex[ 217 ] = 78  ;
    iIndex[ 218 ] = 45  ; jIndex[ 218 ] = 79  ;
    iIndex[ 219 ] = 45  ; jIndex[ 219 ] = 115 ;
    iIndex[ 220 ] = 45  ; jIndex[ 220 ] = 116 ;
    iIndex[ 221 ] = 45  ; jIndex[ 221 ] = 139 ;
    iIndex[ 222 ] = 46  ; jIndex[ 222 ] = 0   ;
    iIndex[ 223 ] = 46  ; jIndex[ 223 ] = 1   ;
    iIndex[ 224 ] = 46  ; jIndex[ 224 ] = 37  ;
    iIndex[ 225 ] = 46  ; jIndex[ 225 ] = 38  ;
    iIndex[ 226 ] = 46  ; jIndex[ 226 ] = 62  ;
    iIndex[ 227 ] = 46  ; jIndex[ 227 ] = 78  ;
    iIndex[ 228 ] = 46  ; jIndex[ 228 ] = 79  ;
    iIndex[ 229 ] = 46  ; jIndex[ 229 ] = 115 ;
    iIndex[ 230 ] = 46  ; jIndex[ 230 ] = 116 ;
    iIndex[ 231 ] = 46  ; jIndex[ 231 ] = 140 ;
    iIndex[ 232 ] = 47  ; jIndex[ 232 ] = 0   ;
    iIndex[ 233 ] = 47  ; jIndex[ 233 ] = 1   ;
    iIndex[ 234 ] = 47  ; jIndex[ 234 ] = 37  ;
    iIndex[ 235 ] = 47  ; jIndex[ 235 ] = 38  ;
    iIndex[ 236 ] = 47  ; jIndex[ 236 ] = 63  ;
    iIndex[ 237 ] = 47  ; jIndex[ 237 ] = 78  ;
    iIndex[ 238 ] = 47  ; jIndex[ 238 ] = 79  ;
    iIndex[ 239 ] = 47  ; jIndex[ 239 ] = 115 ;
    iIndex[ 240 ] = 47  ; jIndex[ 240 ] = 116 ;
    iIndex[ 241 ] = 47  ; jIndex[ 241 ] = 141 ;
    iIndex[ 242 ] = 48  ; jIndex[ 242 ] = 0   ;
    iIndex[ 243 ] = 48  ; jIndex[ 243 ] = 1   ;
    iIndex[ 244 ] = 48  ; jIndex[ 244 ] = 37  ;
    iIndex[ 245 ] = 48  ; jIndex[ 245 ] = 38  ;
    iIndex[ 246 ] = 48  ; jIndex[ 246 ] = 64  ;
    iIndex[ 247 ] = 48  ; jIndex[ 247 ] = 78  ;
    iIndex[ 248 ] = 48  ; jIndex[ 248 ] = 79  ;
    iIndex[ 249 ] = 48  ; jIndex[ 249 ] = 115 ;
    iIndex[ 250 ] = 48  ; jIndex[ 250 ] = 116 ;
    iIndex[ 251 ] = 48  ; jIndex[ 251 ] = 142 ;
    iIndex[ 252 ] = 49  ; jIndex[ 252 ] = 0   ;
    iIndex[ 253 ] = 49  ; jIndex[ 253 ] = 1   ;
    iIndex[ 254 ] = 49  ; jIndex[ 254 ] = 37  ;
    iIndex[ 255 ] = 49  ; jIndex[ 255 ] = 38  ;
    iIndex[ 256 ] = 49  ; jIndex[ 256 ] = 65  ;
    iIndex[ 257 ] = 49  ; jIndex[ 257 ] = 78  ;
    iIndex[ 258 ] = 49  ; jIndex[ 258 ] = 79  ;
    iIndex[ 259 ] = 49  ; jIndex[ 259 ] = 115 ;
    iIndex[ 260 ] = 49  ; jIndex[ 260 ] = 116 ;
    iIndex[ 261 ] = 49  ; jIndex[ 261 ] = 143 ;
    iIndex[ 262 ] = 50  ; jIndex[ 262 ] = 0   ;
    iIndex[ 263 ] = 50  ; jIndex[ 263 ] = 1   ;
    iIndex[ 264 ] = 50  ; jIndex[ 264 ] = 37  ;
    iIndex[ 265 ] = 50  ; jIndex[ 265 ] = 38  ;
    iIndex[ 266 ] = 50  ; jIndex[ 266 ] = 66  ;
    iIndex[ 267 ] = 50  ; jIndex[ 267 ] = 78  ;
    iIndex[ 268 ] = 50  ; jIndex[ 268 ] = 79  ;
    iIndex[ 269 ] = 50  ; jIndex[ 269 ] = 115 ;
    iIndex[ 270 ] = 50  ; jIndex[ 270 ] = 116 ;
    iIndex[ 271 ] = 50  ; jIndex[ 271 ] = 144 ;
    iIndex[ 272 ] = 51  ; jIndex[ 272 ] = 0   ;
    iIndex[ 273 ] = 51  ; jIndex[ 273 ] = 1   ;
    iIndex[ 274 ] = 51  ; jIndex[ 274 ] = 37  ;
    iIndex[ 275 ] = 51  ; jIndex[ 275 ] = 38  ;
    iIndex[ 276 ] = 51  ; jIndex[ 276 ] = 67  ;
    iIndex[ 277 ] = 51  ; jIndex[ 277 ] = 78  ;
    iIndex[ 278 ] = 51  ; jIndex[ 278 ] = 79  ;
    iIndex[ 279 ] = 51  ; jIndex[ 279 ] = 115 ;
    iIndex[ 280 ] = 51  ; jIndex[ 280 ] = 116 ;
    iIndex[ 281 ] = 51  ; jIndex[ 281 ] = 145 ;
    iIndex[ 282 ] = 52  ; jIndex[ 282 ] = 0   ;
    iIndex[ 283 ] = 52  ; jIndex[ 283 ] = 1   ;
    iIndex[ 284 ] = 52  ; jIndex[ 284 ] = 37  ;
    iIndex[ 285 ] = 52  ; jIndex[ 285 ] = 38  ;
    iIndex[ 286 ] = 52  ; jIndex[ 286 ] = 68  ;
    iIndex[ 287 ] = 52  ; jIndex[ 287 ] = 78  ;
    iIndex[ 288 ] = 52  ; jIndex[ 288 ] = 79  ;
    iIndex[ 289 ] = 52  ; jIndex[ 289 ] = 115 ;
    iIndex[ 290 ] = 52  ; jIndex[ 290 ] = 116 ;
    iIndex[ 291 ] = 52  ; jIndex[ 291 ] = 146 ;
    iIndex[ 292 ] = 53  ; jIndex[ 292 ] = 0   ;
    iIndex[ 293 ] = 53  ; jIndex[ 293 ] = 1   ;
    iIndex[ 294 ] = 53  ; jIndex[ 294 ] = 37  ;
    iIndex[ 295 ] = 53  ; jIndex[ 295 ] = 38  ;
    iIndex[ 296 ] = 53  ; jIndex[ 296 ] = 69  ;
    iIndex[ 297 ] = 53  ; jIndex[ 297 ] = 78  ;
    iIndex[ 298 ] = 53  ; jIndex[ 298 ] = 79  ;
    iIndex[ 299 ] = 53  ; jIndex[ 299 ] = 115 ;
    iIndex[ 300 ] = 53  ; jIndex[ 300 ] = 116 ;
    iIndex[ 301 ] = 53  ; jIndex[ 301 ] = 147 ;
    iIndex[ 302 ] = 54  ; jIndex[ 302 ] = 0   ;
    iIndex[ 303 ] = 54  ; jIndex[ 303 ] = 1   ;
    iIndex[ 304 ] = 54  ; jIndex[ 304 ] = 37  ;
    iIndex[ 305 ] = 54  ; jIndex[ 305 ] = 38  ;
    iIndex[ 306 ] = 54  ; jIndex[ 306 ] = 70  ;
    iIndex[ 307 ] = 54  ; jIndex[ 307 ] = 78  ;
    iIndex[ 308 ] = 54  ; jIndex[ 308 ] = 79  ;
    iIndex[ 309 ] = 54  ; jIndex[ 309 ] = 115 ;
    iIndex[ 310 ] = 54  ; jIndex[ 310 ] = 116 ;
    iIndex[ 311 ] = 54  ; jIndex[ 311 ] = 148 ;
    iIndex[ 312 ] = 55  ; jIndex[ 312 ] = 0   ;
    iIndex[ 313 ] = 55  ; jIndex[ 313 ] = 1   ;
    iIndex[ 314 ] = 55  ; jIndex[ 314 ] = 37  ;
    iIndex[ 315 ] = 55  ; jIndex[ 315 ] = 38  ;
    iIndex[ 316 ] = 55  ; jIndex[ 316 ] = 71  ;
    iIndex[ 317 ] = 55  ; jIndex[ 317 ] = 78  ;
    iIndex[ 318 ] = 55  ; jIndex[ 318 ] = 79  ;
    iIndex[ 319 ] = 55  ; jIndex[ 319 ] = 115 ;
    iIndex[ 320 ] = 55  ; jIndex[ 320 ] = 116 ;
    iIndex[ 321 ] = 55  ; jIndex[ 321 ] = 149 ;
    iIndex[ 322 ] = 56  ; jIndex[ 322 ] = 0   ;
    iIndex[ 323 ] = 56  ; jIndex[ 323 ] = 1   ;
    iIndex[ 324 ] = 56  ; jIndex[ 324 ] = 3   ;
    iIndex[ 325 ] = 56  ; jIndex[ 325 ] = 37  ;
    iIndex[ 326 ] = 56  ; jIndex[ 326 ] = 38  ;
    iIndex[ 327 ] = 56  ; jIndex[ 327 ] = 43  ;
    iIndex[ 328 ] = 56  ; jIndex[ 328 ] = 44  ;
    iIndex[ 329 ] = 56  ; jIndex[ 329 ] = 46  ;
    iIndex[ 330 ] = 56  ; jIndex[ 330 ] = 49  ;
    iIndex[ 331 ] = 56  ; jIndex[ 331 ] = 78  ;
    iIndex[ 332 ] = 56  ; jIndex[ 332 ] = 79  ;
    iIndex[ 333 ] = 56  ; jIndex[ 333 ] = 81  ;
    iIndex[ 334 ] = 56  ; jIndex[ 334 ] = 115 ;
    iIndex[ 335 ] = 56  ; jIndex[ 335 ] = 116 ;
    iIndex[ 336 ] = 56  ; jIndex[ 336 ] = 121 ;
    iIndex[ 337 ] = 56  ; jIndex[ 337 ] = 122 ;
    iIndex[ 338 ] = 56  ; jIndex[ 338 ] = 124 ;
    iIndex[ 339 ] = 56  ; jIndex[ 339 ] = 127 ;
    iIndex[ 340 ] = 57  ; jIndex[ 340 ] = 0   ;
    iIndex[ 341 ] = 57  ; jIndex[ 341 ] = 1   ;
    iIndex[ 342 ] = 57  ; jIndex[ 342 ] = 3   ;
    iIndex[ 343 ] = 57  ; jIndex[ 343 ] = 4   ;
    iIndex[ 344 ] = 57  ; jIndex[ 344 ] = 6   ;
    iIndex[ 345 ] = 57  ; jIndex[ 345 ] = 37  ;
    iIndex[ 346 ] = 57  ; jIndex[ 346 ] = 38  ;
    iIndex[ 347 ] = 57  ; jIndex[ 347 ] = 42  ;
    iIndex[ 348 ] = 57  ; jIndex[ 348 ] = 43  ;
    iIndex[ 349 ] = 57  ; jIndex[ 349 ] = 44  ;
    iIndex[ 350 ] = 57  ; jIndex[ 350 ] = 48  ;
    iIndex[ 351 ] = 57  ; jIndex[ 351 ] = 78  ;
    iIndex[ 352 ] = 57  ; jIndex[ 352 ] = 79  ;
    iIndex[ 353 ] = 57  ; jIndex[ 353 ] = 81  ;
    iIndex[ 354 ] = 57  ; jIndex[ 354 ] = 82  ;
    iIndex[ 355 ] = 57  ; jIndex[ 355 ] = 84  ;
    iIndex[ 356 ] = 57  ; jIndex[ 356 ] = 115 ;
    iIndex[ 357 ] = 57  ; jIndex[ 357 ] = 116 ;
    iIndex[ 358 ] = 57  ; jIndex[ 358 ] = 120 ;
    iIndex[ 359 ] = 57  ; jIndex[ 359 ] = 121 ;
    iIndex[ 360 ] = 57  ; jIndex[ 360 ] = 122 ;
    iIndex[ 361 ] = 57  ; jIndex[ 361 ] = 126 ;
    iIndex[ 362 ] = 58  ; jIndex[ 362 ] = 0   ;
    iIndex[ 363 ] = 58  ; jIndex[ 363 ] = 1   ;
    iIndex[ 364 ] = 58  ; jIndex[ 364 ] = 3   ;
    iIndex[ 365 ] = 58  ; jIndex[ 365 ] = 4   ;
    iIndex[ 366 ] = 58  ; jIndex[ 366 ] = 5   ;
    iIndex[ 367 ] = 58  ; jIndex[ 367 ] = 6   ;
    iIndex[ 368 ] = 58  ; jIndex[ 368 ] = 7   ;
    iIndex[ 369 ] = 58  ; jIndex[ 369 ] = 8   ;
    iIndex[ 370 ] = 58  ; jIndex[ 370 ] = 10  ;
    iIndex[ 371 ] = 58  ; jIndex[ 371 ] = 11  ;
    iIndex[ 372 ] = 58  ; jIndex[ 372 ] = 13  ;
    iIndex[ 373 ] = 58  ; jIndex[ 373 ] = 14  ;
    iIndex[ 374 ] = 58  ; jIndex[ 374 ] = 15  ;
    iIndex[ 375 ] = 58  ; jIndex[ 375 ] = 16  ;
    iIndex[ 376 ] = 58  ; jIndex[ 376 ] = 37  ;
    iIndex[ 377 ] = 58  ; jIndex[ 377 ] = 38  ;
    iIndex[ 378 ] = 58  ; jIndex[ 378 ] = 40  ;
    iIndex[ 379 ] = 58  ; jIndex[ 379 ] = 41  ;
    iIndex[ 380 ] = 58  ; jIndex[ 380 ] = 42  ;
    iIndex[ 381 ] = 58  ; jIndex[ 381 ] = 43  ;
    iIndex[ 382 ] = 58  ; jIndex[ 382 ] = 44  ;
    iIndex[ 383 ] = 58  ; jIndex[ 383 ] = 45  ;
    iIndex[ 384 ] = 58  ; jIndex[ 384 ] = 47  ;
    iIndex[ 385 ] = 58  ; jIndex[ 385 ] = 48  ;
    iIndex[ 386 ] = 58  ; jIndex[ 386 ] = 50  ;
    iIndex[ 387 ] = 58  ; jIndex[ 387 ] = 51  ;
    iIndex[ 388 ] = 58  ; jIndex[ 388 ] = 53  ;
    iIndex[ 389 ] = 58  ; jIndex[ 389 ] = 54  ;
    iIndex[ 390 ] = 58  ; jIndex[ 390 ] = 56  ;
    iIndex[ 391 ] = 58  ; jIndex[ 391 ] = 57  ;
    iIndex[ 392 ] = 58  ; jIndex[ 392 ] = 78  ;
    iIndex[ 393 ] = 58  ; jIndex[ 393 ] = 79  ;
    iIndex[ 394 ] = 58  ; jIndex[ 394 ] = 81  ;
    iIndex[ 395 ] = 58  ; jIndex[ 395 ] = 82  ;
    iIndex[ 396 ] = 58  ; jIndex[ 396 ] = 83  ;
    iIndex[ 397 ] = 58  ; jIndex[ 397 ] = 84  ;
    iIndex[ 398 ] = 58  ; jIndex[ 398 ] = 85  ;
    iIndex[ 399 ] = 58  ; jIndex[ 399 ] = 86  ;
    iIndex[ 400 ] = 58  ; jIndex[ 400 ] = 88  ;
    iIndex[ 401 ] = 58  ; jIndex[ 401 ] = 89  ;
    iIndex[ 402 ] = 58  ; jIndex[ 402 ] = 91  ;
    iIndex[ 403 ] = 58  ; jIndex[ 403 ] = 92  ;
    iIndex[ 404 ] = 58  ; jIndex[ 404 ] = 93  ;
    iIndex[ 405 ] = 58  ; jIndex[ 405 ] = 94  ;
    iIndex[ 406 ] = 58  ; jIndex[ 406 ] = 115 ;
    iIndex[ 407 ] = 58  ; jIndex[ 407 ] = 116 ;
    iIndex[ 408 ] = 58  ; jIndex[ 408 ] = 118 ;
    iIndex[ 409 ] = 58  ; jIndex[ 409 ] = 119 ;
    iIndex[ 410 ] = 58  ; jIndex[ 410 ] = 120 ;
    iIndex[ 411 ] = 58  ; jIndex[ 411 ] = 121 ;
    iIndex[ 412 ] = 58  ; jIndex[ 412 ] = 122 ;
    iIndex[ 413 ] = 58  ; jIndex[ 413 ] = 123 ;
    iIndex[ 414 ] = 58  ; jIndex[ 414 ] = 125 ;
    iIndex[ 415 ] = 58  ; jIndex[ 415 ] = 126 ;
    iIndex[ 416 ] = 58  ; jIndex[ 416 ] = 128 ;
    iIndex[ 417 ] = 58  ; jIndex[ 417 ] = 129 ;
    iIndex[ 418 ] = 58  ; jIndex[ 418 ] = 131 ;
    iIndex[ 419 ] = 58  ; jIndex[ 419 ] = 132 ;
    iIndex[ 420 ] = 58  ; jIndex[ 420 ] = 134 ;
    iIndex[ 421 ] = 58  ; jIndex[ 421 ] = 135 ;
    iIndex[ 422 ] = 59  ; jIndex[ 422 ] = 0   ;
    iIndex[ 423 ] = 59  ; jIndex[ 423 ] = 1   ;
    iIndex[ 424 ] = 59  ; jIndex[ 424 ] = 3   ;
    iIndex[ 425 ] = 59  ; jIndex[ 425 ] = 4   ;
    iIndex[ 426 ] = 59  ; jIndex[ 426 ] = 5   ;
    iIndex[ 427 ] = 59  ; jIndex[ 427 ] = 6   ;
    iIndex[ 428 ] = 59  ; jIndex[ 428 ] = 7   ;
    iIndex[ 429 ] = 59  ; jIndex[ 429 ] = 8   ;
    iIndex[ 430 ] = 59  ; jIndex[ 430 ] = 16  ;
    iIndex[ 431 ] = 59  ; jIndex[ 431 ] = 37  ;
    iIndex[ 432 ] = 59  ; jIndex[ 432 ] = 38  ;
    iIndex[ 433 ] = 59  ; jIndex[ 433 ] = 39  ;
    iIndex[ 434 ] = 59  ; jIndex[ 434 ] = 40  ;
    iIndex[ 435 ] = 59  ; jIndex[ 435 ] = 41  ;
    iIndex[ 436 ] = 59  ; jIndex[ 436 ] = 42  ;
    iIndex[ 437 ] = 59  ; jIndex[ 437 ] = 43  ;
    iIndex[ 438 ] = 59  ; jIndex[ 438 ] = 44  ;
    iIndex[ 439 ] = 59  ; jIndex[ 439 ] = 45  ;
    iIndex[ 440 ] = 59  ; jIndex[ 440 ] = 46  ;
    iIndex[ 441 ] = 59  ; jIndex[ 441 ] = 47  ;
    iIndex[ 442 ] = 59  ; jIndex[ 442 ] = 48  ;
    iIndex[ 443 ] = 59  ; jIndex[ 443 ] = 49  ;
    iIndex[ 444 ] = 59  ; jIndex[ 444 ] = 50  ;
    iIndex[ 445 ] = 59  ; jIndex[ 445 ] = 51  ;
    iIndex[ 446 ] = 59  ; jIndex[ 446 ] = 52  ;
    iIndex[ 447 ] = 59  ; jIndex[ 447 ] = 54  ;
    iIndex[ 448 ] = 59  ; jIndex[ 448 ] = 55  ;
    iIndex[ 449 ] = 59  ; jIndex[ 449 ] = 57  ;
    iIndex[ 450 ] = 59  ; jIndex[ 450 ] = 78  ;
    iIndex[ 451 ] = 59  ; jIndex[ 451 ] = 79  ;
    iIndex[ 452 ] = 59  ; jIndex[ 452 ] = 81  ;
    iIndex[ 453 ] = 59  ; jIndex[ 453 ] = 82  ;
    iIndex[ 454 ] = 59  ; jIndex[ 454 ] = 83  ;
    iIndex[ 455 ] = 59  ; jIndex[ 455 ] = 84  ;
    iIndex[ 456 ] = 59  ; jIndex[ 456 ] = 85  ;
    iIndex[ 457 ] = 59  ; jIndex[ 457 ] = 86  ;
    iIndex[ 458 ] = 59  ; jIndex[ 458 ] = 94  ;
    iIndex[ 459 ] = 59  ; jIndex[ 459 ] = 115 ;
    iIndex[ 460 ] = 59  ; jIndex[ 460 ] = 116 ;
    iIndex[ 461 ] = 59  ; jIndex[ 461 ] = 117 ;
    iIndex[ 462 ] = 59  ; jIndex[ 462 ] = 118 ;
    iIndex[ 463 ] = 59  ; jIndex[ 463 ] = 119 ;
    iIndex[ 464 ] = 59  ; jIndex[ 464 ] = 120 ;
    iIndex[ 465 ] = 59  ; jIndex[ 465 ] = 121 ;
    iIndex[ 466 ] = 59  ; jIndex[ 466 ] = 122 ;
    iIndex[ 467 ] = 59  ; jIndex[ 467 ] = 123 ;
    iIndex[ 468 ] = 59  ; jIndex[ 468 ] = 124 ;
    iIndex[ 469 ] = 59  ; jIndex[ 469 ] = 125 ;
    iIndex[ 470 ] = 59  ; jIndex[ 470 ] = 126 ;
    iIndex[ 471 ] = 59  ; jIndex[ 471 ] = 127 ;
    iIndex[ 472 ] = 59  ; jIndex[ 472 ] = 128 ;
    iIndex[ 473 ] = 59  ; jIndex[ 473 ] = 129 ;
    iIndex[ 474 ] = 59  ; jIndex[ 474 ] = 130 ;
    iIndex[ 475 ] = 59  ; jIndex[ 475 ] = 132 ;
    iIndex[ 476 ] = 59  ; jIndex[ 476 ] = 133 ;
    iIndex[ 477 ] = 59  ; jIndex[ 477 ] = 135 ;
    iIndex[ 478 ] = 60  ; jIndex[ 478 ] = 0   ;
    iIndex[ 479 ] = 60  ; jIndex[ 479 ] = 1   ;
    iIndex[ 480 ] = 60  ; jIndex[ 480 ] = 3   ;
    iIndex[ 481 ] = 60  ; jIndex[ 481 ] = 4   ;
    iIndex[ 482 ] = 60  ; jIndex[ 482 ] = 6   ;
    iIndex[ 483 ] = 60  ; jIndex[ 483 ] = 7   ;
    iIndex[ 484 ] = 60  ; jIndex[ 484 ] = 8   ;
    iIndex[ 485 ] = 60  ; jIndex[ 485 ] = 37  ;
    iIndex[ 486 ] = 60  ; jIndex[ 486 ] = 38  ;
    iIndex[ 487 ] = 60  ; jIndex[ 487 ] = 40  ;
    iIndex[ 488 ] = 60  ; jIndex[ 488 ] = 41  ;
    iIndex[ 489 ] = 60  ; jIndex[ 489 ] = 42  ;
    iIndex[ 490 ] = 60  ; jIndex[ 490 ] = 43  ;
    iIndex[ 491 ] = 60  ; jIndex[ 491 ] = 44  ;
    iIndex[ 492 ] = 60  ; jIndex[ 492 ] = 45  ;
    iIndex[ 493 ] = 60  ; jIndex[ 493 ] = 46  ;
    iIndex[ 494 ] = 60  ; jIndex[ 494 ] = 47  ;
    iIndex[ 495 ] = 60  ; jIndex[ 495 ] = 54  ;
    iIndex[ 496 ] = 60  ; jIndex[ 496 ] = 57  ;
    iIndex[ 497 ] = 60  ; jIndex[ 497 ] = 78  ;
    iIndex[ 498 ] = 60  ; jIndex[ 498 ] = 79  ;
    iIndex[ 499 ] = 60  ; jIndex[ 499 ] = 81  ;
    iIndex[ 500 ] = 60  ; jIndex[ 500 ] = 82  ;
    iIndex[ 501 ] = 60  ; jIndex[ 501 ] = 84  ;
    iIndex[ 502 ] = 60  ; jIndex[ 502 ] = 85  ;
    iIndex[ 503 ] = 60  ; jIndex[ 503 ] = 86  ;
    iIndex[ 504 ] = 60  ; jIndex[ 504 ] = 115 ;
    iIndex[ 505 ] = 60  ; jIndex[ 505 ] = 116 ;
    iIndex[ 506 ] = 60  ; jIndex[ 506 ] = 118 ;
    iIndex[ 507 ] = 60  ; jIndex[ 507 ] = 119 ;
    iIndex[ 508 ] = 60  ; jIndex[ 508 ] = 120 ;
    iIndex[ 509 ] = 60  ; jIndex[ 509 ] = 121 ;
    iIndex[ 510 ] = 60  ; jIndex[ 510 ] = 122 ;
    iIndex[ 511 ] = 60  ; jIndex[ 511 ] = 123 ;
    iIndex[ 512 ] = 60  ; jIndex[ 512 ] = 124 ;
    iIndex[ 513 ] = 60  ; jIndex[ 513 ] = 125 ;
    iIndex[ 514 ] = 60  ; jIndex[ 514 ] = 132 ;
    iIndex[ 515 ] = 60  ; jIndex[ 515 ] = 135 ;
    iIndex[ 516 ] = 61  ; jIndex[ 516 ] = 0   ;
    iIndex[ 517 ] = 61  ; jIndex[ 517 ] = 1   ;
    iIndex[ 518 ] = 61  ; jIndex[ 518 ] = 3   ;
    iIndex[ 519 ] = 61  ; jIndex[ 519 ] = 4   ;
    iIndex[ 520 ] = 61  ; jIndex[ 520 ] = 5   ;
    iIndex[ 521 ] = 61  ; jIndex[ 521 ] = 8   ;
    iIndex[ 522 ] = 61  ; jIndex[ 522 ] = 16  ;
    iIndex[ 523 ] = 61  ; jIndex[ 523 ] = 37  ;
    iIndex[ 524 ] = 61  ; jIndex[ 524 ] = 38  ;
    iIndex[ 525 ] = 61  ; jIndex[ 525 ] = 40  ;
    iIndex[ 526 ] = 61  ; jIndex[ 526 ] = 41  ;
    iIndex[ 527 ] = 61  ; jIndex[ 527 ] = 42  ;
    iIndex[ 528 ] = 61  ; jIndex[ 528 ] = 43  ;
    iIndex[ 529 ] = 61  ; jIndex[ 529 ] = 44  ;
    iIndex[ 530 ] = 61  ; jIndex[ 530 ] = 45  ;
    iIndex[ 531 ] = 61  ; jIndex[ 531 ] = 50  ;
    iIndex[ 532 ] = 61  ; jIndex[ 532 ] = 51  ;
    iIndex[ 533 ] = 61  ; jIndex[ 533 ] = 53  ;
    iIndex[ 534 ] = 61  ; jIndex[ 534 ] = 78  ;
    iIndex[ 535 ] = 61  ; jIndex[ 535 ] = 79  ;
    iIndex[ 536 ] = 61  ; jIndex[ 536 ] = 81  ;
    iIndex[ 537 ] = 61  ; jIndex[ 537 ] = 82  ;
    iIndex[ 538 ] = 61  ; jIndex[ 538 ] = 83  ;
    iIndex[ 539 ] = 61  ; jIndex[ 539 ] = 86  ;
    iIndex[ 540 ] = 61  ; jIndex[ 540 ] = 94  ;
    iIndex[ 541 ] = 61  ; jIndex[ 541 ] = 115 ;
    iIndex[ 542 ] = 61  ; jIndex[ 542 ] = 116 ;
    iIndex[ 543 ] = 61  ; jIndex[ 543 ] = 118 ;
    iIndex[ 544 ] = 61  ; jIndex[ 544 ] = 119 ;
    iIndex[ 545 ] = 61  ; jIndex[ 545 ] = 120 ;
    iIndex[ 546 ] = 61  ; jIndex[ 546 ] = 121 ;
    iIndex[ 547 ] = 61  ; jIndex[ 547 ] = 122 ;
    iIndex[ 548 ] = 61  ; jIndex[ 548 ] = 123 ;
    iIndex[ 549 ] = 61  ; jIndex[ 549 ] = 128 ;
    iIndex[ 550 ] = 61  ; jIndex[ 550 ] = 129 ;
    iIndex[ 551 ] = 61  ; jIndex[ 551 ] = 131 ;
    iIndex[ 552 ] = 62  ; jIndex[ 552 ] = 0   ;
    iIndex[ 553 ] = 62  ; jIndex[ 553 ] = 1   ;
    iIndex[ 554 ] = 62  ; jIndex[ 554 ] = 3   ;
    iIndex[ 555 ] = 62  ; jIndex[ 555 ] = 4   ;
    iIndex[ 556 ] = 62  ; jIndex[ 556 ] = 5   ;
    iIndex[ 557 ] = 62  ; jIndex[ 557 ] = 7   ;
    iIndex[ 558 ] = 62  ; jIndex[ 558 ] = 37  ;
    iIndex[ 559 ] = 62  ; jIndex[ 559 ] = 38  ;
    iIndex[ 560 ] = 62  ; jIndex[ 560 ] = 39  ;
    iIndex[ 561 ] = 62  ; jIndex[ 561 ] = 40  ;
    iIndex[ 562 ] = 62  ; jIndex[ 562 ] = 41  ;
    iIndex[ 563 ] = 62  ; jIndex[ 563 ] = 43  ;
    iIndex[ 564 ] = 62  ; jIndex[ 564 ] = 44  ;
    iIndex[ 565 ] = 62  ; jIndex[ 565 ] = 46  ;
    iIndex[ 566 ] = 62  ; jIndex[ 566 ] = 49  ;
    iIndex[ 567 ] = 62  ; jIndex[ 567 ] = 55  ;
    iIndex[ 568 ] = 62  ; jIndex[ 568 ] = 57  ;
    iIndex[ 569 ] = 62  ; jIndex[ 569 ] = 78  ;
    iIndex[ 570 ] = 62  ; jIndex[ 570 ] = 79  ;
    iIndex[ 571 ] = 62  ; jIndex[ 571 ] = 81  ;
    iIndex[ 572 ] = 62  ; jIndex[ 572 ] = 82  ;
    iIndex[ 573 ] = 62  ; jIndex[ 573 ] = 83  ;
    iIndex[ 574 ] = 62  ; jIndex[ 574 ] = 85  ;
    iIndex[ 575 ] = 62  ; jIndex[ 575 ] = 115 ;
    iIndex[ 576 ] = 62  ; jIndex[ 576 ] = 116 ;
    iIndex[ 577 ] = 62  ; jIndex[ 577 ] = 117 ;
    iIndex[ 578 ] = 62  ; jIndex[ 578 ] = 118 ;
    iIndex[ 579 ] = 62  ; jIndex[ 579 ] = 119 ;
    iIndex[ 580 ] = 62  ; jIndex[ 580 ] = 121 ;
    iIndex[ 581 ] = 62  ; jIndex[ 581 ] = 122 ;
    iIndex[ 582 ] = 62  ; jIndex[ 582 ] = 124 ;
    iIndex[ 583 ] = 62  ; jIndex[ 583 ] = 127 ;
    iIndex[ 584 ] = 62  ; jIndex[ 584 ] = 133 ;
    iIndex[ 585 ] = 62  ; jIndex[ 585 ] = 135 ;
    iIndex[ 586 ] = 63  ; jIndex[ 586 ] = 0   ;
    iIndex[ 587 ] = 63  ; jIndex[ 587 ] = 1   ;
    iIndex[ 588 ] = 63  ; jIndex[ 588 ] = 3   ;
    iIndex[ 589 ] = 63  ; jIndex[ 589 ] = 4   ;
    iIndex[ 590 ] = 63  ; jIndex[ 590 ] = 5   ;
    iIndex[ 591 ] = 63  ; jIndex[ 591 ] = 6   ;
    iIndex[ 592 ] = 63  ; jIndex[ 592 ] = 37  ;
    iIndex[ 593 ] = 63  ; jIndex[ 593 ] = 38  ;
    iIndex[ 594 ] = 63  ; jIndex[ 594 ] = 39  ;
    iIndex[ 595 ] = 63  ; jIndex[ 595 ] = 40  ;
    iIndex[ 596 ] = 63  ; jIndex[ 596 ] = 41  ;
    iIndex[ 597 ] = 63  ; jIndex[ 597 ] = 42  ;
    iIndex[ 598 ] = 63  ; jIndex[ 598 ] = 43  ;
    iIndex[ 599 ] = 63  ; jIndex[ 599 ] = 44  ;
    iIndex[ 600 ] = 63  ; jIndex[ 600 ] = 47  ;
    iIndex[ 601 ] = 63  ; jIndex[ 601 ] = 52  ;
    iIndex[ 602 ] = 63  ; jIndex[ 602 ] = 54  ;
    iIndex[ 603 ] = 63  ; jIndex[ 603 ] = 78  ;
    iIndex[ 604 ] = 63  ; jIndex[ 604 ] = 79  ;
    iIndex[ 605 ] = 63  ; jIndex[ 605 ] = 81  ;
    iIndex[ 606 ] = 63  ; jIndex[ 606 ] = 82  ;
    iIndex[ 607 ] = 63  ; jIndex[ 607 ] = 83  ;
    iIndex[ 608 ] = 63  ; jIndex[ 608 ] = 84  ;
    iIndex[ 609 ] = 63  ; jIndex[ 609 ] = 115 ;
    iIndex[ 610 ] = 63  ; jIndex[ 610 ] = 116 ;
    iIndex[ 611 ] = 63  ; jIndex[ 611 ] = 117 ;
    iIndex[ 612 ] = 63  ; jIndex[ 612 ] = 118 ;
    iIndex[ 613 ] = 63  ; jIndex[ 613 ] = 119 ;
    iIndex[ 614 ] = 63  ; jIndex[ 614 ] = 120 ;
    iIndex[ 615 ] = 63  ; jIndex[ 615 ] = 121 ;
    iIndex[ 616 ] = 63  ; jIndex[ 616 ] = 122 ;
    iIndex[ 617 ] = 63  ; jIndex[ 617 ] = 125 ;
    iIndex[ 618 ] = 63  ; jIndex[ 618 ] = 130 ;
    iIndex[ 619 ] = 63  ; jIndex[ 619 ] = 132 ;
    iIndex[ 620 ] = 64  ; jIndex[ 620 ] = 0   ;
    iIndex[ 621 ] = 64  ; jIndex[ 621 ] = 1   ;
    iIndex[ 622 ] = 64  ; jIndex[ 622 ] = 37  ;
    iIndex[ 623 ] = 64  ; jIndex[ 623 ] = 38  ;
    iIndex[ 624 ] = 64  ; jIndex[ 624 ] = 52  ;
    iIndex[ 625 ] = 64  ; jIndex[ 625 ] = 78  ;
    iIndex[ 626 ] = 64  ; jIndex[ 626 ] = 79  ;
    iIndex[ 627 ] = 64  ; jIndex[ 627 ] = 115 ;
    iIndex[ 628 ] = 64  ; jIndex[ 628 ] = 116 ;
    iIndex[ 629 ] = 64  ; jIndex[ 629 ] = 130 ;
    iIndex[ 630 ] = 65  ; jIndex[ 630 ] = 0   ;
    iIndex[ 631 ] = 65  ; jIndex[ 631 ] = 1   ;
    iIndex[ 632 ] = 65  ; jIndex[ 632 ] = 3   ;
    iIndex[ 633 ] = 65  ; jIndex[ 633 ] = 37  ;
    iIndex[ 634 ] = 65  ; jIndex[ 634 ] = 38  ;
    iIndex[ 635 ] = 65  ; jIndex[ 635 ] = 53  ;
    iIndex[ 636 ] = 65  ; jIndex[ 636 ] = 54  ;
    iIndex[ 637 ] = 65  ; jIndex[ 637 ] = 78  ;
    iIndex[ 638 ] = 65  ; jIndex[ 638 ] = 79  ;
    iIndex[ 639 ] = 65  ; jIndex[ 639 ] = 81  ;
    iIndex[ 640 ] = 65  ; jIndex[ 640 ] = 115 ;
    iIndex[ 641 ] = 65  ; jIndex[ 641 ] = 116 ;
    iIndex[ 642 ] = 65  ; jIndex[ 642 ] = 131 ;
    iIndex[ 643 ] = 65  ; jIndex[ 643 ] = 132 ;
    iIndex[ 644 ] = 66  ; jIndex[ 644 ] = 0   ;
    iIndex[ 645 ] = 66  ; jIndex[ 645 ] = 1   ;
    iIndex[ 646 ] = 66  ; jIndex[ 646 ] = 3   ;
    iIndex[ 647 ] = 66  ; jIndex[ 647 ] = 37  ;
    iIndex[ 648 ] = 66  ; jIndex[ 648 ] = 38  ;
    iIndex[ 649 ] = 66  ; jIndex[ 649 ] = 53  ;
    iIndex[ 650 ] = 66  ; jIndex[ 650 ] = 54  ;
    iIndex[ 651 ] = 66  ; jIndex[ 651 ] = 78  ;
    iIndex[ 652 ] = 66  ; jIndex[ 652 ] = 79  ;
    iIndex[ 653 ] = 66  ; jIndex[ 653 ] = 81  ;
    iIndex[ 654 ] = 66  ; jIndex[ 654 ] = 115 ;
    iIndex[ 655 ] = 66  ; jIndex[ 655 ] = 116 ;
    iIndex[ 656 ] = 66  ; jIndex[ 656 ] = 131 ;
    iIndex[ 657 ] = 66  ; jIndex[ 657 ] = 132 ;
    iIndex[ 658 ] = 67  ; jIndex[ 658 ] = 0   ;
    iIndex[ 659 ] = 67  ; jIndex[ 659 ] = 1   ;
    iIndex[ 660 ] = 67  ; jIndex[ 660 ] = 37  ;
    iIndex[ 661 ] = 67  ; jIndex[ 661 ] = 38  ;
    iIndex[ 662 ] = 67  ; jIndex[ 662 ] = 55  ;
    iIndex[ 663 ] = 67  ; jIndex[ 663 ] = 78  ;
    iIndex[ 664 ] = 67  ; jIndex[ 664 ] = 79  ;
    iIndex[ 665 ] = 67  ; jIndex[ 665 ] = 115 ;
    iIndex[ 666 ] = 67  ; jIndex[ 666 ] = 116 ;
    iIndex[ 667 ] = 67  ; jIndex[ 667 ] = 133 ;
    iIndex[ 668 ] = 68  ; jIndex[ 668 ] = 0   ;
    iIndex[ 669 ] = 68  ; jIndex[ 669 ] = 1   ;
    iIndex[ 670 ] = 68  ; jIndex[ 670 ] = 3   ;
    iIndex[ 671 ] = 68  ; jIndex[ 671 ] = 37  ;
    iIndex[ 672 ] = 68  ; jIndex[ 672 ] = 38  ;
    iIndex[ 673 ] = 68  ; jIndex[ 673 ] = 56  ;
    iIndex[ 674 ] = 68  ; jIndex[ 674 ] = 57  ;
    iIndex[ 675 ] = 68  ; jIndex[ 675 ] = 78  ;
    iIndex[ 676 ] = 68  ; jIndex[ 676 ] = 79  ;
    iIndex[ 677 ] = 68  ; jIndex[ 677 ] = 81  ;
    iIndex[ 678 ] = 68  ; jIndex[ 678 ] = 115 ;
    iIndex[ 679 ] = 68  ; jIndex[ 679 ] = 116 ;
    iIndex[ 680 ] = 68  ; jIndex[ 680 ] = 134 ;
    iIndex[ 681 ] = 68  ; jIndex[ 681 ] = 135 ;
    iIndex[ 682 ] = 69  ; jIndex[ 682 ] = 0   ;
    iIndex[ 683 ] = 69  ; jIndex[ 683 ] = 1   ;
    iIndex[ 684 ] = 69  ; jIndex[ 684 ] = 3   ;
    iIndex[ 685 ] = 69  ; jIndex[ 685 ] = 37  ;
    iIndex[ 686 ] = 69  ; jIndex[ 686 ] = 38  ;
    iIndex[ 687 ] = 69  ; jIndex[ 687 ] = 56  ;
    iIndex[ 688 ] = 69  ; jIndex[ 688 ] = 57  ;
    iIndex[ 689 ] = 69  ; jIndex[ 689 ] = 78  ;
    iIndex[ 690 ] = 69  ; jIndex[ 690 ] = 79  ;
    iIndex[ 691 ] = 69  ; jIndex[ 691 ] = 81  ;
    iIndex[ 692 ] = 69  ; jIndex[ 692 ] = 115 ;
    iIndex[ 693 ] = 69  ; jIndex[ 693 ] = 116 ;
    iIndex[ 694 ] = 69  ; jIndex[ 694 ] = 134 ;
    iIndex[ 695 ] = 69  ; jIndex[ 695 ] = 135 ;
    iIndex[ 696 ] = 70  ; jIndex[ 696 ] = 0   ;
    iIndex[ 697 ] = 70  ; jIndex[ 697 ] = 1   ;
    iIndex[ 698 ] = 70  ; jIndex[ 698 ] = 3   ;
    iIndex[ 699 ] = 70  ; jIndex[ 699 ] = 16  ;
    iIndex[ 700 ] = 70  ; jIndex[ 700 ] = 37  ;
    iIndex[ 701 ] = 70  ; jIndex[ 701 ] = 38  ;
    iIndex[ 702 ] = 70  ; jIndex[ 702 ] = 50  ;
    iIndex[ 703 ] = 70  ; jIndex[ 703 ] = 52  ;
    iIndex[ 704 ] = 70  ; jIndex[ 704 ] = 78  ;
    iIndex[ 705 ] = 70  ; jIndex[ 705 ] = 79  ;
    iIndex[ 706 ] = 70  ; jIndex[ 706 ] = 81  ;
    iIndex[ 707 ] = 70  ; jIndex[ 707 ] = 94  ;
    iIndex[ 708 ] = 70  ; jIndex[ 708 ] = 115 ;
    iIndex[ 709 ] = 70  ; jIndex[ 709 ] = 116 ;
    iIndex[ 710 ] = 70  ; jIndex[ 710 ] = 128 ;
    iIndex[ 711 ] = 70  ; jIndex[ 711 ] = 130 ;
    iIndex[ 712 ] = 71  ; jIndex[ 712 ] = 0   ;
    iIndex[ 713 ] = 71  ; jIndex[ 713 ] = 1   ;
    iIndex[ 714 ] = 71  ; jIndex[ 714 ] = 3   ;
    iIndex[ 715 ] = 71  ; jIndex[ 715 ] = 4   ;
    iIndex[ 716 ] = 71  ; jIndex[ 716 ] = 6   ;
    iIndex[ 717 ] = 71  ; jIndex[ 717 ] = 15  ;
    iIndex[ 718 ] = 71  ; jIndex[ 718 ] = 16  ;
    iIndex[ 719 ] = 71  ; jIndex[ 719 ] = 37  ;
    iIndex[ 720 ] = 71  ; jIndex[ 720 ] = 38  ;
    iIndex[ 721 ] = 71  ; jIndex[ 721 ] = 51  ;
    iIndex[ 722 ] = 71  ; jIndex[ 722 ] = 52  ;
    iIndex[ 723 ] = 71  ; jIndex[ 723 ] = 53  ;
    iIndex[ 724 ] = 71  ; jIndex[ 724 ] = 54  ;
    iIndex[ 725 ] = 71  ; jIndex[ 725 ] = 78  ;
    iIndex[ 726 ] = 71  ; jIndex[ 726 ] = 79  ;
    iIndex[ 727 ] = 71  ; jIndex[ 727 ] = 81  ;
    iIndex[ 728 ] = 71  ; jIndex[ 728 ] = 82  ;
    iIndex[ 729 ] = 71  ; jIndex[ 729 ] = 84  ;
    iIndex[ 730 ] = 71  ; jIndex[ 730 ] = 93  ;
    iIndex[ 731 ] = 71  ; jIndex[ 731 ] = 94  ;
    iIndex[ 732 ] = 71  ; jIndex[ 732 ] = 115 ;
    iIndex[ 733 ] = 71  ; jIndex[ 733 ] = 116 ;
    iIndex[ 734 ] = 71  ; jIndex[ 734 ] = 129 ;
    iIndex[ 735 ] = 71  ; jIndex[ 735 ] = 130 ;
    iIndex[ 736 ] = 71  ; jIndex[ 736 ] = 131 ;
    iIndex[ 737 ] = 71  ; jIndex[ 737 ] = 132 ;
    iIndex[ 738 ] = 72  ; jIndex[ 738 ] = 0   ;
    iIndex[ 739 ] = 72  ; jIndex[ 739 ] = 1   ;
    iIndex[ 740 ] = 72  ; jIndex[ 740 ] = 37  ;
    iIndex[ 741 ] = 72  ; jIndex[ 741 ] = 38  ;
    iIndex[ 742 ] = 72  ; jIndex[ 742 ] = 73  ;
    iIndex[ 743 ] = 72  ; jIndex[ 743 ] = 78  ;
    iIndex[ 744 ] = 72  ; jIndex[ 744 ] = 79  ;
    iIndex[ 745 ] = 72  ; jIndex[ 745 ] = 115 ;
    iIndex[ 746 ] = 72  ; jIndex[ 746 ] = 116 ;
    iIndex[ 747 ] = 72  ; jIndex[ 747 ] = 151 ;
    iIndex[ 748 ] = 73  ; jIndex[ 748 ] = 0   ;
    iIndex[ 749 ] = 73  ; jIndex[ 749 ] = 1   ;
    iIndex[ 750 ] = 73  ; jIndex[ 750 ] = 37  ;
    iIndex[ 751 ] = 73  ; jIndex[ 751 ] = 38  ;
    iIndex[ 752 ] = 73  ; jIndex[ 752 ] = 72  ;
    iIndex[ 753 ] = 73  ; jIndex[ 753 ] = 78  ;
    iIndex[ 754 ] = 73  ; jIndex[ 754 ] = 79  ;
    iIndex[ 755 ] = 73  ; jIndex[ 755 ] = 115 ;
    iIndex[ 756 ] = 73  ; jIndex[ 756 ] = 116 ;
    iIndex[ 757 ] = 73  ; jIndex[ 757 ] = 150 ;
    iIndex[ 758 ] = 74  ; jIndex[ 758 ] = 0   ;
    iIndex[ 759 ] = 74  ; jIndex[ 759 ] = 1   ;
    iIndex[ 760 ] = 74  ; jIndex[ 760 ] = 37  ;
    iIndex[ 761 ] = 74  ; jIndex[ 761 ] = 38  ;
    iIndex[ 762 ] = 74  ; jIndex[ 762 ] = 74  ;
    iIndex[ 763 ] = 74  ; jIndex[ 763 ] = 78  ;
    iIndex[ 764 ] = 74  ; jIndex[ 764 ] = 79  ;
    iIndex[ 765 ] = 74  ; jIndex[ 765 ] = 115 ;
    iIndex[ 766 ] = 74  ; jIndex[ 766 ] = 116 ;
    iIndex[ 767 ] = 74  ; jIndex[ 767 ] = 152 ;
    iIndex[ 768 ] = 75  ; jIndex[ 768 ] = 0   ;
    iIndex[ 769 ] = 75  ; jIndex[ 769 ] = 1   ;
    iIndex[ 770 ] = 75  ; jIndex[ 770 ] = 37  ;
    iIndex[ 771 ] = 75  ; jIndex[ 771 ] = 38  ;
    iIndex[ 772 ] = 75  ; jIndex[ 772 ] = 75  ;
    iIndex[ 773 ] = 75  ; jIndex[ 773 ] = 78  ;
    iIndex[ 774 ] = 75  ; jIndex[ 774 ] = 79  ;
    iIndex[ 775 ] = 75  ; jIndex[ 775 ] = 115 ;
    iIndex[ 776 ] = 75  ; jIndex[ 776 ] = 116 ;
    iIndex[ 777 ] = 75  ; jIndex[ 777 ] = 153 ;
    iIndex[ 778 ] = 76  ; jIndex[ 778 ] = 0   ;
    iIndex[ 779 ] = 76  ; jIndex[ 779 ] = 1   ;
    iIndex[ 780 ] = 76  ; jIndex[ 780 ] = 37  ;
    iIndex[ 781 ] = 76  ; jIndex[ 781 ] = 38  ;
    iIndex[ 782 ] = 76  ; jIndex[ 782 ] = 76  ;
    iIndex[ 783 ] = 76  ; jIndex[ 783 ] = 78  ;
    iIndex[ 784 ] = 76  ; jIndex[ 784 ] = 79  ;
    iIndex[ 785 ] = 76  ; jIndex[ 785 ] = 115 ;
    iIndex[ 786 ] = 76  ; jIndex[ 786 ] = 116 ;
    iIndex[ 787 ] = 76  ; jIndex[ 787 ] = 154 ;
    iIndex[ 788 ] = 77  ; jIndex[ 788 ] = 0   ;
    iIndex[ 789 ] = 77  ; jIndex[ 789 ] = 1   ;
    iIndex[ 790 ] = 77  ; jIndex[ 790 ] = 37  ;
    iIndex[ 791 ] = 77  ; jIndex[ 791 ] = 38  ;
    iIndex[ 792 ] = 77  ; jIndex[ 792 ] = 77  ;
    iIndex[ 793 ] = 77  ; jIndex[ 793 ] = 78  ;
    iIndex[ 794 ] = 77  ; jIndex[ 794 ] = 79  ;
    iIndex[ 795 ] = 77  ; jIndex[ 795 ] = 115 ;
    iIndex[ 796 ] = 77  ; jIndex[ 796 ] = 116 ;
    iIndex[ 797 ] = 77  ; jIndex[ 797 ] = 155 ;
  }

  void
  Straight::DjumpDxlp_sparse(
    NodeType2 const    & LEFT__,
    NodeType2 const    & RIGHT__,
    P_const_pointer_type P__,
    real_type            result__[]
  ) const {
    integer i_segment_left  = LEFT__.i_segment;
    real_type const * QL__  = LEFT__.q;
    real_type const * XL__  = LEFT__.x;
    real_type const * LL__  = LEFT__.lambda;
    integer i_segment_right = RIGHT__.i_segment;
    real_type const * QR__  = RIGHT__.q;
    real_type const * XR__  = RIGHT__.x;
    real_type const * LR__  = RIGHT__.lambda;
    Road2D::SegmentClass const & segmentLeft  = pRoad->getSegmentByIndex(i_segment_left);
    Road2D::SegmentClass const & segmentRight = pRoad->getSegmentByIndex(i_segment_right);
    result__[ 0   ] = -1;
    result__[ 1   ] = 1;
    result__[ 2   ] = -1;
    result__[ 3   ] = 1;
    result__[ 4   ] = -1;
    result__[ 5   ] = 1;
    result__[ 6   ] = -1;
    result__[ 7   ] = 1;
    result__[ 8   ] = -1;
    result__[ 9   ] = 1;
    result__[ 10  ] = -1;
    result__[ 11  ] = 1;
    result__[ 12  ] = -1;
    result__[ 13  ] = 1;
    result__[ 14  ] = -1;
    result__[ 15  ] = 1;
    result__[ 16  ] = -1;
    result__[ 17  ] = 1;
    result__[ 18  ] = -1;
    result__[ 19  ] = 1;
    result__[ 20  ] = -1;
    result__[ 21  ] = 1;
    result__[ 22  ] = -1;
    result__[ 23  ] = 1;
    result__[ 24  ] = -1;
    result__[ 25  ] = 1;
    result__[ 26  ] = -1;
    result__[ 27  ] = 1;
    result__[ 28  ] = -1;
    result__[ 29  ] = 1;
    result__[ 30  ] = -1;
    result__[ 31  ] = 1;
    result__[ 32  ] = -1;
    result__[ 33  ] = 1;
    result__[ 34  ] = -1;
    result__[ 35  ] = 1;
    result__[ 36  ] = -1;
    result__[ 37  ] = 1;
    result__[ 38  ] = -1;
    result__[ 39  ] = 1;
    result__[ 40  ] = -1;
    result__[ 41  ] = 1;
    result__[ 42  ] = -1;
    result__[ 43  ] = 1;
    result__[ 44  ] = -1;
    result__[ 45  ] = 1;
    result__[ 46  ] = -1;
    result__[ 47  ] = 1;
    result__[ 48  ] = -1;
    result__[ 49  ] = 1;
    result__[ 50  ] = -1;
    result__[ 51  ] = 1;
    result__[ 52  ] = -1;
    result__[ 53  ] = 1;
    result__[ 54  ] = -1;
    result__[ 55  ] = 1;
    result__[ 56  ] = -1;
    result__[ 57  ] = 1;
    result__[ 58  ] = -1;
    result__[ 59  ] = 1;
    result__[ 60  ] = -1;
    result__[ 61  ] = 1;
    result__[ 62  ] = -1;
    result__[ 63  ] = 1;
    result__[ 64  ] = -1;
    result__[ 65  ] = 1;
    result__[ 66  ] = -1;
    result__[ 67  ] = 1;
    result__[ 68  ] = -1;
    result__[ 69  ] = 1;
    result__[ 70  ] = -1;
    result__[ 71  ] = 1;
    result__[ 72  ] = -1;
    result__[ 73  ] = 1;
    result__[ 74  ] = -1;
    result__[ 75  ] = 1;
    result__[ 76  ] = -1;
    result__[ 77  ] = 1;
    real_type t3   = ALIAS_kappa_L(QL__[0]);
    real_type t5   = t3 * XL__[37] - 1;
    real_type t6   = 1.0 / t5;
    real_type t7   = XL__[38];
    real_type t8   = cos(t7);
    real_type t9   = t8 * t6;
    real_type t10  = ModelPars[25];
    real_type t11  = LL__[0];
    real_type t12  = t11 * t10;
    real_type t14  = XL__[7];
    real_type t15  = cos(t14);
    real_type t16  = ModelPars[76];
    real_type t18  = ModelPars[233];
    real_type t19  = t18 * t16 * t15;
    real_type t20  = sin(t14);
    real_type t21  = ModelPars[24];
    real_type t22  = ModelPars[219];
    real_type t23  = -t21 + t22;
    real_type t25  = ModelPars[78];
    real_type t26  = t21 * t25;
    real_type t27  = t16 * t23 - t26;
    real_type t28  = t27 * t20;
    real_type t29  = ModelPars[75];
    real_type t30  = ModelPars[71];
    real_type t31  = t30 * t29;
    real_type t32  = ModelPars[66];
    real_type t33  = cos(t32);
    real_type t35  = t18 * t16 * t33;
    real_type t36  = sin(t32);
    real_type t38  = -t16 * t23;
    real_type t39  = t38 + t26;
    real_type t40  = t39 * t36;
    real_type t41  = ModelPars[214];
    real_type t42  = cos(t41);
    real_type t43  = t42 * t31;
    real_type t44  = ModelPars[204];
    real_type t45  = ModelPars[77];
    real_type t46  = t45 * t44;
    real_type t47  = XL__[8];
    real_type t48  = t45 * t47;
    real_type t49  = ModelPars[31];
    real_type t50  = t49 * t10;
    real_type t51  = -t19 + t28 - t31 + t35 + t40 + t43 + t46 - t48 - t50;
    real_type t52  = XL__[3];
    real_type t53  = cos(t52);
    real_type t54  = t53 * t51;
    real_type t56  = ModelPars[65];
    real_type t57  = XL__[4] + t56;
    real_type t58  = cos(t57);
    real_type t59  = t58 * t9;
    real_type t60  = t59 * t54;
    real_type t61  = t27 * t15;
    real_type t63  = t18 * t16 * t20;
    real_type t64  = t39 * t33;
    real_type t66  = t18 * t16 * t36;
    real_type t67  = sin(t41);
    real_type t68  = t67 * t31;
    real_type t69  = ModelPars[30];
    real_type t70  = t69 * t10;
    real_type t71  = t61 + t63 + t64 - t66 - t68 + t70;
    real_type t72  = t53 * t71;
    real_type t73  = sin(t57);
    real_type t74  = t73 * t72;
    real_type t75  = t74 * t9;
    real_type t76  = t53 * t10;
    real_type t77  = XL__[5];
    real_type t78  = t77 * t76;
    real_type t79  = sin(t52);
    real_type t80  = ModelPars[149];
    real_type t81  = t80 * t45;
    real_type t82  = ModelPars[190];
    real_type t83  = ModelPars[220];
    real_type t85  = t83 * t82 + t81;
    real_type t86  = t85 * t79;
    real_type t87  = XL__[6];
    real_type t89  = t87 * t86 + t78;
    real_type t92  = LL__[4];
    real_type t94  = t39 * t20;
    real_type t95  = t27 * t36;
    real_type t96  = t19 + t94 + t31 - t35 + t95 - t43 - t46 + t48 + t50;
    real_type t97  = t79 * t96;
    real_type t99  = t71 * t79;
    real_type t100 = t73 * t99;
    real_type t102 = t79 * t10;
    real_type t103 = t77 * t102;
    real_type t104 = -t85;
    real_type t105 = t87 * t104;
    real_type t107 = t53 * t105 + t103;
    real_type t108 = t6 * t107;
    real_type t110 = -t100 * t9 - t8 * t108 - t59 * t97;
    real_type t111 = LL__[5];
    real_type t113 = t85 * t9;
    real_type t114 = t58 * t87;
    real_type t115 = LL__[6];
    real_type t116 = t115 * t114;
    real_type t118 = t19 - t28;
    real_type t119 = t58 * t118;
    real_type t121 = t61 + t63;
    real_type t122 = t73 * t121;
    real_type t123 = t122 * t9;
    real_type t125 = LL__[7];
    real_type t127 = t6 * t45;
    real_type t128 = t73 * t8;
    real_type t129 = LL__[8];
    result__[ 78  ] = t12 * t9 - t92 * (-t89 * t9 + t60 - t75) - t111 * t110 - t116 * t113 - t125 * (-t119 * t9 - t123) - t129 * t128 * t127;
    real_type t132 = sin(t7);
    real_type t133 = t132 * t6;
    real_type t135 = t58 * t133;
    real_type t136 = t135 * t54;
    real_type t137 = t74 * t133;
    real_type t144 = t100 * t133 + t132 * t108 + t135 * t97;
    real_type t146 = t85 * t133;
    real_type t149 = t122 * t133;
    real_type t152 = t73 * t132;
    result__[ 79  ] = -t12 * t133 - t92 * (t89 * t133 - t136 + t137) - t111 * t144 + t116 * t146 - t125 * (t119 * t133 + t149) + t129 * t152 * t127;
    real_type t155 = XL__[0];
    real_type t157 = XL__[1];
    real_type t159 = -t157 * t132 + t155 * t8;
    real_type t160 = t159 * t6;
    real_type t161 = t51 * t79;
    real_type t162 = t58 * t161;
    real_type t163 = t162 * t160;
    real_type t164 = t100 * t160;
    real_type t165 = t85 * t53;
    real_type t167 = t87 * t165 - t103;
    real_type t168 = t167 * t160;
    real_type t171 = t53 * t96;
    real_type t172 = t58 * t160;
    real_type t174 = t74 * t160;
    real_type t176 = -t79 * t105 + t78;
    real_type t179 = -t159 * t6 * t176 - t172 * t171 - t174;
    result__[ 80  ] = -t92 * (-t163 + t164 - t168) - t111 * t179;
    real_type t181 = t73 * t160;
    real_type t182 = t181 * t54;
    real_type t183 = t58 * t72;
    real_type t185 = -t183 * t160 - t182;
    real_type t187 = t181 * t97;
    real_type t189 = t58 * t99 * t160;
    real_type t190 = t187 - t189;
    real_type t192 = t85 * t160;
    real_type t193 = t73 * t87;
    real_type t194 = t115 * t193;
    real_type t196 = t73 * t118;
    real_type t197 = t196 * t160;
    real_type t198 = t58 * t121;
    real_type t199 = t198 * t160;
    real_type t202 = t58 * t159;
    real_type t203 = t129 * t202;
    result__[ 81  ] = -t92 * t185 - t111 * t190 + t194 * t192 - t125 * (t197 - t199) - t203 * t127;
    real_type t207 = t111 * t160;
    result__[ 82  ] = t92 * t76 * t160 + t207 * t102;
    real_type t211 = t53 * t104;
    result__[ 83  ] = -t115 * t58 * t85 * t160 + t92 * t86 * t160 + t207 * t211;
    real_type t216 = t121 * t53;
    real_type t217 = t58 * t216;
    real_type t218 = t217 * t160;
    real_type t219 = t53 * t118;
    real_type t222 = -t73 * t219 * t160 + t218;
    real_type t224 = t39 * t15;
    real_type t225 = t224 - t63;
    real_type t226 = t79 * t225;
    real_type t228 = t118 * t79;
    real_type t231 = -t73 * t228 * t160 - t172 * t226;
    real_type t233 = -t121;
    result__[ 84  ] = -t92 * t222 - t111 * t231 - t125 * (-t58 * t233 * t160 - t197);
    real_type t238 = t53 * t45;
    real_type t239 = t6 * t238;
    real_type t242 = t79 * t45;
    real_type t243 = t6 * t242;
    real_type t244 = t111 * t202;
    result__[ 85  ] = t92 * t202 * t239 + t244 * t243;
    real_type t246 = t5 * t5;
    real_type t247 = 1.0 / t246;
    real_type t248 = t159 * t247;
    real_type t251 = t247 * t54;
    real_type t252 = t3 * t202;
    real_type t253 = t252 * t251;
    real_type t254 = t71 * t248;
    real_type t256 = t3 * t73 * t53;
    real_type t257 = t256 * t254;
    real_type t262 = t247 * t97;
    real_type t264 = t79 * t248;
    real_type t265 = t73 * t71;
    real_type t269 = t3 * t159;
    real_type t271 = t269 * t247 * t107 + t3 * t265 * t264 + t252 * t262;
    real_type t273 = t85 * t248;
    real_type t274 = t3 * t115;
    real_type t280 = t3 * t122 * t248;
    real_type t283 = t247 * t45;
    real_type t284 = t159 * t283;
    real_type t285 = t129 * t73;
    result__[ 86  ] = -t3 * t12 * t248 - t92 * (t3 * t89 * t248 - t253 + t257) - t111 * t271 + t274 * t114 * t273 - t125 * (t3 * t119 * t248 + t280) + t3 * t285 * t284;
    real_type t290 = -t155 * t132 - t157 * t8;
    real_type t291 = t290 * t6;
    real_type t293 = t58 * t291;
    real_type t294 = t293 * t54;
    real_type t295 = t74 * t291;
    real_type t302 = -t100 * t291 - t290 * t108 - t293 * t97;
    real_type t304 = t85 * t291;
    real_type t307 = t122 * t291;
    real_type t310 = t73 * t290;
    result__[ 87  ] = t12 * t291 - t92 * (-t89 * t291 + t294 - t295) - t111 * t302 - t116 * t304 - t125 * (-t119 * t291 - t307) - t129 * t310 * t127;
    result__[ 88  ] = t10 * t160;
    real_type t313 = t172 * t54;
    result__[ 89  ] = t89 * t160 + t174 - t313;
    real_type t315 = t172 * t97;
    real_type t316 = t159 * t108;
    result__[ 90  ] = t315 + t164 + t316;
    real_type t317 = t87 * t85;
    result__[ 91  ] = -t58 * t317 * t160;
    real_type t320 = t119 * t160;
    real_type t321 = t122 * t160;
    result__[ 92  ] = t320 + t321;
    real_type t322 = t73 * t159;
    result__[ 93  ] = -t322 * t127;
    real_type t326 = ALIAS_kappa_L(QR__[0]);
    real_type t328 = t326 * XR__[37] - 1;
    real_type t329 = 1.0 / t328;
    real_type t330 = XR__[38];
    real_type t331 = cos(t330);
    real_type t332 = t331 * t329;
    real_type t333 = LR__[0];
    real_type t334 = t333 * t10;
    real_type t336 = XR__[7];
    real_type t337 = cos(t336);
    real_type t339 = t18 * t16 * t337;
    real_type t340 = sin(t336);
    real_type t341 = t27 * t340;
    real_type t342 = XR__[8];
    real_type t343 = t45 * t342;
    real_type t344 = -t339 + t341 - t31 + t35 + t40 + t43 + t46 - t343 - t50;
    real_type t345 = XR__[3];
    real_type t346 = cos(t345);
    real_type t347 = t346 * t344;
    real_type t349 = XR__[4] + t56;
    real_type t350 = cos(t349);
    real_type t351 = t350 * t332;
    real_type t352 = t351 * t347;
    real_type t353 = t27 * t337;
    real_type t355 = t18 * t16 * t340;
    real_type t356 = t353 + t355 + t64 - t66 - t68 + t70;
    real_type t357 = t346 * t356;
    real_type t358 = sin(t349);
    real_type t359 = t358 * t357;
    real_type t360 = t359 * t332;
    real_type t361 = t346 * t10;
    real_type t362 = XR__[5];
    real_type t363 = t362 * t361;
    real_type t364 = sin(t345);
    real_type t365 = t85 * t364;
    real_type t366 = XR__[6];
    real_type t368 = t366 * t365 + t363;
    real_type t371 = LR__[4];
    real_type t373 = t39 * t340;
    real_type t374 = t339 + t373 + t31 - t35 + t95 - t43 - t46 + t343 + t50;
    real_type t375 = t364 * t374;
    real_type t377 = t356 * t364;
    real_type t378 = t358 * t377;
    real_type t380 = t364 * t10;
    real_type t381 = t362 * t380;
    real_type t382 = t366 * t104;
    real_type t384 = t346 * t382 + t381;
    real_type t385 = t329 * t384;
    real_type t387 = -t331 * t385 - t378 * t332 - t351 * t375;
    real_type t388 = LR__[5];
    real_type t390 = t85 * t332;
    real_type t391 = t350 * t366;
    real_type t392 = LR__[6];
    real_type t393 = t392 * t391;
    real_type t395 = t339 - t341;
    real_type t396 = t350 * t395;
    real_type t398 = t353 + t355;
    real_type t399 = t358 * t398;
    real_type t400 = t399 * t332;
    real_type t402 = LR__[7];
    real_type t404 = t329 * t45;
    real_type t405 = t358 * t331;
    real_type t406 = LR__[8];
    result__[ 94  ] = -t334 * t332 + t371 * (-t368 * t332 + t352 - t360) + t388 * t387 + t393 * t390 + t402 * (-t396 * t332 - t400) + t406 * t405 * t404;
    real_type t409 = sin(t330);
    real_type t410 = t409 * t329;
    real_type t412 = t350 * t410;
    real_type t413 = t412 * t347;
    real_type t414 = t359 * t410;
    real_type t421 = t412 * t375 + t378 * t410 + t409 * t385;
    real_type t423 = t85 * t410;
    real_type t426 = t399 * t410;
    real_type t429 = t358 * t409;
    result__[ 95  ] = t334 * t410 + t371 * (t368 * t410 - t413 + t414) + t388 * t421 - t393 * t423 + t402 * (t396 * t410 + t426) - t406 * t429 * t404;
    real_type t432 = XR__[0];
    real_type t434 = XR__[1];
    real_type t436 = t432 * t331 - t434 * t409;
    real_type t437 = t436 * t329;
    real_type t438 = t344 * t364;
    real_type t439 = t350 * t438;
    real_type t440 = t439 * t437;
    real_type t441 = t378 * t437;
    real_type t442 = t85 * t346;
    real_type t444 = t366 * t442 - t381;
    real_type t445 = t444 * t437;
    real_type t448 = t346 * t374;
    real_type t449 = t350 * t437;
    real_type t451 = t359 * t437;
    real_type t453 = -t364 * t382 + t363;
    real_type t456 = -t436 * t329 * t453 - t449 * t448 - t451;
    result__[ 96  ] = t371 * (-t440 + t441 - t445) + t388 * t456;
    real_type t458 = t358 * t437;
    real_type t459 = t458 * t347;
    real_type t460 = t350 * t357;
    real_type t462 = -t460 * t437 - t459;
    real_type t464 = t458 * t375;
    real_type t466 = t350 * t377 * t437;
    real_type t467 = t464 - t466;
    real_type t469 = t85 * t437;
    real_type t470 = t358 * t366;
    real_type t471 = t392 * t470;
    real_type t473 = t358 * t395;
    real_type t474 = t473 * t437;
    real_type t475 = t350 * t398;
    real_type t476 = t475 * t437;
    real_type t479 = t350 * t436;
    real_type t480 = t406 * t479;
    result__[ 97  ] = t371 * t462 + t388 * t467 - t471 * t469 + t402 * (t474 - t476) + t480 * t404;
    real_type t484 = t388 * t437;
    result__[ 98  ] = -t371 * t361 * t437 - t484 * t380;
    real_type t488 = t346 * t104;
    result__[ 99  ] = t392 * t350 * t85 * t437 - t371 * t365 * t437 - t484 * t488;
    real_type t493 = t398 * t346;
    real_type t494 = t350 * t493;
    real_type t495 = t494 * t437;
    real_type t496 = t346 * t395;
    real_type t499 = -t358 * t496 * t437 + t495;
    real_type t501 = t39 * t337;
    real_type t502 = t501 - t355;
    real_type t503 = t364 * t502;
    real_type t505 = t395 * t364;
    real_type t508 = -t358 * t505 * t437 - t449 * t503;
    real_type t510 = -t398;
    result__[ 100 ] = t371 * t499 + t388 * t508 + t402 * (-t350 * t510 * t437 - t474);
    real_type t515 = t346 * t45;
    real_type t516 = t329 * t515;
    real_type t519 = t364 * t45;
    real_type t520 = t329 * t519;
    real_type t521 = t388 * t479;
    result__[ 101 ] = -t371 * t479 * t516 - t521 * t520;
    real_type t523 = t328 * t328;
    real_type t524 = 1.0 / t523;
    real_type t525 = t436 * t524;
    real_type t528 = t524 * t347;
    real_type t529 = t326 * t479;
    real_type t530 = t529 * t528;
    real_type t531 = t356 * t525;
    real_type t533 = t326 * t358 * t346;
    real_type t534 = t533 * t531;
    real_type t539 = t524 * t375;
    real_type t541 = t364 * t525;
    real_type t542 = t358 * t356;
    real_type t546 = t326 * t436;
    real_type t548 = t326 * t542 * t541 + t546 * t524 * t384 + t529 * t539;
    real_type t550 = t85 * t525;
    real_type t551 = t326 * t392;
    real_type t557 = t326 * t399 * t525;
    real_type t560 = t524 * t45;
    real_type t561 = t436 * t560;
    real_type t562 = t406 * t358;
    result__[ 102 ] = t326 * t334 * t525 + t371 * (t326 * t368 * t525 - t530 + t534) + t388 * t548 - t551 * t391 * t550 + t402 * (t326 * t396 * t525 + t557) - t326 * t562 * t561;
    real_type t567 = -t434 * t331 - t432 * t409;
    real_type t568 = t567 * t329;
    real_type t570 = t350 * t568;
    real_type t571 = t570 * t347;
    real_type t572 = t359 * t568;
    real_type t579 = -t570 * t375 - t378 * t568 - t567 * t385;
    real_type t581 = t85 * t568;
    real_type t584 = t399 * t568;
    real_type t587 = t358 * t567;
    result__[ 103 ] = -t334 * t568 + t371 * (-t368 * t568 + t571 - t572) + t388 * t579 + t393 * t581 + t402 * (-t396 * t568 - t584) + t406 * t587 * t404;
    result__[ 104 ] = -t10 * t437;
    real_type t591 = t449 * t347;
    result__[ 105 ] = -t368 * t437 - t451 + t591;
    real_type t593 = t449 * t375;
    real_type t594 = t436 * t385;
    result__[ 106 ] = -t593 - t441 - t594;
    real_type t595 = t366 * t85;
    result__[ 107 ] = t350 * t595 * t437;
    real_type t597 = t396 * t437;
    real_type t598 = t399 * t437;
    result__[ 108 ] = -t597 - t598;
    real_type t599 = t358 * t436;
    result__[ 109 ] = t599 * t404;
    real_type t600 = LL__[1];
    real_type t601 = t600 * t10;
    real_type t603 = -t89;
    real_type t606 = LL__[3];
    real_type t608 = t58 * t71;
    real_type t610 = t73 * t51;
    real_type t612 = -t608 * t9 - t610 * t9;
    real_type t614 = t87 * t79;
    real_type t615 = t73 * t614;
    real_type t620 = t121 * t79;
    real_type t621 = t58 * t620;
    real_type t623 = -t118;
    real_type t624 = t623 * t79;
    real_type t625 = t73 * t624;
    real_type t627 = -t621 * t9 - t625 * t9;
    real_type t629 = t58 * t8;
    real_type t630 = t129 * t629;
    result__[ 110 ] = t601 * t9 - t606 * (-t603 * t9 - t60 + t75) - t111 * t612 - t115 * (-t615 * t113 - t165 * t9) - t125 * t627 - t630 * t243;
    real_type t638 = t608 * t133 + t610 * t133;
    real_type t646 = t621 * t133 + t625 * t133;
    real_type t648 = t58 * t132;
    real_type t649 = t129 * t648;
    result__[ 111 ] = -t601 * t133 - t606 * (t603 * t133 + t136 - t137) - t111 * t638 - t115 * (t165 * t133 + t615 * t146) - t125 * t646 + t649 * t243;
    real_type t655 = t87 * t53;
    real_type t658 = t86 * t160;
    real_type t661 = t53 * t623;
    real_type t662 = t73 * t661;
    real_type t664 = -t662 * t160 - t218;
    result__[ 112 ] = -t606 * (t167 * t160 + t163 - t164) - t115 * (-t73 * t655 * t192 + t658) - t125 * t664 - t203 * t239;
    real_type t668 = -t606 * t185;
    real_type t669 = t265 * t160;
    real_type t670 = t58 * t51;
    real_type t671 = t670 * t160;
    real_type t672 = t669 - t671;
    real_type t676 = t115 * t58 * t614 * t192;
    real_type t678 = t73 * t620 * t160;
    real_type t679 = t58 * t624;
    real_type t681 = -t679 * t160 + t678;
    real_type t683 = t129 * t322;
    real_type t684 = t683 * t243;
    result__[ 113 ] = -t111 * t672 - t125 * t681 - t668 + t676 + t684;
    result__[ 114 ] = -t606 * t76 * t160;
    real_type t689 = t73 * t79;
    result__[ 115 ] = t115 * t689 * t192 - t606 * t86 * t160;
    real_type t694 = -result__[92];
    real_type t698 = -t58 * t228 * t160 - t678;
    result__[ 116 ] = -t111 * t694 - t125 * t698 + t606 * t222;
    result__[ 117 ] = -t111 * t322 * t127 - t606 * t202 * t239;
    real_type t704 = t3 * t601;
    real_type t714 = t3 * t608 * t248 + t3 * t610 * t248;
    real_type t716 = t3 * t73;
    real_type t723 = t3 * t198;
    real_type t728 = t3 * t73 * t623 * t264 + t723 * t264;
    real_type t730 = t247 * t242;
    real_type t731 = t3 * t129;
    result__[ 118 ] = -t704 * t248 - t606 * (t3 * t603 * t248 + t253 - t257) - t111 * t714 - t115 * (t3 * t165 * t248 + t716 * t614 * t273) - t125 * t728 + t731 * t202 * t730;
    real_type t740 = -t608 * t291 - t610 * t291;
    real_type t748 = -t621 * t291 - t625 * t291;
    real_type t750 = t58 * t290;
    real_type t751 = t129 * t750;
    result__[ 119 ] = t601 * t291 - t606 * (-t603 * t291 - t294 + t295) - t111 * t740 - t115 * (-t165 * t291 - t615 * t304) - t125 * t748 - t751 * t243;
    result__[ 120 ] = result__[88];
    real_type t753 = t603 * t160;
    result__[ 121 ] = t313 - t174 + t753;
    real_type t755 = t610 * t160;
    result__[ 122 ] = t608 * t160 + t755;
    real_type t757 = t165 * t160;
    result__[ 123 ] = t615 * t192 + t757;
    real_type t758 = t621 * t160;
    result__[ 124 ] = t625 * t160 + t758;
    result__[ 125 ] = -t172 * t242;
    real_type t761 = LR__[1];
    real_type t762 = t761 * t10;
    real_type t764 = -t368;
    real_type t767 = LR__[3];
    real_type t769 = t350 * t356;
    real_type t771 = t358 * t344;
    real_type t773 = -t769 * t332 - t771 * t332;
    real_type t775 = t366 * t364;
    real_type t776 = t358 * t775;
    real_type t781 = t398 * t364;
    real_type t782 = t350 * t781;
    real_type t784 = -t395;
    real_type t785 = t784 * t364;
    real_type t786 = t358 * t785;
    real_type t788 = -t782 * t332 - t786 * t332;
    real_type t790 = t350 * t331;
    real_type t791 = t406 * t790;
    result__[ 126 ] = -t762 * t332 + t767 * (-t764 * t332 - t352 + t360) + t388 * t773 + t392 * (-t442 * t332 - t776 * t390) + t402 * t788 + t791 * t520;
    real_type t799 = t769 * t410 + t771 * t410;
    real_type t807 = t782 * t410 + t786 * t410;
    real_type t809 = t350 * t409;
    real_type t810 = t406 * t809;
    result__[ 127 ] = t762 * t410 + t767 * (t764 * t410 + t413 - t414) + t388 * t799 + t392 * (t442 * t410 + t776 * t423) + t402 * t807 - t810 * t520;
    real_type t816 = t366 * t346;
    real_type t819 = t365 * t437;
    real_type t822 = t346 * t784;
    real_type t823 = t358 * t822;
    real_type t825 = -t823 * t437 - t495;
    result__[ 128 ] = t767 * (t444 * t437 + t440 - t441) + t392 * (-t358 * t816 * t469 + t819) + t402 * t825 + t480 * t516;
    real_type t828 = -t462;
    real_type t829 = t767 * t828;
    real_type t830 = t542 * t437;
    real_type t831 = t350 * t344;
    real_type t832 = t831 * t437;
    real_type t833 = t830 - t832;
    real_type t837 = t392 * t350 * t775 * t469;
    real_type t839 = t358 * t781 * t437;
    real_type t840 = t350 * t785;
    real_type t842 = -t840 * t437 + t839;
    real_type t844 = t406 * t599;
    real_type t845 = t844 * t520;
    result__[ 129 ] = t388 * t833 + t402 * t842 + t829 - t837 - t845;
    result__[ 130 ] = t767 * t361 * t437;
    real_type t849 = t358 * t364;
    result__[ 131 ] = t767 * t365 * t437 - t392 * t849 * t469;
    real_type t857 = -t350 * t505 * t437 - t839;
    result__[ 132 ] = t388 * result__[108] + t402 * t857 - t767 * t499;
    result__[ 133 ] = t388 * t599 * t404 + t767 * t479 * t516;
    real_type t863 = t326 * t762;
    real_type t873 = t326 * t769 * t525 + t326 * t771 * t525;
    real_type t875 = t326 * t358;
    real_type t882 = t326 * t475;
    real_type t887 = t326 * t358 * t784 * t541 + t882 * t541;
    real_type t889 = t524 * t519;
    real_type t890 = t326 * t406;
    result__[ 134 ] = t863 * t525 + t767 * (t326 * t764 * t525 + t530 - t534) + t388 * t873 + t392 * (t326 * t442 * t525 + t875 * t775 * t550) + t402 * t887 - t890 * t479 * t889;
    real_type t899 = -t769 * t568 - t771 * t568;
    real_type t907 = -t782 * t568 - t786 * t568;
    real_type t909 = t350 * t567;
    real_type t910 = t406 * t909;
    result__[ 135 ] = -t762 * t568 + t767 * (-t764 * t568 - t571 + t572) + t388 * t899 + t392 * (-t442 * t568 - t776 * t581) + t402 * t907 + t910 * t520;
    result__[ 136 ] = result__[104];
    real_type t912 = t764 * t437;
    result__[ 137 ] = -t591 + t451 - t912;
    real_type t914 = t771 * t437;
    result__[ 138 ] = -t769 * t437 - t914;
    real_type t916 = t442 * t437;
    result__[ 139 ] = -t776 * t469 - t916;
    real_type t917 = t782 * t437;
    result__[ 140 ] = -t786 * t437 - t917;
    result__[ 141 ] = t449 * t519;
    real_type t921 = ModelPars[151];
    real_type t922 = t921 * t31;
    real_type t923 = t15 * t15;
    real_type t925 = ModelPars[164];
    real_type t926 = t18 * t38 - t925;
    real_type t927 = 2 * t926;
    real_type t933 = t21 * t21;
    real_type t934 = t25 * t933;
    real_type t935 = ModelPars[15];
    real_type t936 = ModelPars[20];
    real_type t937 = (t21 - t22 - t18) * (t21 - t22 + t18) * t16 + t934 - t935 + t936;
    real_type t939 = t20 * t937 * t15;
    real_type t940 = t33 * t33;
    real_type t942 = -t927 * t940;
    real_type t944 = t36 * t937 * t33;
    real_type t945 = t30 * t30;
    real_type t946 = t945 * t29;
    real_type t947 = ModelPars[14];
    real_type t948 = ModelPars[19];
    real_type t949 = t946 + t947 - t948;
    real_type t952 = (t949 * t67 + t922) * t42;
    real_type t953 = ModelPars[161];
    real_type t954 = t29 * t953;
    real_type t955 = t67 * t30;
    real_type t956 = t955 * t954;
    real_type t957 = ModelPars[23];
    real_type t958 = t957 + t80;
    real_type t960 = t45 * t958 * t47;
    real_type t961 = t958 * t45;
    real_type t962 = t44 * t961;
    real_type t963 = t69 * t50;
    real_type t964 = ModelPars[0];
    real_type t965 = t927 * t923 - t922 + t939 + t942 - t944 + t952 + t956 - t960 + t962 - t963 - t964;
    real_type t966 = t965 * t53;
    real_type t968 = -t937;
    real_type t969 = t968 * t923;
    real_type t971 = t926 * t20 * t15;
    real_type t972 = 2 * t971;
    real_type t973 = t937 * t940;
    real_type t975 = t926 * t36 * t33;
    real_type t976 = 2 * t975;
    real_type t977 = t42 * t42;
    real_type t978 = -t949;
    real_type t979 = t978 * t977;
    real_type t981 = t42 * t30 * t954;
    real_type t983 = t955 * t29 * t921;
    real_type t984 = t47 * t47;
    real_type t985 = t984 * t45;
    real_type t986 = t985 / 2;
    real_type t987 = ModelPars[127];
    real_type t989 = t45 * t987 * t47;
    real_type t992 = (t987 - t44 / 2) * t46;
    real_type t993 = t953 * t31;
    real_type t994 = t69 * t69;
    real_type t995 = t49 * t49;
    real_type t996 = -t994 + t995;
    real_type t998 = t996 * t10 / 2;
    real_type t999 = ModelPars[10];
    real_type t1000 = t999 / 2;
    real_type t1001 = ModelPars[12];
    real_type t1002 = t1001 / 2;
    real_type t1003 = t969 + t972 + t973 - t976 + t979 - t981 + t983 + t986 - t989 + t992 + t946 + t993 + t998 + t947 - t948 + t1000 - t1002;
    real_type t1004 = t1003 * t53;
    real_type t1005 = t73 * t9;
    real_type t1008 = t77 * t53;
    real_type t1010 = t80 * t961;
    real_type t1011 = t83 * t83;
    real_type t1012 = t82 * t1011;
    real_type t1014 = t82 * t83 * t957;
    real_type t1015 = ModelPars[13];
    real_type t1016 = ModelPars[17];
    real_type t1017 = ModelPars[165];
    real_type t1018 = ModelPars[166];
    real_type t1019 = t1010 + t1012 + t1014 - t1015 + t1016 - t1017 + t1018;
    real_type t1020 = t1019 * t79;
    real_type t1022 = -t71 * t1008 - t87 * t1020;
    real_type t1028 = t45 * t47 * t80;
    real_type t1030 = t45 * t987 * t80;
    real_type t1033 = t82 * t83 * ModelPars[234];
    real_type t1034 = ModelPars[163];
    real_type t1035 = -t1028 + t1030 - t1033 - t1034;
    real_type t1036 = t1035 * t79;
    real_type t1038 = -t51 * t1008 - t87 * t1036;
    real_type t1039 = t73 * t1038;
    real_type t1041 = t58 * t58;
    real_type t1042 = t1041 * t966;
    real_type t1047 = t79 * t1003;
    real_type t1048 = t53 * t1047;
    real_type t1049 = t1041 * t9;
    real_type t1052 = t79 * t965;
    real_type t1053 = t53 * t1052;
    real_type t1056 = t53 * t53;
    real_type t1057 = t1035 * t1056;
    real_type t1060 = t77 * t79;
    real_type t1063 = t87 * t1035;
    real_type t1064 = 2 * t87 * t1057 - 2 * t1060 * t54 - t1063;
    real_type t1068 = t1019 * t1056;
    real_type t1071 = t79 * t53;
    real_type t1072 = t71 * t77;
    real_type t1075 = t87 * t1019;
    real_type t1076 = -2 * t87 * t1068 + 2 * t1072 * t1071 + t1075;
    real_type t1077 = t73 * t1076;
    real_type t1079 = t85 * t1056;
    real_type t1080 = t77 * t87;
    real_type t1083 = t77 * t77;
    real_type t1084 = t1083 * t10;
    real_type t1085 = 2 * t983;
    real_type t1086 = t994 * t10;
    real_type t1087 = ModelPars[11];
    real_type t1088 = t969 + t972 + t973 - t976 - t1084 + t979 + t1085 - t1086 + t946 + t947 - t948 + t999 - t1087;
    real_type t1092 = -t53 * t79 * t1088 - 2 * t1080 * t1079 + t77 * t317;
    real_type t1093 = t6 * t1092;
    real_type t1098 = t22 * t21;
    real_type t1100 = t22 * t22;
    real_type t1102 = t18 * t18;
    real_type t1104 = 2 * t933 - 4 * t1098 + 2 * t1100 - 2 * t1102;
    real_type t1106 = 2 * t934;
    real_type t1107 = 2 * t935;
    real_type t1108 = 2 * t936;
    real_type t1109 = t16 * t1104 + t1106 - t1107 + t1108;
    real_type t1110 = t923 * t1109;
    real_type t1113 = -t18 * t21 + t18 * t22;
    real_type t1114 = 4 * t1113;
    real_type t1116 = 4 * t925;
    real_type t1117 = t16 * t1114 + t1116;
    real_type t1122 = -t16 * t1104 - t1106 + t1107 - t1108;
    real_type t1123 = t940 * t1122;
    real_type t1126 = -t16 * t1114 - t1116;
    real_type t1128 = t33 * t36 * t1126;
    real_type t1129 = 2 * t949;
    real_type t1130 = t977 * t1129;
    real_type t1131 = 2 * t981;
    real_type t1132 = 2 * t989;
    real_type t1135 = t44 * t44;
    real_type t1136 = -2 * t44 * t987 + t1135;
    real_type t1137 = t45 * t1136;
    real_type t1138 = 2 * t946;
    real_type t1139 = 2 * t993;
    real_type t1141 = -t996 * t10;
    real_type t1142 = 2 * t947;
    real_type t1143 = 2 * t948;
    real_type t1144 = t15 * t20 * t1117 + t1001 - t1085 + t1110 + t1123 + t1128 + t1130 + t1131 + t1132 + t1137 - t1138 - t1139 + t1141 - t1142 + t1143 - t985 - t999;
    real_type t1145 = t1056 * t1144;
    real_type t1147 = t923 * t1126;
    real_type t1149 = t15 * t20 * t1109;
    real_type t1150 = t940 * t1117;
    real_type t1152 = t33 * t36 * t1122;
    real_type t1154 = 2 * t922;
    real_type t1156 = (t1129 * t67 + t1154) * t42;
    real_type t1157 = -t958;
    real_type t1159 = 2 * t45 * t1157;
    real_type t1161 = 2 * t956;
    real_type t1164 = t44 * t80 + t44 * t957;
    real_type t1166 = 2 * t45 * t1164;
    real_type t1167 = 2 * t963;
    real_type t1168 = 2 * t964;
    real_type t1169 = t47 * t1159 + t1147 + t1149 + t1150 + t1152 - t1154 + t1156 + t1161 + t1166 - t1167 - t1168;
    real_type t1170 = t1056 * t1169;
    real_type t1173 = t18 * t16;
    real_type t1174 = t1173 * t77 * t15;
    real_type t1175 = 2 * t1174;
    real_type t1176 = 2 * t23;
    real_type t1178 = 2 * t26;
    real_type t1179 = t1176 * t16 - t1178;
    real_type t1180 = t77 * t1179;
    real_type t1181 = t20 * t1180;
    real_type t1182 = 2 * t35;
    real_type t1185 = -t1176 * t16 + t1178;
    real_type t1186 = t36 * t1185;
    real_type t1187 = 2 * t43;
    real_type t1188 = 2 * t31;
    real_type t1189 = 2 * t46;
    real_type t1190 = 2 * t48;
    real_type t1191 = 2 * t50;
    real_type t1194 = -t1175 + t1181 + t77 * (t1182 + t1186 + t1187 - t1188 + t1189 - t1190 - t1191);
    real_type t1196 = 2 * t1035;
    real_type t1197 = t87 * t1196;
    real_type t1199 = t77 * t1185;
    real_type t1200 = t20 * t1199;
    real_type t1201 = t1179 * t36;
    real_type t1204 = t1056 * t1194 + t1071 * t1197 + t1175 + t1200 + t77 * (-t1182 + t1201 - t1187 + t1188 - t1189 + t1190 + t1191);
    real_type t1205 = t6 * t1204;
    real_type t1209 = t15 * t1199;
    real_type t1212 = t20 * t18 * t77 * t16;
    real_type t1213 = 2 * t1212;
    real_type t1214 = t33 * t1179;
    real_type t1215 = 2 * t66;
    real_type t1216 = 2 * t68;
    real_type t1217 = 2 * t70;
    real_type t1218 = t1214 + t1215 + t1216 - t1217;
    real_type t1220 = t77 * t1218 + t1209 - t1213;
    real_type t1222 = t80 * t957;
    real_type t1223 = t80 * t80;
    real_type t1224 = -t1222 - t1223;
    real_type t1233 = 2 * t45 * t1224 - 2 * t1012 - 2 * t1014 + 2 * t1015 - 2 * t1016 + 2 * t1017 - 2 * t1018;
    real_type t1234 = t87 * t1233;
    real_type t1236 = t15 * t1180;
    real_type t1237 = t33 * t1185;
    real_type t1238 = t1237 - t1216 - t1215 + t1217;
    real_type t1240 = t1056 * t1220 + t1071 * t1234 + t77 * t1238 + t1213 + t1236;
    real_type t1241 = t6 * t1240;
    real_type t1243 = 2 * t1098;
    real_type t1244 = -t933 + t1243 - t1100 + t1102;
    real_type t1246 = t16 * t1244 - t934 + t935 - t936;
    real_type t1247 = t923 * t1246;
    real_type t1249 = -2 * t1113;
    real_type t1251 = 2 * t925;
    real_type t1252 = t16 * t1249 - t1251;
    real_type t1257 = -t16 * t1244 + t934 - t935 + t936;
    real_type t1258 = t940 * t1257;
    real_type t1261 = -t16 * t1249 + t1251;
    real_type t1263 = t33 * t36 * t1261;
    real_type t1264 = t15 * t20 * t1252 - t1084 + t1085 - t1086 - t1087 + t1247 + t1258 + t1263 + t946 + t947 - t948 + t979 + t999;
    real_type t1266 = 2 * t104;
    real_type t1267 = t87 * t1266;
    real_type t1271 = -t45 * t1136;
    real_type t1272 = t994 + t995;
    real_type t1273 = t1272 * t10;
    real_type t1274 = t53 * t1060 * t1267 + t1056 * t1264 + t1084 - t1085 + t1087 - t1131 - t1132 + t1139 + t1271 + t1273 + t985;
    real_type t1275 = t6 * t1274;
    real_type t1280 = t45 * t1223;
    real_type t1284 = ModelPars[167];
    real_type t1285 = t45 * t1222 + t1280 + t83 * (t957 + t83) * t82 + t1284 + t1015;
    real_type t1288 = -t1080 * t86 + t1285 * t53;
    real_type t1289 = t58 * t1288;
    real_type t1291 = -t1035;
    real_type t1292 = t1291 * t53;
    real_type t1294 = t87 * t1291;
    real_type t1295 = t79 * t1294;
    real_type t1302 = t73 * t1060;
    real_type t1304 = t933 - t1243 + t1100 + t1102;
    real_type t1306 = ModelPars[18];
    real_type t1307 = ModelPars[16];
    real_type t1308 = t1304 * t16 + t1306 + t1307 + t934;
    real_type t1309 = t1308 * t79;
    real_type t1310 = t1309 * t9;
    real_type t1313 = t53 * t80;
    real_type t1315 = -t87 * t1313 + t1060;
    real_type t1316 = t1315 / 2;
    real_type t1317 = t6 * t1316;
    real_type t1322 = t79 * t961;
    real_type t1326 = t6 * t87;
    real_type t1327 = t8 * t1326;
    real_type t1328 = t1016 * t53;
    real_type t1329 = t73 * t1328;
    real_type t1331 = t79 * t1016;
    real_type t1333 = t1329 * t1327 - t9 * t1331;
    real_type t1334 = LL__[9];
    real_type t1336 = t6 * t79;
    real_type t1337 = t1306 * t8;
    real_type t1338 = LL__[10];
    result__[ 142 ] = -t11 * t110 - t600 * t612 - t606 * (t966 * t9 + t58 * (-2 * t1005 * t1004 - t1022 * t9) - t1039 * t9 - 2 * t1042 * t9) - t92 * (-2 * t1049 * t1048 + t58 * (2 * t1005 * t1053 - t1064 * t9) - t1077 * t9 - t8 * t1093) - t111 * (-t1049 * t1145 + t58 * (-t1005 * t1170 - t8 * t1205) - t128 * t1241 - t8 * t1275) - t115 * (t1005 * t1292 - t1289 * t9 + t1295 * t9) - t125 * (-t1302 * t121 * t9 + t679 * t77 * t9 - t1310) - t129 * (2 * t73 * t45 * t8 * t1317 + t1322 * t9) - t1334 * t1333 + t1338 * t1337 * t1336;
    real_type t1344 = t73 * t133;
    real_type t1355 = t1041 * t133;
    real_type t1385 = t1309 * t133;
    real_type t1395 = t132 * t1326;
    real_type t1398 = -t1329 * t1395 + t133 * t1331;
    real_type t1400 = t1306 * t132;
    result__[ 143 ] = -t11 * t144 - t600 * t638 - t606 * (-t966 * t133 + t58 * (2 * t1344 * t1004 + t1022 * t133) + t1039 * t133 + 2 * t1042 * t133) - t92 * (2 * t1355 * t1048 + t58 * (-2 * t1344 * t1053 + t1064 * t133) + t1077 * t133 + t132 * t1093) - t111 * (t1355 * t1145 + t58 * (t1344 * t1170 + t132 * t1205) + t152 * t1241 + t132 * t1275) - t115 * (t1289 * t133 - t1344 * t1292 - t1295 * t133) - t125 * (t1302 * t121 * t133 - t679 * t77 * t133 + t1385) - t129 * (-2 * t73 * t45 * t132 * t1317 - t1322 * t133) - t1334 * t1398 - t1338 * t1400 * t1336;
    real_type t1404 = t1041 * t1052;
    real_type t1409 = t1019 * t53;
    real_type t1412 = t71 * t1060 - t87 * t1409;
    real_type t1414 = 2 * t181 * t1047 - t1412 * t160;
    real_type t1416 = t1035 * t53;
    real_type t1419 = -t87 * t1416 + t77 * t161;
    real_type t1420 = t73 * t1419;
    real_type t1423 = -t1052 * t160 + 2 * t1404 * t160 + t58 * t1414 - t1420 * t160;
    real_type t1426 = t1041 * t160;
    real_type t1429 = t79 * t79;
    real_type t1453 = t77 * t1429;
    real_type t1456 = t77 * t1056;
    real_type t1474 = t1041 * t159;
    real_type t1478 = t53 * t1169;
    real_type t1479 = t6 * t1478;
    real_type t1516 = t1291 * t79;
    real_type t1517 = t181 * t1516;
    real_type t1518 = t53 * t1294;
    real_type t1522 = t77 * t160;
    real_type t1523 = t58 * t661;
    real_type t1525 = t121 * t160;
    real_type t1526 = t73 * t1008;
    real_type t1527 = t1526 * t1525;
    real_type t1528 = t1308 * t53;
    real_type t1529 = t1528 * t160;
    real_type t1532 = t79 * t80;
    real_type t1533 = t87 * t1532;
    real_type t1534 = t1533 + t1008;
    real_type t1537 = t45 * t159;
    real_type t1538 = t73 * t1537;
    real_type t1541 = t53 * t961;
    real_type t1542 = t1541 * t160;
    real_type t1545 = t1016 * t87;
    real_type t1546 = t79 * t1545;
    real_type t1549 = -t1328 * t160 - t181 * t1546;
    real_type t1551 = t6 * t53;
    real_type t1552 = t1306 * t159;
    result__[ 144 ] = -t11 * t179 - t606 * t1423 - t92 * (-2 * t1426 * t1056 * t1003 + 2 * t1426 * t1429 * t1003 + t58 * (2 * t181 * t1056 * t965 - 2 * t181 * t1429 * t965 - (-2 * t77 * t51 * t1056 + 2 * t77 * t51 * t1429 - 4 * t614 * t1416) * t160) - t73 * (4 * t614 * t1409 - 2 * t71 * t1453 + 2 * t71 * t1456) * t160 - t159 * t6 * (4 * t79 * t1080 * t165 - t1056 * t1088 + t1429 * t1088)) - t111 * (2 * t79 * t1474 * t6 * t53 * t1144 + t58 * (2 * t79 * t322 * t1479 - t159 * t6 * (-2 * t79 * t53 * t1194 + t1056 * t1197 - t1429 * t1197)) - t322 * t6 * (-2 * t79 * t53 * t1220 + t1056 * t1234 - t1429 * t1234) - t159 * t6 * (-2 * t79 * t53 * t1264 - t1453 * t1267 + t1456 * t1267)) - t115 * (-t58 * (-t1080 * t165 - t1285 * t79) * t160 - t1517 + t1518 * t160) - t125 * (t1523 * t1522 - t1527 - t1529) - t129 * (t1538 * t6 * t1534 + t1542) - t1334 * t1549 + t1338 * t1552 * t1551;
    real_type t1560 = 2 * t181 * t1004;
    real_type t1562 = -t1022 * t160 - t1560;
    real_type t1566 = t159 * t1551;
    real_type t1568 = t73 * t58 * t965;
    real_type t1582 = 2 * t181 * t1053 - t1064 * t160;
    real_type t1589 = t73 * t202;
    real_type t1595 = -t181 * t1170 - t159 * t1205;
    real_type t1602 = t172 * t1292;
    real_type t1606 = t58 * t1060;
    real_type t1607 = t1606 * t1525;
    real_type t1611 = t58 * t45;
    real_type t1615 = t159 * t1326;
    result__[ 145 ] = -t11 * t190 - t600 * t672 - t606 * (-t58 * t1038 * t160 - 2 * t1426 * t1004 - t73 * t1562 + 4 * t1568 * t1566) - t92 * (4 * t73 * t58 * t160 * t1048 - t58 * t1076 * t160 + 2 * t1426 * t1053 - t73 * t1582) - t111 * (2 * t1589 * t6 * t1145 - t1426 * t1170 - t202 * t1241 - t73 * t1595) - t115 * (t73 * t1288 * t160 + t1602) - t125 * (-t625 * t1522 - t1607) - 2 * t129 * t1611 * t159 * t1317 - t1334 * t58 * t1328 * t1615;
    real_type t1619 = t11 * t160;
    real_type t1627 = t77 * t10;
    real_type t1635 = 2 * t19;
    real_type t1644 = 2 * t63;
    result__[ 146 ] = t1619 * t102 - t668 - t92 * (2 * t162 * t1566 - 2 * t100 * t1566 - t159 * t6 * (2 * t1071 * t1627 - 2 * t87 * t1079 + t317)) - t111 * (-t202 * t6 * (t1056 * (t20 * t1179 + t1182 + t1186 + t1187 - t1188 + t1189 - t1190 - t1191 - t1635) + t1635 + t20 * t1185 - t1182 + t1201 - t1187 + t1188 - t1189 + t1190 + t1191) - t322 * t6 * (t1056 * (t15 * t1185 + t1214 + t1215 + t1216 - t1217 - t1644) + t15 * t1179 + t1644 + t1237 - t1216 - t1215 + t1217) - t159 * t6 * (-2 * t1056 * t1627 + t1071 * t1267 + 2 * t1627)) - t676 + t125 * t681 - t684;
    real_type t1665 = t73 * t1036;
    real_type t1666 = t1665 * t160;
    real_type t1679 = t77 * t85;
    real_type t1700 = t6 * t1313;
    real_type t1703 = t73 * t1016;
    real_type t1704 = t1334 * t1703;
    result__[ 147 ] = t1619 * t211 - t606 * (t58 * t1020 * t160 + t1666) - t92 * (-t58 * (2 * t1057 - t1030 + t1028 + t1033 + t1034) * t160 - t73 * (-2 * t1068 + t1010 + t1012 + t1014 - t1015 + t1016 - t1017 + t1018) * t160 - t159 * t6 * (-2 * t77 * t1079 + t1679)) - t111 * (-t172 * t53 * t79 * t1196 - t181 * t53 * t79 * t1233 - t1566 * t79 * t77 * t1266) - t115 * (t1516 * t160 + t1606 * t192) + t285 * t1537 * t1700 - t1704 * t1566;
    real_type t1711 = t20 * t20;
    real_type t1712 = t937 * t1711;
    real_type t1713 = t937 * t923;
    real_type t1714 = -2 * t20 * t927 * t15 - t1712 + t1713;
    real_type t1715 = t1714 * t53;
    real_type t1719 = t926 * t1711;
    real_type t1720 = t926 * t923;
    real_type t1722 = -2 * t20 * t968 * t15 - 2 * t1719 + 2 * t1720;
    real_type t1735 = t79 * t1722;
    real_type t1739 = t79 * t1714;
    real_type t1760 = t15 * t20 * t1126;
    real_type t1763 = -t1711 * t1109 + t1110 - 2 * t1760;
    real_type t1779 = t15 * t20 * t1246;
    result__[ 148 ] = -t11 * t231 - t600 * t694 - t606 * (t1715 * t160 + t58 * (t118 * t1008 * t160 - 2 * t181 * t1722 * t53) + t1527 - 2 * t1041 * t1715 * t160) - t92 * (-2 * t1426 * t53 * t1735 + t58 * (2 * t77 * t620 * t1566 + 2 * t181 * t53 * t1739) - 2 * t196 * t1060 * t1566 + t1566 * t1735) - t111 * (-t1426 * t1056 * (-t1711 * t1117 + t923 * t1117 - 2 * t1149) + t58 * (-t181 * t1056 * t1763 - t159 * t6 * (t1056 * (t1213 + t1236) - t1213 + t1209)) - t322 * t6 * (t1056 * (-t1200 - t1175) - t1181 + t1175) - t160 * t1056 * (-t1711 * t1252 + t923 * t1252 - 2 * t1779)) - t125 * (-t1302 * t118 * t160 + t1607);
    real_type t1796 = t45 * t987;
    real_type t1797 = t48 - t1796;
    real_type t1798 = t1797 * t53;
    real_type t1803 = t87 * t80;
    real_type t1805 = t45 * t1008 + t1803 * t242;
    real_type t1807 = t73 * t1805 * t160;
    real_type t1808 = t1041 * t961;
    real_type t1813 = t79 * t1797;
    real_type t1833 = -2 * t1797;
    real_type t1838 = t77 * t45;
    real_type t1848 = -t1833;
    real_type t1849 = t6 * t1848;
    real_type t1854 = t159 * t127;
    result__[ 149 ] = t11 * t202 * t243 - t600 * t322 * t127 - t606 * (-2 * t1589 * t6 * t1798 + 2 * t1808 * t1566 - t1542 - t1807) - t92 * (-2 * t1426 * t53 * t1813 + t58 * (-2 * t322 * t1551 * t1322 - (-2 * t1803 * t45 * t1056 + 2 * t1060 * t238 + t87 * t81) * t160)) - t111 * (-t1426 * t1056 * t1833 + t58 * (-t181 * t1056 * t1159 - t159 * t6 * (-2 * t53 * t614 * t81 - 2 * t1056 * t1838 + 2 * t1838)) - t159 * t1849) - t115 * (t1533 * t1854 + t1538 * t1700);
    real_type t1863 = t3 * t322;
    real_type t1872 = t53 * t248;
    real_type t1874 = t3 * t1041 * t965;
    real_type t1883 = t716 * t248;
    real_type t1897 = t3 * t1474;
    real_type t1915 = t1291 * t248;
    real_type t1921 = t3 * t58;
    real_type t1928 = t3 * t1309 * t248;
    real_type t1933 = t73 * t45;
    real_type t1934 = t3 * t1933;
    real_type t1937 = t958 * t248;
    real_type t1943 = t159 * t247 * t87;
    real_type t1946 = t3 * t248;
    real_type t1948 = -t1328 * t1943 * t716 + t1331 * t1946;
    real_type t1950 = t1338 * t1306;
    real_type t1951 = t3 * t1950;
    result__[ 150 ] = -t11 * t271 - t600 * t714 - t606 * (-t3 * t966 * t248 + t58 * (2 * t1004 * t1863 * t247 + t1022 * t248 * t3) + t3 * t1039 * t248 + 2 * t1874 * t1872) - t92 * (2 * t3 * t1041 * t248 * t1048 + t58 * (t1064 * t248 * t3 - 2 * t1053 * t1883) + t3 * t1077 * t248 + t269 * t247 * t1092) - t111 * (t1897 * t247 * t1145 + t58 * (t1170 * t1863 * t247 + t1204 * t247 * t269) + t1863 * t247 * t1240 + t269 * t247 * t1274) - t115 * (t1289 * t248 * t3 - t1292 * t1863 * t247 - t1915 * t3 * t614) - t125 * (t1060 * t121 * t248 * t716 - t1921 * t248 * t624 * t77 + t1928) - t129 * (-2 * t1316 * t159 * t1934 * t247 - t1937 * t242 * t3) - t1334 * t1948 - t1951 * t264;
    real_type t1956 = t73 * t291;
    real_type t1967 = t1041 * t291;
    real_type t1997 = t1309 * t291;
    real_type t2007 = t290 * t1326;
    real_type t2010 = t1329 * t2007 - t1331 * t291;
    real_type t2012 = t1306 * t290;
    result__[ 151 ] = -t11 * t302 - t600 * t740 - t606 * (t966 * t291 + t58 * (-2 * t1004 * t1956 - t1022 * t291) - t1039 * t291 - 2 * t1042 * t291) - t92 * (-2 * t1967 * t1048 + t58 * (2 * t1053 * t1956 - t1064 * t291) - t1077 * t291 - t290 * t1093) - t111 * (-t1967 * t1145 + t58 * (-t1170 * t1956 - t1205 * t290) - t310 * t1241 - t290 * t1275) - t115 * (-t1289 * t291 + t1292 * t1956 + t1295 * t291) - t125 * (-t121 * t1302 * t291 + t291 * t679 * t77 - t1997) - t129 * (2 * t1317 * t290 * t45 * t73 + t1322 * t291) - t1334 * t2010 + t1338 * t2012 * t1336;
    result__[ 152 ] = result__[90];
    result__[ 153 ] = result__[122];
    real_type t2015 = t966 * t160;
    real_type t2019 = 2 * t1042 * t160;
    result__[ 154 ] = t1039 * t160 - t1562 * t58 - t2015 + t2019;
    result__[ 155 ] = 2 * t1048 * t1426 + t1077 * t160 + t1093 * t159 - t1582 * t58;
    result__[ 156 ] = t1145 * t1426 + t1241 * t322 + t1275 * t159 - t1595 * t58;
    result__[ 157 ] = t1289 * t160 - t1292 * t181 - t1295 * t160;
    real_type t2033 = t1302 * t1525;
    real_type t2034 = t1309 * t160;
    result__[ 158 ] = -t1522 * t679 + t2033 + t2034;
    real_type t2037 = t1322 * t160;
    result__[ 159 ] = -2 * t1317 * t1538 - t2037;
    result__[ 160 ] = -t1329 * t1615 + t1331 * t160;
    result__[ 161 ] = t1552 * t1336;
    real_type t2042 = t337 * t337;
    real_type t2045 = t340 * t937 * t337;
    real_type t2047 = t45 * t958 * t342;
    real_type t2048 = t2042 * t927 + t2045 - t2047 - t922 + t942 - t944 + t952 + t956 + t962 - t963 - t964;
    real_type t2049 = t2048 * t346;
    real_type t2051 = t968 * t2042;
    real_type t2053 = t926 * t340 * t337;
    real_type t2054 = 2 * t2053;
    real_type t2055 = t342 * t342;
    real_type t2056 = t2055 * t45;
    real_type t2057 = t2056 / 2;
    real_type t2059 = t45 * t987 * t342;
    real_type t2060 = t2051 + t2054 + t973 - t976 + t979 - t981 + t983 + t2057 - t2059 + t992 + t946 + t993 + t998 + t947 - t948 + t1000 - t1002;
    real_type t2061 = t2060 * t346;
    real_type t2062 = t358 * t332;
    real_type t2065 = t362 * t346;
    real_type t2067 = t1019 * t364;
    real_type t2069 = -t2065 * t356 - t2067 * t366;
    real_type t2075 = t45 * t342 * t80;
    real_type t2076 = -t2075 + t1030 - t1033 - t1034;
    real_type t2077 = t2076 * t364;
    real_type t2079 = -t2065 * t344 - t2077 * t366;
    real_type t2080 = t358 * t2079;
    real_type t2082 = t350 * t350;
    real_type t2083 = t2082 * t2049;
    real_type t2088 = t364 * t2060;
    real_type t2089 = t346 * t2088;
    real_type t2090 = t2082 * t332;
    real_type t2093 = t364 * t2048;
    real_type t2094 = t346 * t2093;
    real_type t2097 = t346 * t346;
    real_type t2098 = t2076 * t2097;
    real_type t2101 = t362 * t364;
    real_type t2104 = t366 * t2076;
    real_type t2105 = 2 * t2098 * t366 - 2 * t2101 * t347 - t2104;
    real_type t2109 = t1019 * t2097;
    real_type t2112 = t364 * t346;
    real_type t2113 = t356 * t362;
    real_type t2116 = t366 * t1019;
    real_type t2117 = -2 * t2109 * t366 + 2 * t2112 * t2113 + t2116;
    real_type t2118 = t358 * t2117;
    real_type t2120 = t85 * t2097;
    real_type t2121 = t362 * t366;
    real_type t2124 = t362 * t362;
    real_type t2125 = t2124 * t10;
    real_type t2126 = t2051 + t2054 + t973 - t976 - t2125 + t979 + t1085 - t1086 + t946 + t947 - t948 + t999 - t1087;
    real_type t2130 = -t2126 * t346 * t364 - 2 * t2120 * t2121 + t362 * t595;
    real_type t2131 = t329 * t2130;
    real_type t2135 = t2042 * t1109;
    real_type t2138 = 2 * t2059;
    real_type t2139 = t1117 * t337 * t340 + t1001 - t1085 + t1123 + t1128 + t1130 + t1131 + t1137 - t1138 - t1139 + t1141 - t1142 + t1143 - t2056 + t2135 + t2138 - t999;
    real_type t2140 = t2097 * t2139;
    real_type t2142 = t2042 * t1126;
    real_type t2144 = t337 * t340 * t1109;
    real_type t2146 = t1159 * t342 + t1150 + t1152 - t1154 + t1156 + t1161 + t1166 - t1167 - t1168 + t2142 + t2144;
    real_type t2147 = t2097 * t2146;
    real_type t2150 = t1173 * t362 * t337;
    real_type t2151 = 2 * t2150;
    real_type t2152 = t362 * t1179;
    real_type t2153 = t340 * t2152;
    real_type t2154 = 2 * t343;
    real_type t2157 = -t2151 + t2153 + t362 * (t1182 + t1186 + t1187 - t1188 + t1189 - t2154 - t1191);
    real_type t2159 = 2 * t2076;
    real_type t2160 = t366 * t2159;
    real_type t2162 = t362 * t1185;
    real_type t2163 = t340 * t2162;
    real_type t2166 = t2097 * t2157 + t2112 * t2160 + t2151 + t2163 + t362 * (-t1182 + t1201 - t1187 + t1188 - t1189 + t2154 + t1191);
    real_type t2167 = t329 * t2166;
    real_type t2171 = t337 * t2162;
    real_type t2174 = t340 * t18 * t362 * t16;
    real_type t2175 = 2 * t2174;
    real_type t2177 = t1218 * t362 + t2171 - t2175;
    real_type t2179 = t366 * t1233;
    real_type t2181 = t337 * t2152;
    real_type t2183 = t1238 * t362 + t2097 * t2177 + t2112 * t2179 + t2175 + t2181;
    real_type t2184 = t329 * t2183;
    real_type t2186 = t2042 * t1246;
    real_type t2189 = t1252 * t337 * t340 + t1085 - t1086 - t1087 + t1258 + t1263 - t2125 + t2186 + t946 + t947 - t948 + t979 + t999;
    real_type t2191 = t366 * t1266;
    real_type t2194 = t2101 * t2191 * t346 + t2097 * t2189 - t1085 + t1087 - t1131 + t1139 + t1271 + t1273 + t2056 + t2125 - t2138;
    real_type t2195 = t329 * t2194;
    real_type t2201 = t1285 * t346 - t2121 * t365;
    real_type t2202 = t350 * t2201;
    real_type t2204 = -t2076;
    real_type t2205 = t2204 * t346;
    real_type t2207 = t366 * t2204;
    real_type t2208 = t364 * t2207;
    real_type t2215 = t358 * t2101;
    real_type t2217 = t1308 * t364;
    real_type t2218 = t2217 * t332;
    real_type t2221 = t346 * t80;
    real_type t2223 = -t2221 * t366 + t2101;
    real_type t2224 = t2223 / 2;
    real_type t2225 = t329 * t2224;
    real_type t2230 = t364 * t961;
    real_type t2234 = t329 * t366;
    real_type t2235 = t331 * t2234;
    real_type t2236 = t1016 * t346;
    real_type t2237 = t358 * t2236;
    real_type t2239 = t364 * t1016;
    real_type t2241 = t2235 * t2237 - t2239 * t332;
    real_type t2242 = LR__[9];
    real_type t2244 = t329 * t364;
    real_type t2245 = t1306 * t331;
    real_type t2246 = LR__[10];
    result__[ 162 ] = t333 * t387 + t761 * t773 + t767 * (t2049 * t332 + t350 * (-2 * t2061 * t2062 - t2069 * t332) - t2080 * t332 - 2 * t2083 * t332) + t371 * (-2 * t2090 * t2089 + t350 * (2 * t2062 * t2094 - t2105 * t332) - t2118 * t332 - t331 * t2131) + t388 * (-t2090 * t2140 + t350 * (-t2062 * t2147 - t2167 * t331) - t405 * t2184 - t331 * t2195) + t392 * (t2062 * t2205 - t2202 * t332 + t2208 * t332) + t402 * (-t2215 * t332 * t398 + t332 * t362 * t840 - t2218) + t406 * (2 * t2225 * t331 * t358 * t45 + t2230 * t332) + t2242 * t2241 - t2246 * t2245 * t2244;
    real_type t2252 = t358 * t410;
    real_type t2263 = t2082 * t410;
    real_type t2293 = t2217 * t410;
    real_type t2303 = t409 * t2234;
    real_type t2306 = -t2237 * t2303 + t2239 * t410;
    real_type t2308 = t1306 * t409;
    result__[ 163 ] = t333 * t421 + t761 * t799 + t767 * (-t2049 * t410 + t350 * (2 * t2061 * t2252 + t2069 * t410) + t2080 * t410 + 2 * t2083 * t410) + t371 * (2 * t2263 * t2089 + t350 * (-2 * t2094 * t2252 + t2105 * t410) + t2118 * t410 + t409 * t2131) + t388 * (t2263 * t2140 + t350 * (t2147 * t2252 + t2167 * t409) + t429 * t2184 + t409 * t2195) + t392 * (t2202 * t410 - t2205 * t2252 - t2208 * t410) + t402 * (t2215 * t398 * t410 - t362 * t410 * t840 + t2293) + t406 * (-2 * t2225 * t358 * t409 * t45 - t2230 * t410) + t2242 * t2306 + t2246 * t2308 * t2244;
    real_type t2312 = t2082 * t2093;
    real_type t2317 = t1019 * t346;
    real_type t2320 = t2101 * t356 - t2317 * t366;
    real_type t2322 = 2 * t2088 * t458 - t2320 * t437;
    real_type t2324 = t2076 * t346;
    real_type t2327 = -t2324 * t366 + t362 * t438;
    real_type t2328 = t358 * t2327;
    real_type t2331 = -t2093 * t437 + 2 * t2312 * t437 + t2322 * t350 - t2328 * t437;
    real_type t2334 = t2082 * t437;
    real_type t2337 = t364 * t364;
    real_type t2361 = t362 * t2337;
    real_type t2364 = t362 * t2097;
    real_type t2382 = t2082 * t436;
    real_type t2386 = t346 * t2146;
    real_type t2387 = t329 * t2386;
    real_type t2424 = t2204 * t364;
    real_type t2425 = t458 * t2424;
    real_type t2426 = t346 * t2207;
    real_type t2430 = t362 * t437;
    real_type t2431 = t350 * t822;
    real_type t2433 = t398 * t437;
    real_type t2434 = t358 * t2065;
    real_type t2435 = t2434 * t2433;
    real_type t2436 = t1308 * t346;
    real_type t2437 = t2436 * t437;
    real_type t2440 = t364 * t80;
    real_type t2441 = t366 * t2440;
    real_type t2442 = t2441 + t2065;
    real_type t2445 = t45 * t436;
    real_type t2446 = t358 * t2445;
    real_type t2449 = t346 * t961;
    real_type t2450 = t2449 * t437;
    real_type t2453 = t1016 * t366;
    real_type t2454 = t364 * t2453;
    real_type t2457 = -t2236 * t437 - t2454 * t458;
    real_type t2459 = t329 * t346;
    real_type t2460 = t1306 * t436;
    result__[ 164 ] = t333 * t456 + t767 * t2331 + t371 * (-2 * t2334 * t2097 * t2060 + 2 * t2334 * t2337 * t2060 + t350 * (2 * t458 * t2097 * t2048 - 2 * t458 * t2337 * t2048 - (-2 * t2097 * t344 * t362 + 2 * t2337 * t344 * t362 - 4 * t2324 * t775) * t437) - t358 * (4 * t2317 * t775 - 2 * t2361 * t356 + 2 * t2364 * t356) * t437 - t436 * t329 * (4 * t2121 * t364 * t442 - t2097 * t2126 + t2126 * t2337)) + t388 * (2 * t364 * t2382 * t329 * t346 * t2139 + t350 * (2 * t364 * t599 * t2387 - t436 * t329 * (-2 * t2157 * t346 * t364 + t2097 * t2160 - t2160 * t2337)) - t599 * t329 * (-2 * t2177 * t346 * t364 + t2097 * t2179 - t2179 * t2337) - t436 * t329 * (-2 * t2189 * t346 * t364 - t2191 * t2361 + t2191 * t2364)) + t392 * (-t350 * (-t1285 * t364 - t2121 * t442) * t437 - t2425 + t2426 * t437) + t402 * (t2430 * t2431 - t2435 - t2437) + t406 * (t2442 * t2446 * t329 + t2450) + t2242 * t2457 - t2246 * t2460 * t2459;
    real_type t2468 = 2 * t458 * t2061;
    real_type t2470 = -t2069 * t437 - t2468;
    real_type t2474 = t436 * t2459;
    real_type t2476 = t358 * t350 * t2048;
    real_type t2490 = 2 * t2094 * t458 - t2105 * t437;
    real_type t2497 = t358 * t479;
    real_type t2503 = -t2147 * t458 - t2167 * t436;
    real_type t2510 = t449 * t2205;
    real_type t2514 = t350 * t2101;
    real_type t2515 = t2514 * t2433;
    real_type t2519 = t350 * t45;
    real_type t2523 = t436 * t2234;
    result__[ 165 ] = t333 * t467 + t761 * t833 + t767 * (-t2079 * t350 * t437 - 2 * t2061 * t2334 - t2470 * t358 + 4 * t2474 * t2476) + t371 * (4 * t2089 * t350 * t358 * t437 - t2117 * t350 * t437 + 2 * t2094 * t2334 - t2490 * t358) + t388 * (2 * t2140 * t2497 * t329 - t2147 * t2334 - t2184 * t479 - t2503 * t358) + t392 * (t2201 * t358 * t437 + t2510) + t402 * (-t2430 * t786 - t2515) + 2 * t406 * t2519 * t436 * t2225 + t2242 * t350 * t2236 * t2523;
    real_type t2527 = t333 * t437;
    real_type t2535 = t362 * t10;
    real_type t2543 = 2 * t339;
    real_type t2552 = 2 * t355;
    result__[ 166 ] = -t2527 * t380 + t829 + t371 * (2 * t439 * t2474 - 2 * t378 * t2474 - t436 * t329 * (2 * t2112 * t2535 - 2 * t2120 * t366 + t595)) + t388 * (-t479 * t329 * (t2097 * (t1179 * t340 + t1182 + t1186 + t1187 - t1188 + t1189 - t1191 - t2154 - t2543) + t2543 + t340 * t1185 - t1182 + t1201 - t1187 + t1188 - t1189 + t2154 + t1191) - t599 * t329 * (t2097 * (t1185 * t337 + t1214 + t1215 + t1216 - t1217 - t2552) + t337 * t1179 + t2552 + t1237 - t1216 - t1215 + t1217) - t436 * t329 * (-2 * t2097 * t2535 + t2112 * t2191 + 2 * t2535)) + t837 - t402 * t842 + t845;
    real_type t2573 = t358 * t2077;
    real_type t2574 = t2573 * t437;
    real_type t2587 = t362 * t85;
    real_type t2608 = t329 * t2221;
    real_type t2611 = t358 * t1016;
    real_type t2612 = t2242 * t2611;
    result__[ 167 ] = -t2527 * t488 + t767 * (t2067 * t350 * t437 + t2574) + t371 * (-t350 * (2 * t2098 - t1030 + t2075 + t1033 + t1034) * t437 - t358 * (-2 * t2109 + t1010 + t1012 + t1014 - t1015 + t1016 - t1017 + t1018) * t437 - t436 * t329 * (-2 * t2120 * t362 + t2587)) + t388 * (-t1233 * t346 * t364 * t458 - t1266 * t2474 * t362 * t364 - t2159 * t346 * t364 * t449) + t392 * (t2424 * t437 + t2514 * t469) - t562 * t2445 * t2608 + t2612 * t2474;
    real_type t2619 = t340 * t340;
    real_type t2620 = t937 * t2619;
    real_type t2621 = t937 * t2042;
    real_type t2622 = -2 * t337 * t340 * t927 - t2620 + t2621;
    real_type t2623 = t2622 * t346;
    real_type t2627 = t926 * t2619;
    real_type t2628 = t926 * t2042;
    real_type t2630 = -2 * t337 * t340 * t968 - 2 * t2627 + 2 * t2628;
    real_type t2643 = t364 * t2630;
    real_type t2647 = t364 * t2622;
    real_type t2668 = t337 * t340 * t1126;
    real_type t2671 = -t1109 * t2619 + t2135 - 2 * t2668;
    real_type t2687 = t337 * t340 * t1246;
    result__[ 168 ] = t333 * t508 + t761 * result__[108] + t767 * (t2623 * t437 + t350 * (t2065 * t395 * t437 - 2 * t2630 * t346 * t458) + t2435 - 2 * t2082 * t2623 * t437) + t371 * (-2 * t2334 * t346 * t2643 + t350 * (2 * t2474 * t362 * t781 + 2 * t2647 * t346 * t458) - 2 * t473 * t2101 * t2474 + t2474 * t2643) + t388 * (-t2334 * t2097 * (t1117 * t2042 - t1117 * t2619 - 2 * t2144) + t350 * (-t458 * t2097 * t2671 - t436 * t329 * (t2097 * (t2175 + t2181) - t2175 + t2171)) - t599 * t329 * (t2097 * (-t2163 - t2151) - t2153 + t2151) - t437 * t2097 * (t1252 * t2042 - t1252 * t2619 - 2 * t2687)) + t402 * (-t2215 * t395 * t437 + t2515);
    real_type t2704 = t343 - t1796;
    real_type t2705 = t2704 * t346;
    real_type t2710 = t366 * t80;
    real_type t2712 = t2065 * t45 + t2710 * t519;
    real_type t2714 = t358 * t2712 * t437;
    real_type t2715 = t2082 * t961;
    real_type t2720 = t364 * t2704;
    real_type t2740 = -2 * t2704;
    real_type t2745 = t362 * t45;
    real_type t2755 = -t2740;
    real_type t2756 = t329 * t2755;
    real_type t2761 = t436 * t404;
    result__[ 169 ] = -t333 * t479 * t520 + t761 * t599 * t404 + t767 * (-2 * t2497 * t2705 * t329 + 2 * t2474 * t2715 - t2450 - t2714) + t371 * (-2 * t2334 * t346 * t2720 + t350 * (-2 * t599 * t2459 * t2230 - (-2 * t2097 * t2710 * t45 + 2 * t2101 * t515 + t366 * t81) * t437)) + t388 * (-t2334 * t2097 * t2740 + t350 * (-t458 * t2097 * t1159 - t436 * t329 * (-2 * t346 * t775 * t81 - 2 * t2097 * t2745 + 2 * t2745)) - t436 * t2756) + t392 * (t2441 * t2761 + t2446 * t2608);
    real_type t2770 = t326 * t599;
    real_type t2779 = t346 * t525;
    real_type t2781 = t326 * t2082 * t2048;
    real_type t2790 = t875 * t525;
    real_type t2804 = t326 * t2382;
    real_type t2822 = t2204 * t525;
    real_type t2828 = t326 * t350;
    real_type t2835 = t326 * t2217 * t525;
    real_type t2840 = t358 * t45;
    real_type t2841 = t326 * t2840;
    real_type t2844 = t958 * t525;
    real_type t2850 = t436 * t524 * t366;
    real_type t2853 = t326 * t525;
    real_type t2855 = -t2236 * t2850 * t875 + t2239 * t2853;
    real_type t2857 = t2246 * t1306;
    real_type t2858 = t326 * t2857;
    result__[ 170 ] = t333 * t548 + t761 * t873 + t767 * (-t326 * t2049 * t525 + t350 * (2 * t2061 * t2770 * t524 + t2069 * t326 * t525) + t326 * t2080 * t525 + 2 * t2781 * t2779) + t371 * (2 * t326 * t2082 * t525 * t2089 + t350 * (t2105 * t326 * t525 - 2 * t2094 * t2790) + t326 * t2118 * t525 + t546 * t524 * t2130) + t388 * (t2804 * t524 * t2140 + t350 * (t2147 * t2770 * t524 + t2166 * t524 * t546) + t2770 * t524 * t2183 + t546 * t524 * t2194) + t392 * (t2202 * t326 * t525 - t2205 * t2770 * t524 - t2822 * t326 * t775) + t402 * (t2101 * t398 * t525 * t875 - t2828 * t362 * t525 * t785 + t2835) + t406 * (-2 * t2224 * t2841 * t436 * t524 - t2844 * t326 * t519) + t2242 * t2855 + t2858 * t541;
    real_type t2863 = t358 * t568;
    real_type t2874 = t2082 * t568;
    real_type t2904 = t2217 * t568;
    real_type t2914 = t567 * t2234;
    real_type t2917 = t2237 * t2914 - t2239 * t568;
    real_type t2919 = t1306 * t567;
    result__[ 171 ] = t333 * t579 + t761 * t899 + t767 * (t2049 * t568 + t350 * (-2 * t2061 * t2863 - t2069 * t568) - t2080 * t568 - 2 * t2083 * t568) + t371 * (-2 * t2874 * t2089 + t350 * (2 * t2094 * t2863 - t2105 * t568) - t2118 * t568 - t567 * t2131) + t388 * (-t2874 * t2140 + t350 * (-t2147 * t2863 - t2167 * t567) - t587 * t2184 - t567 * t2195) + t392 * (-t2202 * t568 + t2205 * t2863 + t2208 * t568) + t402 * (-t2215 * t398 * t568 + t362 * t568 * t840 - t2904) + t406 * (2 * t2225 * t358 * t45 * t567 + t2230 * t568) + t2242 * t2917 - t2246 * t2919 * t2244;
    result__[ 172 ] = result__[106];
    result__[ 173 ] = result__[138];
    real_type t2922 = t2049 * t437;
    real_type t2926 = 2 * t2083 * t437;
    result__[ 174 ] = -t2080 * t437 + t2470 * t350 + t2922 - t2926;
    result__[ 175 ] = -2 * t2089 * t2334 - t2118 * t437 - t2131 * t436 + t2490 * t350;
    result__[ 176 ] = -t2140 * t2334 - t2184 * t599 - t2195 * t436 + t2503 * t350;
    result__[ 177 ] = -t2202 * t437 + t2205 * t458 + t2208 * t437;
    real_type t2940 = t2215 * t2433;
    real_type t2941 = t2217 * t437;
    result__[ 178 ] = t2430 * t840 - t2940 - t2941;
    real_type t2944 = t2230 * t437;
    result__[ 179 ] = 2 * t2225 * t2446 + t2944;
    result__[ 180 ] = t2237 * t2523 - t2239 * t437;
    result__[ 181 ] = -t2460 * t2244;
    real_type t2948 = LL__[19];
    result__[ 182 ] = t2948 * t9;
    result__[ 183 ] = -t2948 * t133;
    result__[ 184 ] = -t3 * t2948 * t248;
    result__[ 185 ] = t2948 * t291;
    result__[ 186 ] = t160;
    real_type t2952 = LR__[19];
    result__[ 187 ] = -t2952 * t332;
    result__[ 188 ] = t2952 * t410;
    result__[ 189 ] = t326 * t2952 * t525;
    result__[ 190 ] = -t2952 * t568;
    result__[ 191 ] = -t437;
    real_type t2956 = LL__[20];
    result__[ 192 ] = t2956 * t9;
    result__[ 193 ] = -t2956 * t133;
    result__[ 194 ] = -t3 * t2956 * t248;
    result__[ 195 ] = t2956 * t291;
    result__[ 196 ] = result__[186];
    real_type t2960 = LR__[20];
    result__[ 197 ] = -t2960 * t332;
    result__[ 198 ] = t2960 * t410;
    result__[ 199 ] = t326 * t2960 * t525;
    result__[ 200 ] = -t2960 * t568;
    result__[ 201 ] = result__[191];
    real_type t2964 = LL__[21];
    result__[ 202 ] = t2964 * t9;
    result__[ 203 ] = -t2964 * t133;
    result__[ 204 ] = -t3 * t2964 * t248;
    result__[ 205 ] = t2964 * t291;
    result__[ 206 ] = result__[196];
    real_type t2968 = LR__[21];
    result__[ 207 ] = -t2968 * t332;
    result__[ 208 ] = t2968 * t410;
    result__[ 209 ] = t326 * t2968 * t525;
    result__[ 210 ] = -t2968 * t568;
    result__[ 211 ] = result__[201];
    real_type t2972 = LL__[22];
    result__[ 212 ] = t2972 * t9;
    result__[ 213 ] = -t2972 * t133;
    result__[ 214 ] = -t3 * t2972 * t248;
    result__[ 215 ] = t2972 * t291;
    result__[ 216 ] = result__[206];
    real_type t2976 = LR__[22];
    result__[ 217 ] = -t2976 * t332;
    result__[ 218 ] = t2976 * t410;
    result__[ 219 ] = t326 * t2976 * t525;
    result__[ 220 ] = -t2976 * t568;
    result__[ 221 ] = result__[211];
    real_type t2980 = LL__[23];
    result__[ 222 ] = t2980 * t9;
    result__[ 223 ] = -t2980 * t133;
    result__[ 224 ] = -t3 * t2980 * t248;
    result__[ 225 ] = t2980 * t291;
    result__[ 226 ] = result__[216];
    real_type t2984 = LR__[23];
    result__[ 227 ] = -t2984 * t332;
    result__[ 228 ] = t2984 * t410;
    result__[ 229 ] = t326 * t2984 * t525;
    result__[ 230 ] = -t2984 * t568;
    result__[ 231 ] = result__[221];
    real_type t2988 = LL__[24];
    result__[ 232 ] = t2988 * t9;
    result__[ 233 ] = -t2988 * t133;
    result__[ 234 ] = -t3 * t2988 * t248;
    result__[ 235 ] = t2988 * t291;
    result__[ 236 ] = result__[226];
    real_type t2992 = LR__[24];
    result__[ 237 ] = -t2992 * t332;
    result__[ 238 ] = t2992 * t410;
    result__[ 239 ] = t326 * t2992 * t525;
    result__[ 240 ] = -t2992 * t568;
    result__[ 241 ] = result__[231];
    real_type t2996 = LL__[25];
    result__[ 242 ] = t2996 * t9;
    result__[ 243 ] = -t2996 * t133;
    result__[ 244 ] = -t3 * t2996 * t248;
    result__[ 245 ] = t2996 * t291;
    result__[ 246 ] = result__[236];
    real_type t3000 = LR__[25];
    result__[ 247 ] = -t3000 * t332;
    result__[ 248 ] = t3000 * t410;
    result__[ 249 ] = t326 * t3000 * t525;
    result__[ 250 ] = -t3000 * t568;
    result__[ 251 ] = result__[241];
    real_type t3004 = LL__[26];
    result__[ 252 ] = t3004 * t9;
    result__[ 253 ] = -t3004 * t133;
    result__[ 254 ] = -t3 * t3004 * t248;
    result__[ 255 ] = t3004 * t291;
    result__[ 256 ] = result__[246];
    real_type t3008 = LR__[26];
    result__[ 257 ] = -t3008 * t332;
    result__[ 258 ] = t3008 * t410;
    result__[ 259 ] = t326 * t3008 * t525;
    result__[ 260 ] = -t3008 * t568;
    result__[ 261 ] = result__[251];
    real_type t3012 = LL__[27];
    result__[ 262 ] = t3012 * t9;
    result__[ 263 ] = -t3012 * t133;
    result__[ 264 ] = -t3 * t3012 * t248;
    result__[ 265 ] = t3012 * t291;
    result__[ 266 ] = result__[256];
    real_type t3016 = LR__[27];
    result__[ 267 ] = -t3016 * t332;
    result__[ 268 ] = t3016 * t410;
    result__[ 269 ] = t326 * t3016 * t525;
    result__[ 270 ] = -t3016 * t568;
    result__[ 271 ] = result__[261];
    real_type t3020 = LL__[28];
    result__[ 272 ] = t3020 * t9;
    result__[ 273 ] = -t3020 * t133;
    result__[ 274 ] = -t3 * t3020 * t248;
    result__[ 275 ] = t3020 * t291;
    result__[ 276 ] = result__[266];
    real_type t3024 = LR__[28];
    result__[ 277 ] = -t3024 * t332;
    result__[ 278 ] = t3024 * t410;
    result__[ 279 ] = t326 * t3024 * t525;
    result__[ 280 ] = -t3024 * t568;
    result__[ 281 ] = result__[271];
    real_type t3028 = LL__[29];
    result__[ 282 ] = t3028 * t9;
    result__[ 283 ] = -t3028 * t133;
    result__[ 284 ] = -t3 * t3028 * t248;
    result__[ 285 ] = t3028 * t291;
    result__[ 286 ] = result__[276];
    real_type t3032 = LR__[29];
    result__[ 287 ] = -t3032 * t332;
    result__[ 288 ] = t3032 * t410;
    result__[ 289 ] = t326 * t3032 * t525;
    result__[ 290 ] = -t3032 * t568;
    result__[ 291 ] = result__[281];
    real_type t3036 = LL__[30];
    result__[ 292 ] = t3036 * t9;
    result__[ 293 ] = -t3036 * t133;
    result__[ 294 ] = -t3 * t3036 * t248;
    result__[ 295 ] = t3036 * t291;
    result__[ 296 ] = result__[286];
    real_type t3040 = LR__[30];
    result__[ 297 ] = -t3040 * t332;
    result__[ 298 ] = t3040 * t410;
    result__[ 299 ] = t326 * t3040 * t525;
    result__[ 300 ] = -t3040 * t568;
    result__[ 301 ] = result__[291];
    real_type t3044 = LL__[31];
    result__[ 302 ] = t3044 * t9;
    result__[ 303 ] = -t3044 * t133;
    result__[ 304 ] = -t3 * t3044 * t248;
    result__[ 305 ] = t3044 * t291;
    result__[ 306 ] = result__[296];
    real_type t3048 = LR__[31];
    result__[ 307 ] = -t3048 * t332;
    result__[ 308 ] = t3048 * t410;
    result__[ 309 ] = t326 * t3048 * t525;
    result__[ 310 ] = -t3048 * t568;
    result__[ 311 ] = result__[301];
    real_type t3052 = LL__[32];
    result__[ 312 ] = t3052 * t9;
    result__[ 313 ] = -t3052 * t133;
    result__[ 314 ] = -t3 * t3052 * t248;
    result__[ 315 ] = t3052 * t291;
    result__[ 316 ] = result__[306];
    real_type t3056 = LR__[32];
    result__[ 317 ] = -t3056 * t332;
    result__[ 318 ] = t3056 * t410;
    result__[ 319 ] = t326 * t3056 * t525;
    result__[ 320 ] = -t3056 * t568;
    result__[ 321 ] = result__[311];
    real_type t3064 = t125 * t1306;
    real_type t3066 = t1950 * t9;
    result__[ 322 ] = t111 * t1336 * t1337 + t1337 * t1551 * t92 + t3064 * t9 + t3066;
    real_type t3072 = t1950 * t133;
    result__[ 323 ] = -t111 * t1336 * t1400 - t1400 * t1551 * t92 - t133 * t3064 - t3072;
    result__[ 324 ] = t111 * t1551 * t1552 - t1336 * t1552 * t92;
    real_type t3085 = t1951 * t248;
    result__[ 325 ] = -t111 * t1306 * t264 * t3 - t1306 * t1872 * t3 * t92 - t248 * t3 * t3064 - t3085;
    real_type t3091 = t1950 * t291;
    result__[ 326 ] = t111 * t1336 * t2012 + t1551 * t2012 * t92 + t291 * t3064 + t3091;
    result__[ 327 ] = t1552 * t1551;
    result__[ 328 ] = result__[161];
    result__[ 329 ] = t1306 * t160;
    result__[ 330 ] = result__[329];
    real_type t3096 = t402 * t1306;
    real_type t3098 = t2857 * t332;
    result__[ 331 ] = -t2244 * t2245 * t388 - t2245 * t2459 * t371 - t3096 * t332 - t3098;
    real_type t3104 = t2857 * t410;
    result__[ 332 ] = t2244 * t2308 * t388 + t2308 * t2459 * t371 + t3096 * t410 + t3104;
    result__[ 333 ] = t2244 * t2460 * t371 - t2459 * t2460 * t388;
    real_type t3117 = t2858 * t525;
    result__[ 334 ] = t1306 * t2779 * t326 * t371 + t1306 * t326 * t388 * t541 + t3096 * t326 * t525 + t3117;
    real_type t3123 = t2857 * t568;
    result__[ 335 ] = -t2244 * t2919 * t388 - t2459 * t2919 * t371 - t3096 * t568 - t3123;
    result__[ 336 ] = -t2460 * t2459;
    result__[ 337 ] = result__[181];
    real_type t3125 = t1306 * t437;
    result__[ 338 ] = -t3125;
    result__[ 339 ] = result__[338];
    real_type t3126 = t58 * t1016;
    real_type t3127 = t606 * t3126;
    real_type t3134 = t6 * t1016;
    real_type t3136 = t1334 * t8 * t3134;
    result__[ 340 ] = -t3127 * t1327 - t92 * (-t1005 * t1546 - t1328 * t9) - t111 * t1333 + t3136;
    real_type t3144 = t1334 * t132 * t3134;
    result__[ 341 ] = t3127 * t1395 - t92 * (t1328 * t133 + t1344 * t1546) - t111 * t1398 - t3144;
    result__[ 342 ] = -t111 * t1549 - t92 * result__[160];
    result__[ 343 ] = -t111 * t1328 * t1615 * t58 + t1546 * t58 * t92 * result__[316] + t1615 * t1703 * t606;
    real_type t3157 = t92 * t322;
    result__[ 344 ] = -t111 * t1566 * t1703 + t1331 * t3157 * t6 - t3127 * result__[316];
    real_type t3161 = t3 * t606;
    real_type t3173 = t3 * t1334 * t159 * t247 * t1016;
    result__[ 345 ] = t3161 * t3126 * t1943 - t92 * (t1328 * t248 * t3 + t1546 * t1883) - t111 * t1948 - t3173;
    real_type t3181 = t1334 * t290 * t3134;
    result__[ 346 ] = -t3127 * t2007 - t92 * (-t1328 * t291 - t1546 * t1956) - t111 * t2010 + t3181;
    result__[ 347 ] = -t58 * t1545 * result__[316];
    result__[ 348 ] = -t1549;
    result__[ 349 ] = result__[160];
    result__[ 350 ] = t159 * t3134;
    real_type t3184 = t350 * t1016;
    real_type t3185 = t767 * t3184;
    real_type t3192 = t329 * t1016;
    real_type t3194 = t2242 * t331 * t3192;
    result__[ 351 ] = t3185 * t2235 + t371 * (-t2062 * t2454 - t2236 * t332) + t388 * t2241 - t3194;
    real_type t3202 = t2242 * t409 * t3192;
    result__[ 352 ] = -t3185 * t2303 + t371 * (t2236 * t410 + t2252 * t2454) + t388 * t2306 + t3202;
    result__[ 353 ] = t2457 * t388 - t371 * result__[180];
    result__[ 354 ] = t2236 * t2523 * t350 * t388 - t2454 * t350 * t371 * t437 - t2523 * t2611 * t767;
    real_type t3216 = t371 * t599;
    result__[ 355 ] = -t2239 * t3216 * t329 + t2474 * t2611 * t388 + t3185 * t437;
    real_type t3220 = t326 * t767;
    real_type t3232 = t326 * t2242 * t436 * t524 * t1016;
    result__[ 356 ] = -t3220 * t3184 * t2850 + t371 * (t2236 * t326 * t525 + t2454 * t2790) + t388 * t2855 + t3232;
    real_type t3240 = t2242 * t567 * t3192;
    result__[ 357 ] = t3185 * t2914 + t371 * (-t2236 * t568 - t2454 * t2863) + t388 * t2917 - t3240;
    result__[ 358 ] = t350 * t2453 * t437;
    result__[ 359 ] = t2457;
    result__[ 360 ] = result__[180];
    real_type t3242 = t436 * t3192;
    result__[ 361 ] = -t3242;
    real_type t3243 = t6 * t81;
    real_type t3244 = t87 * t8;
    real_type t3245 = t129 * t58;
    real_type t3261 = t940 * t1109;
    real_type t3263 = t33 * t36 * t1117;
    real_type t3264 = -t1129;
    real_type t3265 = t3264 * t977;
    real_type t3266 = t996 * t10;
    real_type t3267 = t1122 * t923 - t1001 + t1085 - t1131 - t1132 + t1138 + t1139 + t1142 - t1143 + t1271 + t1760 + t3261 + t3263 + t3265 + t3266 + t985 + t999;
    real_type t3268 = t53 * t3267;
    real_type t3270 = t77 * t39;
    real_type t3271 = t15 * t3270;
    real_type t3272 = t27 * t33;
    real_type t3273 = t3272 + t68 + t66 - t70;
    real_type t3275 = t3273 * t77 - t1212 + t3271;
    real_type t3276 = t53 * t3275;
    real_type t3278 = t45 * t1224 - t1012 - t1014 + t1015 - t1016 + t1017 - t1018;
    real_type t3279 = t87 * t3278;
    real_type t3281 = t3279 * t79 + t3276;
    real_type t3282 = t6 * t3281;
    real_type t3286 = t20 * t3270;
    real_type t3289 = t1174 + t3286 + t77 * (-t35 + t95 - t43 + t31 - t46 + t48 + t50);
    real_type t3291 = t3289 * t53 + t1295;
    real_type t3292 = t6 * t3291;
    real_type t3295 = t940 * t1252;
    real_type t3297 = t33 * t36 * t1257;
    real_type t3300 = (t67 * t978 - t922) * t42;
    real_type t3302 = -t45 * t1164;
    real_type t3303 = t1261 * t923 + t1779 + t3295 + t3297 + t3300 + t3302 + t922 - t956 + t960 + t963 + t964;
    real_type t3304 = t53 * t3303;
    real_type t3308 = t58 * t1035;
    real_type t3309 = t3308 * t9;
    real_type t3310 = -t1285;
    real_type t3311 = t73 * t3310;
    real_type t3313 = t1679 * t9;
    real_type t3316 = XL__[16];
    real_type t3317 = sin(t3316);
    real_type t3318 = t3317 * t53;
    real_type t3319 = cos(t3316);
    real_type t3321 = -t3319 * t79 + t3318;
    real_type t3323 = t73 * t87 * t3321;
    real_type t3324 = t3323 * t9;
    real_type t3327 = t3317 * t79 + t3319 * t53;
    real_type t3328 = t3327 * t9;
    real_type t3330 = LL__[12];
    real_type t3332 = t224 - t63 + t3272 + t66 + t68 - t70;
    real_type t3333 = t3332 * t53;
    real_type t3334 = t73 * t3333;
    real_type t3336 = -t176;
    real_type t3337 = t6 * t3336;
    real_type t3342 = t3332 * t79;
    real_type t3343 = t73 * t3342;
    real_type t3347 = LL__[2];
    real_type t3350 = -4 * t926;
    real_type t3354 = -t3350 * t940;
    real_type t3355 = 2 * t944;
    real_type t3358 = (t3264 * t67 - t1154) * t42;
    real_type t3360 = 2 * t962;
    real_type t3361 = t3350 * t923 + t1154 - t1161 + t1167 + t1168 + t3354 + t3355 + t3358 - t3360 - 2 * t939 + 2 * t960;
    real_type t3362 = t73 * t3361;
    real_type t3364 = t77 * t51;
    real_type t3371 = 2 * t968;
    real_type t3375 = -t940 * t3371;
    real_type t3376 = 4 * t975;
    real_type t3377 = t3371 * t923 - t1001 + t1085 - t1131 - t1132 + t1138 + t1139 + t1142 - t1143 + t1271 + t3265 + t3266 + t3375 - t3376 + 4 * t971 + t985 + t999;
    real_type t3378 = t6 * t3377;
    real_type t3381 = t968 * t940;
    real_type t3382 = t949 * t977;
    real_type t3383 = t1713 - t972 + t3381 + t976 + t1084 + t3382 - t1085 + t1086 - t946 - t947 + t948 + t1001;
    real_type t3384 = t6 * t3383;
    real_type t3389 = ModelPars[124];
    real_type t3390 = -ModelPars[122] + t3389;
    real_type t3391 = t3390 * t3319;
    real_type t3392 = XL__[11];
    real_type t3393 = t3391 - t3392 - t3389;
    real_type t3395 = -t3390;
    real_type t3396 = t3317 * t3395;
    real_type t3397 = XL__[10];
    real_type t3398 = t3396 - t3397;
    real_type t3400 = t3393 * t53 - t3398 * t79;
    real_type t3401 = LL__[14];
    real_type t3402 = t3401 * t3400;
    real_type t3404 = t3319 * t3395;
    real_type t3405 = t3404 + t3389 + t3392;
    real_type t3408 = t3317 * t3390 + t3397;
    real_type t3410 = t3405 * t79 + t3408 * t53;
    real_type t3411 = LL__[15];
    real_type t3412 = t3411 * t3410;
    real_type t3414 = ModelPars[125];
    real_type t3416 = -t3414 - XL__[14];
    real_type t3418 = XL__[13];
    real_type t3419 = t79 * t3418;
    real_type t3420 = t3416 * t53 + t3419;
    real_type t3421 = LL__[17];
    real_type t3422 = t3421 * t3420;
    real_type t3424 = -t3416;
    real_type t3426 = t53 * t3418;
    real_type t3427 = t3424 * t79 + t3426;
    real_type t3428 = LL__[18];
    real_type t3429 = t3428 * t3427;
    real_type t3431 = XL__[15];
    real_type t3432 = t3431 * t8;
    real_type t3433 = LL__[11];
    real_type t3436 = t1334 * t3126;
    result__[ 362 ] = t3245 * t3244 * t3243 - t92 * (2 * t1404 * t9 + t58 * (2 * t1005 * t1047 - t1412 * t9) - t1420 * t9 - t1052 * t9) - t111 * (-t1049 * t1478 + t58 * (-t1005 * t3268 - t3282 * t8) - t128 * t3292 - t9 * t3304) - t115 * (-t3311 * t9 - t3309 + t3313) - t3330 * (t3324 - t3328) - t600 * (-t3334 * t9 - t3337 * t8 - t60) - t3347 * (-t162 * t9 - t167 * t9 - t3343 * t9) - t606 * (t58 * (-t3362 * t9 + 2 * t3364 * t9) - 2 * t1005 * t1072 - t1041 * t8 * t3378 - t8 * t3384) + t3402 * t9 + t3412 * t9 + t3422 * t9 + t3429 * t9 - t3433 * t3432 * t1336 - t3436 * t1327;
    real_type t3438 = t87 * t132;
    real_type t3461 = t3308 * t133;
    real_type t3463 = t1679 * t133;
    real_type t3466 = t3323 * t133;
    real_type t3467 = t3327 * t133;
    real_type t3495 = t3431 * t132;
    result__[ 363 ] = -t3245 * t3438 * t3243 - t92 * (-2 * t1404 * t133 + t58 * (-2 * t1047 * t1344 + t133 * t1412) + t1420 * t133 + t1052 * t133) - t111 * (t1355 * t1478 + t58 * (t132 * t3282 + t1344 * t3268) + t152 * t3292 + t133 * t3304) - t115 * (t133 * t3311 + t3461 - t3463) - t3330 * (-t3466 + t3467) - t600 * (t132 * t3337 + t133 * t3334 + t136) - t3347 * (t133 * t162 + t133 * t167 + t133 * t3343) - t606 * (t58 * (t133 * t3362 - 2 * t133 * t3364) + 2 * t1344 * t1072 + t1041 * t132 * t3378 + t132 * t3384) - t3402 * t133 - t3412 * t133 - t3422 * t133 - t3429 * t133 + t3433 * t3495 * t1336 + t3436 * t1395;
    real_type t3503 = -t1038;
    real_type t3505 = t73 * t3503 * result__[316];
    real_type t3512 = t79 * t3275;
    real_type t3527 = -t3327;
    real_type t3530 = t73 * t87 * t3527 * result__[316];
    real_type t3531 = t3321 * t160;
    real_type t3534 = t3343 * result__[316];
    real_type t3537 = t3334 * result__[316];
    real_type t3558 = t3431 * t159;
    result__[ 364 ] = -t92 * (t2019 + t58 * (t1022 * t160 + t1560) - t3505 - t2015) - t111 * (t1426 * t79 * t1169 + t58 * (t181 * t79 * t3267 - t159 * t6 * (t3279 * t53 - t3512)) - t322 * t6 * (-t3289 * t79 + t1518) + result__[316] * t79 * t3303) - t3330 * (t3530 - t3531) - t600 * (t163 + t3534 - t316) - t3347 * (-t313 - t3537 - t753) + t3401 * (-t3393 * t79 - t3398 * t53) * result__[316] + t3411 * (t3405 * t53 - t3408 * t79) * result__[316] + t3421 * (-t3416 * t79 + t3426) * result__[316] + t3428 * (t3424 * t53 - t3419) * result__[316] - t3433 * t3558 * t1551;
    real_type t3561 = t87 * t159;
    real_type t3564 = t159 * t1336;
    real_type t3579 = -t159 * t3282 - t181 * t3268;
    real_type t3585 = t73 * t1035 * result__[316];
    real_type t3590 = t3330 * t114;
    real_type t3591 = t3590 * t3531;
    real_type t3592 = t58 * t3333;
    real_type t3593 = t3592 * result__[316];
    real_type t3594 = t182 - t3593;
    real_type t3597 = t73 * t161 * result__[316];
    real_type t3598 = t58 * t3342;
    real_type t3599 = t3598 * result__[316];
    real_type t3601 = t3347 * (t3597 - t3599);
    real_type t3607 = -t3362 * result__[316] + 2 * t3364 * result__[316];
    result__[ 365 ] = -t285 * t3561 * t3243 - t92 * (-t1419 * t58 * result__[316] + 2 * t1047 * t1426 - t1414 * t73 - 4 * t1568 * t3564) - t111 * (-t1426 * t3268 + 2 * t1479 * t1589 - t202 * t3292 - t3579 * t73) - t115 * (-t3310 * t58 * result__[316] + t3585) - t3591 - t600 * t3594 - t3601 - t606 * (-t1041 * t3361 * result__[316] - 2 * t1072 * t172 + 2 * t1589 * t3378 - t3607 * t73) + t1704 * t1615;
    real_type t3617 = t92 * (-t189 - t3597);
    real_type t3619 = -t171 * t181 - t3593;
    real_type t3620 = t111 * t3619;
    real_type t3624 = t600 * t76 * result__[316];
    real_type t3626 = t3347 * t160 * t102;
    result__[ 366 ] = -t3617 - t3620 - t115 * t85 * result__[316] - t3624 - t3626 - t606 * (-2 * t1627 * result__[316] - 2 * t669 + 2 * t671);
    real_type t3634 = t73 * t1416;
    real_type t3635 = t3634 * result__[316];
    real_type t3644 = t3330 * t73 * t3321 * result__[316];
    real_type t3649 = t3347 * t165 * result__[316];
    result__[ 367 ] = t203 * t3243 - t92 * (t1409 * t58 * result__[316] + t3635) - t111 * (-t172 * t3278 * t79 - t1517) - t3644 + t600 * t160 * t79 * t104 + t3649 - t3436 * result__[316];
    real_type t3672 = -t3286 - t1174;
    real_type t3677 = -t1212 + t3271;
    real_type t3689 = -t94 - t19;
    real_type t3690 = t3689 * t53;
    real_type t3695 = t3689 * t79;
    real_type t3706 = t77 * t121;
    real_type t3711 = t118 * t77;
    result__[ 368 ] = -t92 * (2 * t1041 * t1739 * result__[316] + t58 * (-t1060 * t118 * result__[316] + 2 * t1735 * t181) - t2033 - t1739 * result__[316]) - t111 * (-t1426 * t53 * t1763 + t58 * (-t181 * t53 * (-2 * t1122 * t15 * t20 - t1126 * t1711 + t1147) - result__[316] * t53 * t3672) - t181 * t53 * t3677 - result__[316] * t53 * (-2 * t1261 * t15 * t20 - t1246 * t1711 + t1247)) - t600 * (-t3690 * t73 * result__[316] - t218) - t3347 * (-t3695 * t73 * result__[316] - t758) - t606 * (t58 * (-t73 * (-2 * t15 * t20 * t3350 + 2 * t1712 - 2 * t1713) * result__[316] + 2 * result__[316] * t3706) - 2 * t181 * t3711 - t1474 * t6 * (-2 * t15 * t20 * t3371 - 4 * t1719 + 4 * t1720) - t159 * t6 * (-2 * t939 + 2 * t1719 - 2 * t1720));
    real_type t3735 = -t1838 * t79 + t655 * t81;
    real_type t3736 = t6 * t3735;
    real_type t3737 = t322 * t3736;
    real_type t3747 = t58 * t80;
    real_type t3751 = t600 * t202 * t239;
    real_type t3753 = t3347 * t202 * t243;
    result__[ 369 ] = -t92 * (2 * t1589 * t1813 * t6 - 2 * t1808 * t3564 + t2037 - t3737) - t111 * (-t1589 * t1848 * t53 * t6 - t1159 * t1426 * t53 - t1542 - t1807) - t115 * t3747 * t1854 - t3751 - t3753 - t606 * (t58 * (-2 * t73 * t961 * result__[316] - 2 * t1838 * result__[316]) - t1474 * t1849);
    real_type t3763 = t3401 * t159;
    real_type t3765 = t3411 * t159;
    result__[ 370 ] = t1336 * t3763 + t1551 * t3765;
    result__[ 371 ] = t1336 * t3765 - t1551 * t3763;
    real_type t3769 = t3421 * t159;
    real_type t3771 = t3428 * t159;
    result__[ 372 ] = t1336 * t3769 + t1551 * t3771;
    result__[ 373 ] = t1336 * t3771 - t1551 * t3769;
    real_type t3775 = t3433 * t159;
    result__[ 374 ] = -t3775 * t1336;
    real_type t3777 = t87 * t3327;
    real_type t3779 = t73 * t3777 * result__[316];
    real_type t3780 = -t3321;
    real_type t3781 = t3780 * t160;
    result__[ 375 ] = -t3330 * (t3779 - t3781) + t3401 * (-t3318 * t3390 - t3404 * t79) * result__[316] + t3411 * (-t3317 * t3395 * t79 + t3391 * t53) * result__[316];
    real_type t3795 = t248 * t81;
    real_type t3827 = t3 * t3308 * t248;
    real_type t3831 = t3 * t1679 * t248;
    real_type t3834 = t3321 * t248;
    real_type t3835 = t3 * t193;
    real_type t3836 = t3835 * t3834;
    real_type t3841 = t73 * t3332;
    real_type t3842 = t3 * t3841;
    real_type t3848 = t3 * t670;
    result__[ 376 ] = -t731 * t114 * t3795 - t92 * (-2 * t1874 * t264 + t58 * (-2 * t1047 * t1863 * t247 + t1412 * t248 * t3) + t3 * t1420 * t248 + t3 * t1052 * t248) - t111 * (t1897 * t247 * t1478 + t58 * (t1863 * t247 * t3268 + t247 * t269 * t3281) + t1863 * t247 * t3291 + t1946 * t3304) - t115 * (t248 * t3 * t3311 + t3827 - t3831) - t3330 * (t248 * t3 * t3327 - t3836) - t600 * (t247 * t269 * t3336 + t1872 * t3842 + t253) - t3347 * (t167 * t248 * t3 + t264 * t3842 + t264 * t3848) - t606 * (t58 * (t248 * t3 * t3362 - 2 * t1946 * t3364) + 2 * t1863 * t247 * t1072 + t1897 * t247 * t3377 + t269 * t247 * t3383) - t3 * t3402 * t248 - t3 * t3412 * t248 - t3 * t3422 * t248 - t3 * t3429 * t248 + t3 * t3433 * t3431 * t264 + t3 * t1334 * t3126 * t1943;
    real_type t3884 = t87 * t290;
    real_type t3911 = t3308 * t291;
    real_type t3913 = t1679 * t291;
    real_type t3916 = t3323 * t291;
    real_type t3917 = t3327 * t291;
    real_type t3941 = t3431 * t290;
    result__[ 377 ] = t3245 * t3884 * t3243 + t3402 * t291 + t3412 * t291 + t3422 * t291 + t3429 * t291 - t92 * (2 * t1404 * t291 + t58 * (2 * t1047 * t1956 - t1412 * t291) - t1420 * t291 - t1052 * t291) - t111 * (-t1967 * t1478 + t58 * (-t1956 * t3268 - t290 * t3282) - t310 * t3292 - t291 * t3304) - t115 * (-t291 * t3311 - t3911 + t3913) - t3330 * (t3916 - t3917) - t600 * (-t290 * t3337 - t291 * t3334 - t294) - t3347 * (-t162 * t291 - t167 * t291 - t291 * t3343) - t606 * (t58 * (-t291 * t3362 + 2 * t291 * t3364) - 2 * t1956 * t1072 - t1041 * t290 * t3378 - t290 * t3384) - t3433 * t3941 * t1336 - t3436 * t2007;
    result__[ 378 ] = t159 * t3337 + t313 + t3537;
    result__[ 379 ] = t163 + t3534 + t168;
    result__[ 380 ] = 2 * t1072 * t181 + t1474 * t3378 + t159 * t3384 - t3607 * t58;
    result__[ 381 ] = -t1423;
    result__[ 382 ] = t1426 * t1478 + t322 * t3292 + t3304 * result__[316] - t3579 * t58;
    real_type t3955 = t3308 * result__[316];
    real_type t3957 = t1679 * result__[316];
    result__[ 383 ] = t3311 * result__[316] + t3955 - t3957;
    result__[ 384 ] = t58 * t3561 * t3243;
    result__[ 385 ] = result__[347];
    result__[ 386 ] = -t3558 * t1336;
    real_type t3960 = t3323 * result__[316];
    real_type t3961 = t3327 * t160;
    result__[ 387 ] = -t3960 + t3961;
    result__[ 388 ] = t3400 * t160;
    result__[ 389 ] = t3410 * t160;
    result__[ 390 ] = t3420 * t160;
    result__[ 391 ] = t3427 * t160;
    real_type t3962 = t329 * t81;
    real_type t3963 = t366 * t331;
    real_type t3964 = t406 * t350;
    real_type t3967 = t501 - t355 + t3272 + t66 + t68 - t70;
    real_type t3968 = t3967 * t346;
    real_type t3969 = t358 * t3968;
    real_type t3971 = -t453;
    real_type t3972 = t329 * t3971;
    real_type t3977 = t3967 * t364;
    real_type t3978 = t358 * t3977;
    real_type t3982 = LR__[2];
    real_type t3987 = t2042 * t3350 + t1154 - t1161 + t1167 + t1168 - 2 * t2045 + 2 * t2047 + t3354 + t3355 + t3358 - t3360;
    real_type t3988 = t358 * t3987;
    real_type t3990 = t362 * t344;
    real_type t3999 = t2042 * t3371 - t1001 + t1085 - t1131 + t1138 + t1139 + t1142 - t1143 + t1271 + 4 * t2053 + t2056 - t2138 + t3265 + t3266 + t3375 - t3376 + t999;
    real_type t4000 = t329 * t3999;
    real_type t4003 = t2621 - t2054 + t3381 + t976 + t2125 + t3382 - t1085 + t1086 - t946 - t947 + t948 + t1001;
    real_type t4004 = t329 * t4003;
    real_type t4021 = t1122 * t2042 - t1001 + t1085 - t1131 + t1138 + t1139 + t1142 - t1143 + t1271 + t2056 - t2138 + t2668 + t3261 + t3263 + t3265 + t3266 + t999;
    real_type t4022 = t346 * t4021;
    real_type t4024 = t362 * t39;
    real_type t4025 = t337 * t4024;
    real_type t4027 = t3273 * t362 - t2174 + t4025;
    real_type t4028 = t346 * t4027;
    real_type t4029 = t366 * t3278;
    real_type t4031 = t364 * t4029 + t4028;
    real_type t4032 = t329 * t4031;
    real_type t4036 = t340 * t4024;
    real_type t4039 = t2150 + t4036 + t362 * (-t35 + t95 - t43 + t31 - t46 + t343 + t50);
    real_type t4041 = t346 * t4039 + t2208;
    real_type t4042 = t329 * t4041;
    real_type t4045 = t1261 * t2042 + t2047 + t2687 + t3295 + t3297 + t3300 + t3302 + t922 - t956 + t963 + t964;
    real_type t4046 = t346 * t4045;
    real_type t4050 = t350 * t2076;
    real_type t4051 = t4050 * t332;
    real_type t4052 = t358 * t3310;
    real_type t4054 = t2587 * t332;
    real_type t4057 = XR__[16];
    real_type t4058 = sin(t4057);
    real_type t4059 = t4058 * t346;
    real_type t4060 = cos(t4057);
    real_type t4062 = -t364 * t4060 + t4059;
    real_type t4064 = t358 * t366 * t4062;
    real_type t4065 = t4064 * t332;
    real_type t4068 = t346 * t4060 + t364 * t4058;
    real_type t4069 = t4068 * t332;
    real_type t4071 = LR__[12];
    real_type t4073 = t3390 * t4060;
    real_type t4074 = XR__[11];
    real_type t4075 = t4073 - t4074 - t3389;
    real_type t4077 = t4058 * t3395;
    real_type t4078 = XR__[10];
    real_type t4079 = t4077 - t4078;
    real_type t4081 = t346 * t4075 - t364 * t4079;
    real_type t4082 = LR__[14];
    real_type t4083 = t4082 * t4081;
    real_type t4085 = t4060 * t3395;
    real_type t4086 = t4085 + t3389 + t4074;
    real_type t4089 = t3390 * t4058 + t4078;
    real_type t4091 = t346 * t4089 + t364 * t4086;
    real_type t4092 = LR__[15];
    real_type t4093 = t4092 * t4091;
    real_type t4096 = -t3414 - XR__[14];
    real_type t4098 = XR__[13];
    real_type t4099 = t364 * t4098;
    real_type t4100 = t346 * t4096 + t4099;
    real_type t4101 = LR__[17];
    real_type t4102 = t4101 * t4100;
    real_type t4104 = -t4096;
    real_type t4106 = t346 * t4098;
    real_type t4107 = t364 * t4104 + t4106;
    real_type t4108 = LR__[18];
    real_type t4109 = t4108 * t4107;
    real_type t4111 = XR__[15];
    real_type t4112 = t4111 * t331;
    real_type t4113 = LR__[11];
    real_type t4116 = t2242 * t3184;
    result__[ 392 ] = -t3964 * t3963 * t3962 + t761 * (-t331 * t3972 - t332 * t3969 - t352) + t3982 * (-t332 * t3978 - t332 * t439 - t332 * t444) + t767 * (t350 * (-t332 * t3988 + 2 * t332 * t3990) - 2 * t2062 * t2113 - t2082 * t331 * t4000 - t331 * t4004) + t371 * (2 * t2312 * t332 + t350 * (2 * t2062 * t2088 - t2320 * t332) - t2328 * t332 - t2093 * t332) + t388 * (-t2090 * t2386 + t350 * (-t2062 * t4022 - t331 * t4032) - t405 * t4042 - t332 * t4046) + t392 * (-t332 * t4052 - t4051 + t4054) + t4071 * (t4065 - t4069) - t4083 * t332 - t4093 * t332 - t4102 * t332 - t4109 * t332 + t4113 * t4112 * t2244 + t4116 * t2235;
    real_type t4118 = t366 * t409;
    real_type t4162 = t4050 * t410;
    real_type t4164 = t2587 * t410;
    real_type t4167 = t4064 * t410;
    real_type t4168 = t4068 * t410;
    real_type t4175 = t4111 * t409;
    result__[ 393 ] = t3964 * t4118 * t3962 + t761 * (t3969 * t410 + t3972 * t409 + t413) + t3982 * (t3978 * t410 + t410 * t439 + t410 * t444) + t767 * (t350 * (t3988 * t410 - 2 * t3990 * t410) + 2 * t2252 * t2113 + t2082 * t409 * t4000 + t409 * t4004) + t371 * (-2 * t2312 * t410 + t350 * (-2 * t2088 * t2252 + t2320 * t410) + t2328 * t410 + t2093 * t410) + t388 * (t2263 * t2386 + t350 * (t2252 * t4022 + t4032 * t409) + t429 * t4042 + t410 * t4046) + t392 * (t4052 * t410 + t4162 - t4164) + t4071 * (-t4167 + t4168) + t4083 * t410 + t4093 * t410 + t4102 * t410 + t4109 * t410 - t4113 * t4175 * t2244 - t4116 * t2303;
    real_type t4197 = t3978 * t437;
    real_type t4200 = t3969 * t437;
    real_type t4207 = -t2079;
    real_type t4209 = t358 * t4207 * t437;
    real_type t4216 = t364 * t4027;
    real_type t4231 = -t4068;
    real_type t4234 = t358 * t366 * t4231 * t437;
    real_type t4235 = t4062 * t437;
    real_type t4238 = t4111 * t436;
    result__[ 394 ] = -t4082 * (-t346 * t4079 - t364 * t4075) * t437 - t4092 * (t346 * t4086 - t364 * t4089) * t437 - t4101 * (-t364 * t4096 + t4106) * t437 - t4108 * (t346 * t4104 - t4099) * t437 + t761 * (t440 + t4197 - t594) + t3982 * (-t591 - t4200 - t912) + t371 * (t2926 + t350 * (t2069 * t437 + t2468) - t4209 - t2922) + t388 * (t2334 * t364 * t2146 + t350 * (t458 * t364 * t4021 - t436 * t329 * (t346 * t4029 - t4216)) - t599 * t329 * (-t364 * t4039 + t2426) + t437 * t364 * t4045) + t4071 * (t4234 - t4235) + t4113 * t4238 * t2459;
    real_type t4241 = t366 * t436;
    real_type t4244 = t436 * t2244;
    real_type t4259 = -t4022 * t458 - t4032 * t436;
    real_type t4265 = t358 * t2076 * t437;
    real_type t4270 = t4071 * t391;
    real_type t4271 = t4270 * t4235;
    real_type t4272 = t350 * t3968;
    real_type t4273 = t4272 * t437;
    real_type t4274 = t459 - t4273;
    real_type t4277 = t358 * t438 * t437;
    real_type t4278 = t350 * t3977;
    real_type t4279 = t4278 * t437;
    real_type t4281 = t3982 * (t4277 - t4279);
    real_type t4287 = -t3988 * t437 + 2 * t3990 * t437;
    result__[ 395 ] = t562 * t4241 * t3962 + t371 * (-t2327 * t350 * t437 + 2 * t2088 * t2334 - t2322 * t358 - 4 * t2476 * t4244) + t388 * (-t2334 * t4022 + 2 * t2387 * t2497 - t358 * t4259 - t4042 * t479) + t392 * (-t3310 * t350 * t437 + t4265) + t4271 + t761 * t4274 + t4281 + t767 * (-t2082 * t3987 * t437 - 2 * t2113 * t449 + 2 * t2497 * t4000 - t358 * t4287) - t2612 * t2523;
    real_type t4297 = t761 * t361 * t437;
    real_type t4299 = t3982 * t437 * t380;
    real_type t4305 = t371 * (-t466 - t4277);
    real_type t4307 = -t448 * t458 - t4273;
    real_type t4308 = t388 * t4307;
    result__[ 396 ] = t4297 + t4299 + t767 * (-2 * t2535 * t437 - 2 * t830 + 2 * t832) + t4305 + t4308 + t392 * t85 * t437;
    real_type t4316 = t3982 * t442 * t437;
    real_type t4319 = t358 * t2324;
    real_type t4320 = t4319 * t437;
    real_type t4329 = t4071 * t358 * t4062 * t437;
    result__[ 397 ] = -t480 * t3962 - t761 * t437 * t364 * t104 - t4316 + t371 * (t2317 * t350 * t437 + t4320) + t388 * (-t3278 * t364 * t449 - t2425) + t4329 + t4116 * t437;
    real_type t4331 = -t373 - t339;
    real_type t4332 = t4331 * t346;
    real_type t4337 = t4331 * t364;
    real_type t4348 = t362 * t398;
    real_type t4353 = t395 * t362;
    real_type t4391 = -t4036 - t2150;
    real_type t4396 = -t2174 + t4025;
    result__[ 398 ] = t761 * (-t358 * t4332 * t437 - t495) + t3982 * (-t358 * t4337 * t437 - t917) + t767 * (t350 * (-t358 * (-2 * t3350 * t337 * t340 + 2 * t2620 - 2 * t2621) * t437 + 2 * t437 * t4348) - 2 * t458 * t4353 - t2382 * t329 * (-2 * t337 * t3371 * t340 - 4 * t2627 + 4 * t2628) - t436 * t329 * (-2 * t2045 + 2 * t2627 - 2 * t2628)) + t371 * (2 * t2082 * t2647 * t437 + t350 * (-t2101 * t395 * t437 + 2 * t2643 * t458) - t2940 - t2647 * t437) + t388 * (-t2334 * t346 * t2671 + t350 * (-t458 * t346 * (-2 * t1122 * t337 * t340 - t1126 * t2619 + t2142) - t437 * t346 * t4391) - t458 * t346 * t4396 - t437 * t346 * (-2 * t1261 * t337 * t340 - t1246 * t2619 + t2186));
    real_type t4409 = t761 * t479 * t516;
    real_type t4411 = t3982 * t479 * t520;
    real_type t4428 = -t2745 * t364 + t81 * t816;
    real_type t4429 = t329 * t4428;
    real_type t4430 = t599 * t4429;
    real_type t4440 = t350 * t80;
    result__[ 399 ] = t4409 + t4411 + t767 * (t350 * (-2 * t358 * t437 * t961 - 2 * t2745 * t437) - t2382 * t2756) + t371 * (2 * t2497 * t2720 * t329 - 2 * t2715 * t4244 + t2944 - t4430) + t388 * (-t2497 * t2755 * t329 * t346 - t1159 * t2334 * t346 - t2450 - t2714) + t392 * t4440 * t2761;
    real_type t4443 = t4082 * t436;
    real_type t4445 = t4092 * t436;
    result__[ 400 ] = -t2244 * t4443 - t2459 * t4445;
    result__[ 401 ] = -t2244 * t4445 + t2459 * t4443;
    real_type t4449 = t4101 * t436;
    real_type t4451 = t4108 * t436;
    result__[ 402 ] = -t2244 * t4449 - t2459 * t4451;
    result__[ 403 ] = -t2244 * t4451 + t2459 * t4449;
    real_type t4455 = t4113 * t436;
    result__[ 404 ] = t4455 * t2244;
    real_type t4467 = t366 * t4068;
    real_type t4469 = t358 * t4467 * t437;
    real_type t4470 = -t4062;
    real_type t4471 = t4470 * t437;
    result__[ 405 ] = -t4082 * (-t3390 * t4059 - t364 * t4085) * t437 - t4092 * (-t3395 * t364 * t4058 + t346 * t4073) * t437 + t4071 * (t4469 - t4471);
    real_type t4474 = t525 * t81;
    real_type t4485 = t358 * t3967;
    real_type t4486 = t326 * t4485;
    real_type t4492 = t326 * t831;
    real_type t4543 = t326 * t4050 * t525;
    real_type t4547 = t326 * t2587 * t525;
    real_type t4550 = t4062 * t525;
    real_type t4551 = t326 * t470;
    real_type t4552 = t4551 * t4550;
    result__[ 406 ] = t890 * t391 * t4474 + t326 * t4083 * t525 + t326 * t4093 * t525 + t326 * t4102 * t525 + t326 * t4109 * t525 + t761 * (t3971 * t524 * t546 + t2779 * t4486 + t530) + t3982 * (t326 * t444 * t525 + t4486 * t541 + t4492 * t541) + t767 * (t350 * (t326 * t3988 * t525 - 2 * t2853 * t3990) + 2 * t2770 * t524 * t2113 + t2804 * t524 * t3999 + t546 * t524 * t4003) + t371 * (-2 * t2781 * t541 + t350 * (-2 * t2088 * t2770 * t524 + t2320 * t326 * t525) + t326 * t2328 * t525 + t326 * t2093 * t525) + t388 * (t2804 * t524 * t2386 + t350 * (t2770 * t4022 * t524 + t4031 * t524 * t546) + t2770 * t524 * t4041 + t2853 * t4046) + t392 * (t326 * t4052 * t525 + t4543 - t4547) + t4071 * (t326 * t4068 * t525 - t4552) - t326 * t2242 * t3184 * t2850 - t326 * t4113 * t4111 * t541;
    real_type t4563 = t366 * t567;
    real_type t4611 = t4050 * t568;
    real_type t4613 = t2587 * t568;
    real_type t4616 = t4064 * t568;
    real_type t4617 = t4068 * t568;
    real_type t4621 = t4111 * t567;
    result__[ 407 ] = -t3964 * t4563 * t3962 - t4083 * t568 - t4093 * t568 - t4102 * t568 - t4109 * t568 + t761 * (-t3969 * t568 - t3972 * t567 - t571) + t3982 * (-t3978 * t568 - t439 * t568 - t444 * t568) + t767 * (t350 * (-t3988 * t568 + 2 * t3990 * t568) - 2 * t2863 * t2113 - t2082 * t567 * t4000 - t567 * t4004) + t371 * (2 * t2312 * t568 + t350 * (2 * t2088 * t2863 - t2320 * t568) - t2328 * t568 - t2093 * t568) + t388 * (-t2874 * t2386 + t350 * (-t2863 * t4022 - t4032 * t567) - t587 * t4042 - t568 * t4046) + t392 * (-t4052 * t568 - t4611 + t4613) + t4071 * (t4616 - t4617) + t4116 * t2914 + t4113 * t4621 * t2244;
    result__[ 408 ] = -t3972 * t436 - t4200 - t591;
    result__[ 409 ] = -t440 - t4197 - t445;
    result__[ 410 ] = -2 * t2113 * t458 - t2382 * t4000 + t350 * t4287 - t4004 * t436;
    result__[ 411 ] = t2331;
    result__[ 412 ] = -t2334 * t2386 + t350 * t4259 - t4042 * t599 - t4046 * t437;
    real_type t4634 = t4050 * t437;
    real_type t4636 = t2587 * t437;
    result__[ 413 ] = -t4052 * t437 - t4634 + t4636;
    result__[ 414 ] = -t350 * t4241 * t3962;
    result__[ 415 ] = result__[358];
    result__[ 416 ] = t4238 * t2244;
    real_type t4639 = t4064 * t437;
    real_type t4640 = t4068 * t437;
    result__[ 417 ] = t4639 - t4640;
    result__[ 418 ] = -t4081 * t437;
    result__[ 419 ] = -t4091 * t437;
    result__[ 420 ] = -t4100 * t437;
    result__[ 421 ] = -t4107 * t437;
    real_type t4647 = -t1304 * t16 - t1306 - t1307 - t934;
    real_type t4648 = t125 * t4647;
    real_type t4656 = -t1005 * t97 - t3598 * t9;
    real_type t4659 = t1005 * t54;
    real_type t4662 = t58 * t1075;
    real_type t4664 = t73 * t1063;
    real_type t4668 = t58 * t3503;
    real_type t4670 = t73 * t1022;
    real_type t4673 = t1272 * t10 / 2;
    real_type t4674 = t1087 / 2;
    real_type t4675 = -t981 + t986 - t989 - t983 + t992 + t993 + t4673 + t4674;
    real_type t4676 = t53 * t4675;
    real_type t4681 = t77 * t27;
    real_type t4682 = t20 * t4681;
    real_type t4685 = -t1174 + t4682 + t77 * (t35 + t40 + t43 - t31 + t46 - t48 - t50);
    real_type t4687 = t4685 * t79 + t1518;
    real_type t4688 = t6 * t4687;
    real_type t4691 = -t45 * t1224;
    real_type t4692 = t4691 + t1012 + t1014 - t1015 + t1016 - t1017 + t1018;
    real_type t4693 = t87 * t4692;
    real_type t4695 = t4693 * t53 + t3512;
    real_type t4696 = t6 * t4695;
    real_type t4699 = -t1272 * t10;
    real_type t4700 = t1131 - t985 + t1132 + t1085 + t1137 - t1139 + t4699 - t1087;
    real_type t4701 = t79 * t4700;
    real_type t4705 = t73 * t1157;
    real_type t4707 = t987 - t47;
    real_type t4708 = t58 * t4707;
    real_type t4711 = LL__[13];
    real_type t4713 = t58 * t958;
    real_type t4715 = t73 * t4707;
    real_type t4719 = t20 * t21;
    real_type t4721 = t15 * t21;
    real_type t4723 = -t1005 * t4721 + t4719 * t59;
    real_type t4724 = LL__[16];
    real_type t4728 = t1005 * t4719 + t4721 * t59;
    real_type t4730 = t115 * t1294;
    real_type t4732 = t129 * t961;
    result__[ 422 ] = -t3066 - t3136 + t4648 * t9 - t11 * (-t3841 * t9 - t670 * t9) - t600 * t4656 - t3347 * (t3592 * t9 - t4659) - t606 * (-t4662 * t9 - t4664 * t9) - t92 * (-t4668 * t9 - t4670 * t9 + 2 * t4676 * t9) - t111 * (-t128 * t4696 - t4688 * t629 - t4701 * t9) - t4711 * (-t4705 * t9 - t4708 * t9) - t3411 * (-t4713 * t9 - t4715 * t9) - t4724 * t4723 - t3428 * t4728 + t4730 * t9 + t4732 * t9 + t3433 * t128 * t1326 - t3590 * t3328;
    real_type t4744 = t133 * t3598 + t1344 * t97;
    real_type t4747 = t1344 * t54;
    real_type t4775 = t1344 * t4721 - t135 * t4719;
    real_type t4779 = -t1344 * t4719 - t135 * t4721;
    result__[ 423 ] = t3072 + t3144 - t4648 * t133 - t11 * (t133 * t3841 + t133 * t670) - t600 * t4744 - t3347 * (-t133 * t3592 + t4747) - t606 * (t133 * t4662 + t133 * t4664) - t92 * (t133 * t4668 + t133 * t4670 - 2 * t133 * t4676) - t111 * (t133 * t4701 + t152 * t4696 + t4688 * t648) - t4711 * (t133 * t4705 + t133 * t4708) - t3411 * (t133 * t4713 + t133 * t4715) - t4724 * t4775 - t3428 * t4779 - t4730 * t133 - t4732 * t133 - t3433 * t152 * t1326 + t3590 * t3467;
    result__[ 424 ] = -t600 * t3619 - t3601 - t92 * (-t1412 * t73 * result__[316] + t1419 * t58 * result__[316] - 2 * t4675 * t79 * result__[316]) - t111 * (-t202 * t6 * (t4685 * t53 - t1295) - t322 * t6 * (-t4693 * t79 + t3276) - result__[316] * t53 * t4700) - t3591;
    real_type t4809 = t58 * t3332;
    real_type t4813 = t3534 - t315;
    real_type t4833 = t4715 * result__[316];
    real_type t4838 = t4708 * result__[316];
    real_type t4843 = -t172 * t4721 - t181 * t4719;
    real_type t4844 = t4724 * t4843;
    real_type t4847 = t172 * t4719 - t181 * t4721;
    real_type t4848 = t3428 * t4847;
    result__[ 425 ] = -t11 * (-t4809 * result__[316] + t755) - t600 * t4813 - t3347 * (-t3537 - t313) - t606 * (-t1063 * t58 * result__[316] + t1075 * t73 * result__[316]) - t92 * (-t1022 * t58 * result__[316] + t3505) - t111 * (-t202 * t4696 + t322 * t4688) - t4711 * (-t1157 * t58 * result__[316] + t4833) - t3411 * (t73 * t958 * result__[316] - t4838) - t4844 - t4848 + t3433 * t202 * t1326 + t3330 * t193 * t3961;
    real_type t4853 = -t313 + t174;
    result__[ 426 ] = -t92 * t4853 - t111 * (-t163 - t3534);
    real_type t4862 = t58 * t1036 * result__[316];
    real_type t4873 = t3433 * t73;
    real_type t4874 = t4873 * result__[316];
    result__[ 427 ] = -t606 * (-t1019 * t58 * result__[316] - t3585) - t92 * (t1020 * t73 * result__[316] - t4862) - t111 * (-t181 * t4692 * t53 - t1602) + t115 * t1291 * result__[316] + t4874 - t3330 * t58 * t3327 * result__[316];
    real_type t4885 = -t3695 * t58 * result__[316] - t181 * t226;
    real_type t4889 = t181 * t216;
    real_type t4899 = t15 * t4681 + t1212;
    real_type t4900 = t79 * t4899;
    real_type t4901 = t172 * t4900;
    real_type t4906 = -t4843;
    real_type t4907 = t4724 * t4906;
    real_type t4908 = -t4847;
    real_type t4909 = t3428 * t4908;
    result__[ 428 ] = -t11 * (-t3689 * t73 * result__[316] - t199) - t600 * t4885 - t3347 * (t3690 * t58 * result__[316] - t4889) - t92 * (-t1566 * t3706 * t58 + t1566 * t3711 * t73) - t111 * (-t181 * t3672 * t79 - t4901) - t4907 - t4909;
    real_type t4911 = t11 * t1611 * result__[316];
    real_type t4913 = t600 * t1933 * t3564;
    real_type t4915 = t3347 * t322 * t239;
    real_type t4918 = t606 * t73 * t1803 * t1854;
    real_type t4919 = -t1805;
    real_type t4932 = t4711 * t58 * result__[316];
    real_type t4934 = t3411 * t73 * result__[316];
    result__[ 429 ] = -t4911 + t4913 - t4915 - t4918 - t92 * (-t4919 * t58 * result__[316] + 2 * t1798 * result__[316]) - t111 * (-t1833 * t79 * result__[316] - t202 * t3736) - t4932 - t4934 + t115 * t1803 * t1854;
    result__[ 430 ] = -t3590 * t3781;
    real_type t4957 = t247 * t4719;
    real_type t4959 = t247 * t4721;
    real_type t4961 = t1863 * t4959 - t252 * t4957;
    real_type t4965 = -t1863 * t4957 - t252 * t4959;
    real_type t4973 = t3 * t4809;
    real_type t4976 = t1863 * t262 + t264 * t4973;
    real_type t4979 = t1863 * t251;
    real_type t4985 = t1035 * t248;
    real_type t5005 = t3327 * t248;
    result__[ 431 ] = -t111 * (t1863 * t247 * t4695 + t247 * t252 * t4687 + t1946 * t4701) - t4711 * (t248 * t3 * t4705 + t248 * t3 * t4708) - t3411 * (t248 * t3 * t4713 + t248 * t3 * t4715) - t4724 * t4961 - t3428 * t4965 + t3085 + t3173 - t3 * t4648 * t248 - t11 * (t248 * t3842 + t248 * t3848) - t600 * t4976 - t3347 * (-t1872 * t4973 + t4979) - t606 * (t1019 * t114 * t248 * t3 + t3835 * t4985) - t92 * (t248 * t3 * t4668 + t248 * t3 * t4670 - 2 * t1946 * t4676) - t3 * t115 * t87 * t1915 - t3 * t129 * t45 * t1937 - t3 * t4873 * t1943 + t3 * t3330 * t114 * t5005;
    real_type t5015 = -t1956 * t97 - t291 * t3598;
    real_type t5018 = t1956 * t54;
    real_type t5046 = -t1956 * t4721 + t293 * t4719;
    real_type t5050 = t1956 * t4719 + t293 * t4721;
    result__[ 432 ] = -t11 * (-t291 * t3841 - t291 * t670) - t600 * t5015 - t3347 * (t291 * t3592 - t5018) - t606 * (-t291 * t4662 - t291 * t4664) - t92 * (-t291 * t4668 - t291 * t4670 + 2 * t291 * t4676) - t111 * (-t291 * t4701 - t310 * t4696 - t4688 * t750) - t4711 * (-t291 * t4705 - t291 * t4708) - t3411 * (-t291 * t4713 - t291 * t4715) - t4724 * t5046 - t3428 * t5050 - t3091 - t3181 + t4648 * t291 + t4730 * t291 + t4732 * t291 + t3433 * t310 * t1326 - t3590 * t3917;
    result__[ 433 ] = t3841 * result__[316] + t671;
    result__[ 434 ] = t3599 + t187;
    result__[ 435 ] = t3594;
    result__[ 436 ] = t4662 * result__[316] + t4664 * result__[316];
    result__[ 437 ] = t4668 * result__[316] + t4670 * result__[316] - 2 * t4676 * result__[316];
    result__[ 438 ] = t202 * t4688 + t322 * t4696 + t4701 * result__[316];
    result__[ 439 ] = t1294 * result__[316];
    result__[ 440 ] = t4647 * t160;
    result__[ 441 ] = t961 * result__[316];
    result__[ 442 ] = -result__[350];
    result__[ 443 ] = -result__[330];
    result__[ 444 ] = t322 * t1326;
    result__[ 445 ] = -t58 * t3777 * result__[316];
    result__[ 446 ] = t4705 * result__[316] + t4838;
    result__[ 447 ] = t4713 * result__[316] + t4833;
    result__[ 448 ] = t4908;
    result__[ 449 ] = t4843;
    real_type t5072 = t350 * t4207;
    real_type t5074 = t358 * t2069;
    real_type t5076 = -t981 + t2057 - t2059 - t983 + t992 + t993 + t4673 + t4674;
    real_type t5077 = t346 * t5076;
    real_type t5082 = t362 * t27;
    real_type t5083 = t340 * t5082;
    real_type t5086 = -t2150 + t5083 + t362 * (t35 + t40 + t43 - t31 + t46 - t343 - t50);
    real_type t5088 = t364 * t5086 + t2426;
    real_type t5089 = t329 * t5088;
    real_type t5091 = t366 * t4692;
    real_type t5093 = t346 * t5091 + t4216;
    real_type t5094 = t329 * t5093;
    real_type t5096 = t1131 - t2056 + t2138 + t1085 + t1137 - t1139 + t4699 - t1087;
    real_type t5097 = t364 * t5096;
    real_type t5101 = t358 * t1157;
    real_type t5103 = t987 - t342;
    real_type t5104 = t350 * t5103;
    real_type t5107 = LR__[13];
    real_type t5109 = t350 * t958;
    real_type t5111 = t358 * t5103;
    real_type t5115 = t340 * t21;
    real_type t5117 = t337 * t21;
    real_type t5119 = -t2062 * t5117 + t351 * t5115;
    real_type t5120 = LR__[16];
    real_type t5124 = t2062 * t5115 + t351 * t5117;
    real_type t5132 = -t2062 * t375 - t332 * t4278;
    real_type t5135 = t2062 * t347;
    real_type t5138 = t350 * t2116;
    real_type t5140 = t358 * t2104;
    real_type t5144 = t402 * t4647;
    real_type t5146 = t392 * t2207;
    real_type t5148 = t406 * t961;
    result__[ 450 ] = t371 * (-t332 * t5072 - t332 * t5074 + 2 * t332 * t5077) + t388 * (-t332 * t5097 - t405 * t5094 - t5089 * t790) + t5107 * (-t332 * t5101 - t332 * t5104) + t4092 * (-t332 * t5109 - t332 * t5111) + t5120 * t5119 + t4108 * t5124 + t333 * (-t332 * t4485 - t332 * t831) + t761 * t5132 + t3982 * (t332 * t4272 - t5135) + t767 * (-t332 * t5138 - t332 * t5140) + t3098 + t3194 - t5144 * t332 - t5146 * t332 - t5148 * t332 - t4113 * t405 * t2234 + t4270 * t4069;
    real_type t5159 = t2252 * t375 + t410 * t4278;
    real_type t5162 = t2252 * t347;
    real_type t5190 = t2252 * t5117 - t412 * t5115;
    real_type t5194 = -t2252 * t5115 - t412 * t5117;
    result__[ 451 ] = t333 * (t410 * t4485 + t410 * t831) + t761 * t5159 + t3982 * (-t410 * t4272 + t5162) + t767 * (t410 * t5138 + t410 * t5140) + t371 * (t410 * t5072 + t410 * t5074 - 2 * t410 * t5077) + t388 * (t410 * t5097 + t429 * t5094 + t5089 * t809) + t5107 * (t410 * t5101 + t410 * t5104) + t4092 * (t410 * t5109 + t410 * t5111) + t5120 * t5190 + t4108 * t5194 - t3104 - t3202 + t5144 * t410 + t5146 * t410 + t5148 * t410 + t4113 * t429 * t2234 - t4270 * t4168;
    result__[ 452 ] = t761 * t4307 + t4281 + t371 * (-t2320 * t358 * t437 + t2327 * t350 * t437 - 2 * t364 * t437 * t5076) + t388 * (-t479 * t329 * (t346 * t5086 - t2208) - t599 * t329 * (-t364 * t5091 + t4028) - t437 * t346 * t5096) + t4271;
    real_type t5235 = t5111 * t437;
    real_type t5240 = t5104 * t437;
    real_type t5245 = -t449 * t5117 - t458 * t5115;
    real_type t5246 = t5120 * t5245;
    real_type t5249 = t449 * t5115 - t458 * t5117;
    real_type t5250 = t4108 * t5249;
    real_type t5251 = t350 * t3967;
    real_type t5255 = t4197 - t593;
    result__[ 453 ] = t371 * (-t2069 * t350 * t437 + t4209) + t388 * (-t479 * t5094 + t5089 * t599) + t5107 * (-t1157 * t350 * t437 + t5235) + t4092 * (t358 * t437 * t958 - t5240) + t5246 + t5250 + t333 * (-t437 * t5251 + t914) + t761 * t5255 + t3982 * (-t4200 - t591) + t767 * (-t2104 * t350 * t437 + t2116 * t358 * t437) - t4113 * t479 * t2234 - t4071 * t470 * t4640;
    real_type t5269 = -t591 + t451;
    result__[ 454 ] = t371 * t5269 + t388 * (-t440 - t4197);
    real_type t5278 = t350 * t2077 * t437;
    real_type t5289 = t4113 * t358;
    real_type t5290 = t5289 * t437;
    result__[ 455 ] = t767 * (-t1019 * t350 * t437 - t4265) + t371 * (t2067 * t358 * t437 - t5278) + t388 * (-t346 * t458 * t4692 - t2510) - t392 * t2204 * t437 - t5290 + t4071 * t350 * t4068 * t437;
    real_type t5301 = -t350 * t4337 * t437 - t458 * t503;
    real_type t5305 = t458 * t493;
    real_type t5315 = t337 * t5082 + t2174;
    real_type t5316 = t364 * t5315;
    real_type t5317 = t449 * t5316;
    real_type t5322 = -t5245;
    real_type t5323 = t5120 * t5322;
    real_type t5324 = -t5249;
    real_type t5325 = t4108 * t5324;
    result__[ 456 ] = t333 * (-t358 * t4331 * t437 - t476) + t761 * t5301 + t3982 * (t350 * t4332 * t437 - t5305) + t371 * (-t2474 * t350 * t4348 + t2474 * t358 * t4353) + t388 * (-t364 * t4391 * t458 - t5317) + t5323 + t5325;
    real_type t5327 = t333 * t2519 * t437;
    real_type t5329 = t761 * t2840 * t4244;
    real_type t5331 = t3982 * t599 * t516;
    real_type t5334 = t767 * t358 * t2710 * t2761;
    real_type t5335 = -t2712;
    real_type t5348 = t5107 * t350 * t437;
    real_type t5350 = t4092 * t358 * t437;
    result__[ 457 ] = t5327 - t5329 + t5331 + t5334 + t371 * (-t350 * t437 * t5335 + 2 * t2705 * t437) + t388 * (-t2740 * t364 * t437 - t4429 * t479) + t5348 + t5350 - t392 * t2710 * t2761;
    result__[ 458 ] = t4270 * t4471;
    real_type t5357 = t326 * t5251;
    real_type t5360 = t2770 * t539 + t5357 * t541;
    real_type t5363 = t2770 * t528;
    real_type t5369 = t2076 * t525;
    real_type t5400 = t524 * t5115;
    real_type t5402 = t524 * t5117;
    real_type t5404 = t2770 * t5402 - t529 * t5400;
    real_type t5408 = -t2770 * t5400 - t529 * t5402;
    real_type t5420 = t4068 * t525;
    result__[ 459 ] = t333 * (t4486 * t525 + t4492 * t525) + t761 * t5360 + t3982 * (-t2779 * t5357 + t5363) + t767 * (t1019 * t326 * t391 * t525 + t4551 * t5369) + t371 * (t326 * t5072 * t525 + t326 * t5074 * t525 - 2 * t2853 * t5077) + t388 * (t2770 * t5093 * t524 + t5088 * t524 * t529 + t2853 * t5097) + t5107 * (t326 * t5101 * t525 + t326 * t5104 * t525) + t4092 * (t326 * t5109 * t525 + t326 * t5111 * t525) + t5120 * t5404 + t4108 * t5408 - t3117 - t3232 + t326 * t5144 * t525 + t326 * t392 * t366 * t2822 + t326 * t406 * t45 * t2844 + t326 * t5289 * t2850 - t326 * t4071 * t391 * t5420;
    real_type t5430 = -t2863 * t375 - t4278 * t568;
    real_type t5433 = t2863 * t347;
    real_type t5462 = -t2863 * t5117 + t5115 * t570;
    real_type t5466 = t2863 * t5115 + t5117 * t570;
    result__[ 460 ] = t333 * (-t4485 * t568 - t568 * t831) + t761 * t5430 + t3982 * (t4272 * t568 - t5433) + t767 * (-t5138 * t568 - t5140 * t568) + t371 * (-t5072 * t568 - t5074 * t568 + 2 * t5077 * t568) + t388 * (-t5089 * t909 - t5094 * t587 - t5097 * t568) + t3123 + t3240 - t5144 * t568 + t5107 * (-t5101 * t568 - t5104 * t568) + t4092 * (-t5109 * t568 - t5111 * t568) + t5120 * t5462 + t4108 * t5466 - t5146 * t568 - t5148 * t568 - t4113 * t587 * t2234 + t4270 * t4617;
    result__[ 461 ] = -t437 * t4485 - t832;
    result__[ 462 ] = -t4279 - t464;
    result__[ 463 ] = -t4274;
    result__[ 464 ] = -t437 * t5138 - t437 * t5140;
    result__[ 465 ] = -t437 * t5072 - t437 * t5074 + 2 * t437 * t5077;
    result__[ 466 ] = -t437 * t5097 - t479 * t5089 - t5094 * t599;
    result__[ 467 ] = -t2207 * t437;
    result__[ 468 ] = -t4647 * t437;
    result__[ 469 ] = -t961 * t437;
    result__[ 470 ] = t3242;
    result__[ 471 ] = t3125;
    result__[ 472 ] = -t599 * t2234;
    result__[ 473 ] = t350 * t4467 * t437;
    result__[ 474 ] = -t437 * t5101 - t5240;
    result__[ 475 ] = -t437 * t5109 - t5235;
    result__[ 476 ] = t5249;
    result__[ 477 ] = t5322;
    real_type t5490 = t600 * t102;
    real_type t5492 = t3347 * t76;
    real_type t5494 = t606 * t317;
    real_type t5501 = t58 * t225;
    result__[ 478 ] = -t5490 * t9 + t5492 * t9 + t5494 * t9 - t92 * (t183 * t9 + t4659) - t111 * t4656 - t194 * t113 - t125 * (-t196 * t9 - t5501 * t9) + t630 * t127 + t3411 * t9 + t3428 * t9;
    result__[ 479 ] = t5490 * t133 - t5492 * t133 - t5494 * t133 - t92 * (-t133 * t183 - t4747) - t111 * t4744 + t194 * t146 - t125 * (t133 * t196 + t133 * t5501) - t649 * t127 - t3411 * t133 - t3428 * t133;
    result__[ 480 ] = -t3624 - t3626 - t3617 - t3620;
    result__[ 481 ] = t92 * t4853 - t111 * t4813 - t116 * t192 - t125 * (t225 * t73 * result__[316] - t320) - t683 * t127;
    real_type t5534 = t606 * t85 * result__[316];
    result__[ 482 ] = -t115 * t73 * t85 * result__[316] + t5534;
    real_type t5540 = t219 * t58 * result__[316] + t4889;
    result__[ 483 ] = -t92 * t5540 - t111 * t4885 - t125 * (-t233 * t73 * result__[316] - t3689 * t58 * result__[316]);
    result__[ 484 ] = t111 * t1933 * t3564 + t239 * t3157;
    result__[ 485 ] = t704 * t264 - t3 * t3347 * t10 * t1872 - t3 * t606 * t87 * t273 - t92 * (-t254 * t3 * t53 * t58 - t4979) - t111 * t4976 + t274 * t193 * t273 - t125 * (t196 * t248 * t3 + t248 * t3 * t5501) - t3 * t3245 * t284 - t3 * t3411 * t248 - t3 * t3428 * t248;
    result__[ 486 ] = -t5490 * t291 + t5492 * t291 + t5494 * t291 - t92 * (t183 * t291 + t5018) - t111 * t5015 - t194 * t304 - t125 * (-t196 * t291 - t291 * t5501) + t751 * t127 + t3411 * t291 + t3428 * t291;
    result__[ 487 ] = -result__[316] * t102;
    result__[ 488 ] = t76 * result__[316];
    result__[ 489 ] = t317 * result__[316];
    result__[ 490 ] = t185;
    result__[ 491 ] = result__[434];
    result__[ 492 ] = -t73 * t317 * result__[316];
    result__[ 493 ] = t5501 * result__[316] + t197;
    result__[ 494 ] = t1611 * result__[316];
    result__[ 495 ] = result__[316];
    result__[ 496 ] = result__[495];
    real_type t5598 = t761 * t380;
    real_type t5600 = t3982 * t361;
    real_type t5602 = t767 * t595;
    real_type t5609 = t350 * t502;
    result__[ 497 ] = t5598 * t332 - t5600 * t332 - t5602 * t332 + t371 * (t332 * t460 + t5135) + t388 * t5132 + t471 * t390 + t402 * (-t332 * t473 - t332 * t5609) - t791 * t404 - t4092 * t332 - t4108 * t332;
    result__[ 498 ] = -t5598 * t410 + t5600 * t410 + t5602 * t410 + t371 * (-t410 * t460 - t5162) + t388 * t5159 - t471 * t423 + t402 * (t410 * t473 + t410 * t5609) + t810 * t404 + t4092 * t410 + t4108 * t410;
    result__[ 499 ] = t4297 + t4299 + t4305 + t4308;
    result__[ 500 ] = -t371 * t5269 + t388 * t5255 + t393 * t469 + t402 * (t358 * t437 * t502 - t597) + t844 * t404;
    real_type t5642 = t767 * t85 * t437;
    result__[ 501 ] = t358 * t392 * t437 * t85 - t5642;
    real_type t5648 = t350 * t437 * t496 + t5305;
    result__[ 502 ] = t371 * t5648 + t388 * t5301 + t402 * (-t350 * t4331 * t437 - t358 * t437 * t510);
    result__[ 503 ] = -t2840 * t388 * t4244 - t3216 * t516;
    result__[ 504 ] = -t863 * t541 + t326 * t3982 * t10 * t2779 + t326 * t767 * t366 * t550 + t371 * (-t326 * t346 * t350 * t531 - t5363) + t388 * t5360 - t551 * t470 * t550 + t402 * (t326 * t473 * t525 + t326 * t525 * t5609) + t326 * t3964 * t561 + t326 * t4092 * t525 + t326 * t4108 * t525;
    result__[ 505 ] = t5598 * t568 - t5600 * t568 - t5602 * t568 + t371 * (t460 * t568 + t5433) + t388 * t5430 + t471 * t581 + t402 * (-t473 * t568 - t5609 * t568) - t910 * t404 - t4092 * t568 - t4108 * t568;
    result__[ 506 ] = t437 * t380;
    result__[ 507 ] = -t361 * t437;
    result__[ 508 ] = -t595 * t437;
    result__[ 509 ] = t828;
    result__[ 510 ] = result__[462];
    result__[ 511 ] = t358 * t595 * t437;
    result__[ 512 ] = -t437 * t5609 - t474;
    result__[ 513 ] = -t2519 * t437;
    result__[ 514 ] = result__[321];
    result__[ 515 ] = result__[514];
    real_type t5707 = t600 * t165;
    real_type t5709 = t6 * t85;
    real_type t5713 = -t1010 - t1012 - t1014 - t1015 - t1284;
    real_type t5714 = t73 * t5713;
    real_type t5718 = -t5713;
    real_type t5719 = t5718 * t79;
    real_type t5720 = t58 * t5719;
    real_type t5725 = t4691 + t1012 + t1014 + t1015 + t1284;
    real_type t5726 = t53 * t5725;
    real_type t5731 = t1280 + t1012 + t1015 + t1284;
    real_type t5732 = t115 * t5731;
    real_type t5734 = t3433 * t58;
    real_type t5736 = t73 * t3527;
    real_type t5737 = t3330 * t5736;
    real_type t5739 = t6 * t80;
    real_type t5740 = t3401 * t8;
    result__[ 516 ] = t5707 * t9 + t3347 * t79 * t8 * t5709 - t606 * (-t5714 * t9 - t3309 + t3313) - t92 * (t1665 * t9 + t5720 * t9) - t111 * (-t3634 * t9 - t5726 * t59) + t5732 * t9 - t5734 * t9 + t5737 * t9 + t5740 * t5739;
    real_type t5760 = t3401 * t132;
    result__[ 517 ] = -t5707 * t133 - t3347 * t79 * t132 * t5709 - t606 * (t133 * t5714 + t3461 - t3463) - t92 * (-t133 * t1665 - t133 * t5720) - t111 * (t133 * t3634 + t135 * t5726) - t5732 * t133 + t5734 * t133 - t5737 * t133 - t5760 * t5739;
    result__[ 518 ] = -t600 * t86 * result__[496] + t3649 - t92 * (t53 * t5718 * t58 * result__[496] + t3635) - t111 * (t172 * t5725 * t79 + t1666) + t3330 * t73 * t3780 * result__[496];
    result__[ 519 ] = -t606 * (-t5713 * t58 * result__[496] + t3585) - t92 * (-t5719 * t73 * result__[496] + t4862) - t111 * (-t1416 * t58 * result__[496] + t181 * t5726) + t4874 + t3330 * t58 * t3527 * result__[496];
    result__[ 520 ] = -t5534;
    result__[ 521 ] = -t111 * t1537 * t1700 * t73 + t1532 * t1854 * t73 * t92 - t1854 * t3747 * t606;
    result__[ 522 ] = t3644;
    real_type t5831 = t3 * t3763;
    result__[ 523 ] = -t3 * t600 * t53 * t273 - t3 * t3347 * t79 * t273 - t606 * (t248 * t3 * t5714 + t3827 - t3831) - t92 * (-t264 * t3 * t5718 * t58 - t3 * t4985 * t689) - t111 * (t247 * t252 * t5726 + t256 * t4985) - t3 * t5732 * t248 + t3 * t5734 * t248 - t3 * t3330 * t73 * t3527 * t248 - t5831 * t247 * t80;
    real_type t5851 = t3401 * t290;
    result__[ 524 ] = t5707 * t291 + t3347 * t79 * t290 * t5709 - t606 * (-t291 * t5714 - t3911 + t3913) - t92 * (t1665 * t291 + t291 * t5720) - t111 * (-t291 * t3634 - t293 * t5726) + t5732 * t291 - t5734 * t291 + t5737 * t291 + t5851 * t5739;
    result__[ 525 ] = t757;
    result__[ 526 ] = t658;
    result__[ 527 ] = t5714 * result__[496] + t3955 - t3957;
    result__[ 528 ] = -t5720 * result__[496] - t1666;
    result__[ 529 ] = t172 * t5726 + t3635;
    result__[ 530 ] = t5731 * t160;
    result__[ 531 ] = -t172;
    result__[ 532 ] = t5736 * result__[496];
    result__[ 533 ] = t159 * t5739;
    real_type t5856 = t761 * t442;
    real_type t5858 = t329 * t85;
    real_type t5862 = t358 * t5713;
    real_type t5866 = t5718 * t364;
    real_type t5867 = t350 * t5866;
    real_type t5872 = t346 * t5725;
    real_type t5877 = t392 * t5731;
    real_type t5879 = t4113 * t350;
    real_type t5881 = t358 * t4231;
    real_type t5882 = t4071 * t5881;
    real_type t5884 = t329 * t80;
    real_type t5885 = t4082 * t331;
    result__[ 534 ] = -t5856 * t332 - t3982 * t364 * t331 * t5858 + t767 * (-t332 * t5862 - t4051 + t4054) + t371 * (t2573 * t332 + t332 * t5867) + t388 * (-t332 * t4319 - t351 * t5872) - t5877 * t332 + t5879 * t332 - t5882 * t332 - t5885 * t5884;
    real_type t5905 = t4082 * t409;
    result__[ 535 ] = t5856 * t410 + t3982 * t364 * t409 * t5858 + t767 * (t410 * t5862 + t4162 - t4164) + t371 * (-t2573 * t410 - t410 * t5867) + t388 * (t410 * t4319 + t412 * t5872) + t5877 * t410 - t5879 * t410 + t5882 * t410 + t5905 * t5884;
    result__[ 536 ] = t761 * t365 * t437 - t4316 + t371 * (t346 * t350 * t437 * t5718 + t4320) + t388 * (t364 * t449 * t5725 + t2574) - t4071 * t358 * t4470 * t437;
    result__[ 537 ] = t767 * (-t350 * t437 * t5713 + t4265) + t371 * (-t358 * t437 * t5866 + t5278) + t388 * (-t2324 * t350 * t437 + t458 * t5872) - t5290 - t4071 * t350 * t4231 * t437;
    result__[ 538 ] = t5642;
    result__[ 539 ] = -t2440 * t2761 * t358 * t371 + t2445 * t2608 * t358 * t388 + t2761 * t4440 * t767;
    result__[ 540 ] = -t4329;
    real_type t5976 = t326 * t4443;
    result__[ 541 ] = t326 * t761 * t346 * t550 + t326 * t3982 * t364 * t550 + t767 * (t326 * t525 * t5862 + t4543 - t4547) + t371 * (-t326 * t350 * t541 * t5718 - t326 * t5369 * t849) + t388 * (t524 * t529 * t5872 + t533 * t5369) + t326 * t5877 * t525 - t326 * t5879 * t525 + t326 * t4071 * t358 * t4231 * t525 + t5976 * t524 * t80;
    real_type t5996 = t4082 * t567;
    result__[ 542 ] = -t5856 * t568 - t3982 * t364 * t567 * t5858 + t767 * (-t568 * t5862 - t4611 + t4613) + t371 * (t2573 * t568 + t568 * t5867) + t388 * (-t4319 * t568 - t570 * t5872) - t5877 * t568 + t5879 * t568 - t5882 * t568 - t5996 * t5884;
    result__[ 543 ] = -t916;
    result__[ 544 ] = -t819;
    result__[ 545 ] = -t437 * t5862 - t4634 + t4636;
    result__[ 546 ] = t437 * t5867 + t2574;
    result__[ 547 ] = -t449 * t5872 - t4320;
    result__[ 548 ] = -t5731 * t437;
    result__[ 549 ] = t449;
    result__[ 550 ] = -t5881 * t437;
    result__[ 551 ] = -t436 * t5884;
    real_type t6004 = -t3689;
    real_type t6005 = t6 * t6004;
    real_type t6015 = t58 * t1008;
    real_type t6018 = t225 * t77;
    real_type t6019 = t73 * t6018;
    real_type t6024 = -t3672;
    real_type t6025 = t79 * t6024;
    real_type t6030 = t125 * t1308;
    result__[ 552 ] = -t11 * (-t6005 * t629 - t123) - t600 * t627 - t3347 * (t217 * t9 + t662 * t9) - t92 * (t53 * t6019 * t9 - t6004 * t6015 * t9 - t1528 * t9) - t111 * (-t1005 * t4900 - t59 * t6025 - t1310) + t6030 * t9 + t3066 + t4724 * t4723 + t3428 * t4728;
    result__[ 553 ] = -t11 * (t6005 * t648 + t149) - t600 * t646 - t3347 * (-t133 * t217 - t133 * t662) - t92 * (-t133 * t53 * t6019 + t133 * t6004 * t6015 + t133 * t1528) - t111 * (t1344 * t4900 + t135 * t6025 + t1385) - t6030 * t133 - t3072 + t4724 * t4775 + t3428 * t4779;
    real_type t6063 = t6004 * t160;
    result__[ 554 ] = -t600 * t664 + t3347 * result__[124] - t92 * (t1606 * t6063 - t3564 * t6019 + t2034) - t111 * (-t172 * t53 * t6024 - t181 * t4899 * t53 - t1529);
    real_type t6083 = t58 * t6018 * t1566;
    result__[ 555 ] = -t11 * (t322 * t6005 - t199) - t600 * t681 - t3347 * (t1523 * result__[496] - t4889) - t92 * (t1526 * t6063 + t6083) - t111 * (t181 * t6025 - t4901) - t4907 - t4909;
    result__[ 556 ] = -t92 * (t225 * t53 * t73 * result__[496] - t53 * t58 * t6004 * result__[496]) - t111 * (-t172 * t6004 * t79 - t678);
    result__[ 557 ] = t11 * result__[493] - t600 * t698 - t3347 * t5540 - t92 * (t1566 * t3689 * t73 * t77 - t6083) - t111 * (-t172 * t79 * t3677 - t181 * t79 * (-t4682 + t1174)) - t4844 - t4848;
    result__[ 558 ] = -t11 * (t247 * t252 * t6004 + t280) - t600 * t728 - t3347 * (-t248 * t256 * t623 - t1872 * t723) - t92 * (t1008 * t1921 * t248 * t6004 + t1528 * t248 * t3 - t1872 * t6018 * t716) - t111 * (t1863 * t247 * t4900 + t247 * t252 * t6025 + t1928) - t3 * t6030 * t248 - t3085 + t4724 * t4961 + t3428 * t4965;
    result__[ 559 ] = -t11 * (-t6005 * t750 - t307) - t600 * t748 - t3347 * (t217 * t291 + t291 * t662) - t92 * (t291 * t53 * t6019 - t291 * t6004 * t6015 - t1528 * t291) - t111 * (-t1956 * t4900 - t293 * t6025 - t1997) + t6030 * t291 + t3091 + t4724 * t5046 + t3428 * t5050;
    result__[ 560 ] = t202 * t6005 + t321;
    result__[ 561 ] = result__[124];
    result__[ 562 ] = t664;
    result__[ 563 ] = -t1566 * t6019 + t6015 * t6063 + t1529;
    result__[ 564 ] = t172 * t6025 + t181 * t4900 + t2034;
    result__[ 565 ] = t1308 * t160;
    result__[ 566 ] = result__[330];
    result__[ 567 ] = t4847;
    result__[ 568 ] = t4906;
    real_type t6177 = -t4331;
    real_type t6178 = t329 * t6177;
    real_type t6188 = t350 * t2065;
    real_type t6191 = t502 * t362;
    real_type t6192 = t358 * t6191;
    real_type t6197 = -t4391;
    real_type t6198 = t364 * t6197;
    real_type t6203 = t402 * t1308;
    result__[ 569 ] = t333 * (-t6178 * t790 - t400) + t761 * t788 + t3982 * (t332 * t494 + t332 * t823) + t371 * (t332 * t346 * t6192 - t332 * t6177 * t6188 - t2436 * t332) + t388 * (-t2062 * t5316 - t351 * t6198 - t2218) - t6203 * t332 - t3098 - t5120 * t5119 - t4108 * t5124;
    result__[ 570 ] = t333 * (t6178 * t809 + t426) + t761 * t807 + t3982 * (-t410 * t494 - t410 * t823) + t371 * (-t346 * t410 * t6192 + t410 * t6177 * t6188 + t2436 * t410) + t388 * (t2252 * t5316 + t412 * t6198 + t2293) + t6203 * t410 + t3104 - t5120 * t5190 - t4108 * t5194;
    real_type t6235 = t6177 * t437;
    result__[ 571 ] = t761 * t825 + t3982 * result__[140] + t371 * (t2514 * t6235 - t4244 * t6192 + t2941) + t388 * (-t346 * t458 * t5315 - t346 * t6197 * result__[549] - t2437);
    real_type t6255 = t350 * t6191 * t2474;
    result__[ 572 ] = t333 * (t599 * t6178 - t476) + t761 * t842 + t3982 * (t2431 * t437 - t5305) + t371 * (t2434 * t6235 + t6255) + t388 * (t458 * t6198 - t5317) + t5323 + t5325;
    result__[ 573 ] = t371 * (-t346 * t350 * t437 * t6177 + t346 * t358 * t437 * t502) + t388 * (-t364 * t6177 * result__[549] - t839);
    result__[ 574 ] = t333 * result__[512] + t761 * t857 + t3982 * t5648 + t371 * (t2474 * t358 * t362 * t4331 - t6255) + t388 * (-result__[549] * t364 * t4396 - t458 * t364 * (-t5083 + t2150)) + t5246 + t5250;
    result__[ 575 ] = t333 * (t524 * t529 * t6177 + t557) + t761 * t887 + t3982 * (-t525 * t533 * t784 - t2779 * t882) + t371 * (t2065 * t2828 * t525 * t6177 + t2436 * t326 * t525 - t2779 * t6191 * t875) + t388 * (t2770 * t524 * t5316 + t524 * t529 * t6198 + t2835) + t326 * t6203 * t525 + t3117 - t5120 * t5404 - t4108 * t5408;
    result__[ 576 ] = t333 * (-t6178 * t909 - t584) + t761 * t907 + t3982 * (t494 * t568 + t568 * t823) + t371 * (t346 * t568 * t6192 - t568 * t6177 * t6188 - t2436 * t568) + t388 * (-t2863 * t5316 - t570 * t6198 - t2904) - t6203 * t568 - t3123 - t5120 * t5462 - t4108 * t5466;
    result__[ 577 ] = -t479 * t6178 - t598;
    result__[ 578 ] = result__[140];
    result__[ 579 ] = -t825;
    result__[ 580 ] = t2474 * t6192 - t6188 * t6235 - t2437;
    result__[ 581 ] = -t458 * t5316 - t6198 * result__[549] - t2941;
    result__[ 582 ] = -t1308 * t437;
    result__[ 583 ] = result__[339];
    result__[ 584 ] = t5324;
    result__[ 585 ] = t5245;
    real_type t6355 = t606 * t58;
    real_type t6359 = t73 * t45 * t1534;
    real_type t6365 = t45 * t1157;
    real_type t6372 = t4711 * t73;
    real_type t6374 = t3411 * t58;
    result__[ 586 ] = -t11 * t128 * t127 - t600 * t629 * t243 + t3347 * t629 * t239 + t6355 * t3244 * t3243 - t92 * (t1541 * t9 + t6359 * t9) - t111 * (-t1336 * t6365 * t8 - t128 * t3736) + t129 * t8 * t127 - t6372 * t9 + t6374 * t9;
    result__[ 587 ] = t11 * t152 * t127 + t600 * t648 * t243 - t3347 * t648 * t239 - t6355 * t3438 * t3243 - t92 * (-t133 * t1541 - t133 * t6359) - t111 * (t132 * t1336 * t6365 + t152 * t3736) - t129 * t132 * t127 + t6372 * t133 - t6374 * t133;
    result__[ 588 ] = -t3751 - t3753 - t92 * (-t1315 * t45 * t73 * result__[496] - t2037) - t111 * (-t322 * t4919 * t6 - t1566 * t6365);
    result__[ 589 ] = -t1534 * t160 * t1611 * t92 + t244 * t3736 - t4911 + t4913 - t4915 - t4918 - t4932 - t4934;
    result__[ 590 ] = -result__[484];
    result__[ 591 ] = -result__[521];
    result__[ 592 ] = t3 * t11 * t73 * t284 + t3 * t600 * t202 * t730 - t3 * t3347 * t202 * t247 * t238 - t3161 * t114 * t3795 - t92 * (-t1534 * t1934 * t248 - t1937 * t238 * t3) - t111 * (t1863 * t247 * t3735 + t1946 * t6365 * t79) - t3 * t129 * t159 * t283 + t3 * t6372 * t248 - t3 * t6374 * t248;
    result__[ 593 ] = -t11 * t310 * t127 - t600 * t750 * t243 + t3347 * t750 * t239 + t6355 * t3884 * t3243 - t92 * (t1541 * t291 + t291 * t6359) - t111 * (-t1336 * t290 * t6365 - t310 * t3736) + t129 * t290 * t127 - t6372 * t291 + t6374 * t291;
    result__[ 594 ] = result__[93];
    result__[ 595 ] = result__[125];
    result__[ 596 ] = t172 * t238;
    result__[ 597 ] = result__[384];
    result__[ 598 ] = -t6359 * result__[496] - t1542;
    result__[ 599 ] = t3564 * t6365 + t3737;
    result__[ 600 ] = t1854;
    result__[ 601 ] = -t181;
    result__[ 602 ] = t172;
    real_type t6472 = t767 * t350;
    real_type t6476 = t358 * t45 * t2442;
    real_type t6488 = t5107 * t358;
    real_type t6490 = t4092 * t350;
    result__[ 603 ] = t333 * t405 * t404 + t761 * t790 * t520 - t3982 * t790 * t516 - t6472 * t3963 * t3962 + t371 * (t2449 * t332 + t332 * t6476) + t388 * (-t2244 * t331 * t6365 - t405 * t4429) - t406 * t331 * t404 + t6488 * t332 - t6490 * t332;
    result__[ 604 ] = -t333 * t429 * t404 - t761 * t809 * t520 + t3982 * t809 * t516 + t6472 * t4118 * t3962 + t371 * (-t2449 * t410 - t410 * t6476) + t388 * (t2244 * t409 * t6365 + t429 * t4429) + t406 * t409 * t404 - t6488 * t410 + t6490 * t410;
    result__[ 605 ] = t4409 + t4411 + t371 * (-t2223 * t358 * t437 * t45 - t2944) + t388 * (-t329 * t5335 * t599 - t2474 * t6365);
    result__[ 606 ] = t2442 * t2519 * t371 * t437 - t4429 * t521 + t5327 - t5329 + t5331 + t5334 + t5348 + t5350;
    result__[ 607 ] = -result__[503];
    result__[ 608 ] = -result__[539];
    result__[ 609 ] = -t326 * t333 * t358 * t561 - t326 * t761 * t479 * t889 + t326 * t3982 * t479 * t524 * t515 + t3220 * t391 * t4474 + t371 * (-t2442 * t2841 * t525 - t2844 * t326 * t515) + t388 * (t2770 * t4428 * t524 + t2853 * t364 * t6365) + t326 * t406 * t436 * t560 - t326 * t6488 * t525 + t326 * t6490 * t525;
    result__[ 610 ] = t333 * t587 * t404 + t761 * t909 * t520 - t3982 * t909 * t516 - t6472 * t4563 * t3962 + t371 * (t2449 * t568 + t568 * t6476) + t388 * (-t2244 * t567 * t6365 - t4429 * t587) - t406 * t567 * t404 + t6488 * t568 - t6490 * t568;
    result__[ 611 ] = result__[109];
    result__[ 612 ] = result__[141];
    result__[ 613 ] = -result__[549] * t515;
    result__[ 614 ] = result__[414];
    result__[ 615 ] = t437 * t6476 + t2450;
    result__[ 616 ] = -t4244 * t6365 - t4430;
    result__[ 617 ] = -t2761;
    result__[ 618 ] = t458;
    result__[ 619 ] = -result__[549];
    real_type t6583 = t4711 * t9;
    result__[ 620 ] = -t6583;
    result__[ 621 ] = t4711 * t133;
    real_type t6584 = t3 * t4711;
    result__[ 622 ] = t6584 * t248;
    real_type t6585 = t4711 * t291;
    result__[ 623 ] = -t6585;
    result__[ 624 ] = -result__[496];
    result__[ 625 ] = t5107 * t332;
    real_type t6586 = t5107 * t410;
    result__[ 626 ] = -t6586;
    real_type t6587 = t326 * t5107;
    result__[ 627 ] = -t6587 * t525;
    result__[ 628 ] = t5107 * t568;
    result__[ 629 ] = t437;
    real_type t6590 = t3411 * t8;
    result__[ 630 ] = t1336 * t6590 - t1551 * t5740;
    real_type t6593 = t3411 * t132;
    result__[ 631 ] = -t1336 * t6593 + t1551 * t5760;
    result__[ 632 ] = result__[370];
    real_type t6595 = t247 * t53;
    real_type t6597 = t247 * t79;
    real_type t6598 = t3 * t3765;
    result__[ 633 ] = t5831 * t6595 - t6597 * t6598;
    real_type t6601 = t3411 * t290;
    result__[ 634 ] = t1336 * t6601 - t1551 * t5851;
    result__[ 635 ] = -t1566;
    result__[ 636 ] = t3564;
    real_type t6604 = t4092 * t331;
    result__[ 637 ] = -t2244 * t6604 + t2459 * t5885;
    real_type t6607 = t4092 * t409;
    result__[ 638 ] = t2244 * t6607 - t2459 * t5905;
    result__[ 639 ] = result__[400];
    real_type t6609 = t524 * t346;
    real_type t6611 = t524 * t364;
    real_type t6612 = t326 * t4445;
    result__[ 640 ] = -t5976 * t6609 + t6611 * t6612;
    real_type t6615 = t4092 * t567;
    result__[ 641 ] = -t2244 * t6615 + t2459 * t5996;
    result__[ 642 ] = t2474;
    result__[ 643 ] = -t4244;
    result__[ 644 ] = -t1336 * t5740 - t1551 * t6590;
    result__[ 645 ] = t1336 * t5760 + t1551 * t6593;
    result__[ 646 ] = result__[371];
    result__[ 647 ] = t5831 * t6597 + t6595 * t6598;
    result__[ 648 ] = -t1336 * t5851 - t1551 * t6601;
    result__[ 649 ] = -result__[636];
    result__[ 650 ] = result__[635];
    result__[ 651 ] = t2244 * t5885 + t2459 * t6604;
    result__[ 652 ] = -t2244 * t5905 - t2459 * t6607;
    result__[ 653 ] = result__[401];
    result__[ 654 ] = -t5976 * t6611 - t6609 * t6612;
    result__[ 655 ] = t2244 * t5996 + t2459 * t6615;
    result__[ 656 ] = t4244;
    result__[ 657 ] = result__[642];
    result__[ 658 ] = t4724 * t9;
    result__[ 659 ] = -t4724 * t133;
    result__[ 660 ] = -t3 * t4724 * t248;
    result__[ 661 ] = t4724 * t291;
    result__[ 662 ] = result__[496];
    result__[ 663 ] = -t5120 * t332;
    result__[ 664 ] = t5120 * t410;
    result__[ 665 ] = t326 * t5120 * t525;
    result__[ 666 ] = -t5120 * t568;
    result__[ 667 ] = result__[515];
    real_type t6639 = t3421 * t8;
    real_type t6641 = t3428 * t8;
    result__[ 668 ] = t1336 * t6641 - t1551 * t6639;
    real_type t6643 = t3421 * t132;
    real_type t6645 = t3428 * t132;
    result__[ 669 ] = -t1336 * t6645 + t1551 * t6643;
    result__[ 670 ] = result__[372];
    real_type t6647 = t3 * t3769;
    real_type t6649 = t3 * t3771;
    result__[ 671 ] = t6595 * t6647 - t6597 * t6649;
    real_type t6651 = t3421 * t290;
    real_type t6653 = t3428 * t290;
    result__[ 672 ] = t1336 * t6653 - t1551 * t6651;
    result__[ 673 ] = result__[650];
    result__[ 674 ] = result__[636];
    real_type t6655 = t4101 * t331;
    real_type t6657 = t4108 * t331;
    result__[ 675 ] = -t2244 * t6657 + t2459 * t6655;
    real_type t6659 = t4101 * t409;
    real_type t6661 = t4108 * t409;
    result__[ 676 ] = t2244 * t6661 - t2459 * t6659;
    result__[ 677 ] = result__[402];
    real_type t6663 = t326 * t4449;
    real_type t6665 = t326 * t4451;
    result__[ 678 ] = -t6609 * t6663 + t6611 * t6665;
    real_type t6667 = t4101 * t567;
    real_type t6669 = t4108 * t567;
    result__[ 679 ] = -t2244 * t6669 + t2459 * t6667;
    result__[ 680 ] = result__[657];
    result__[ 681 ] = result__[643];
    result__[ 682 ] = -t1336 * t6639 - t1551 * t6641;
    result__[ 683 ] = t1336 * t6643 + t1551 * t6645;
    result__[ 684 ] = result__[373];
    result__[ 685 ] = t6595 * t6649 + t6597 * t6647;
    result__[ 686 ] = -t1336 * t6651 - t1551 * t6653;
    result__[ 687 ] = result__[649];
    result__[ 688 ] = result__[673];
    result__[ 689 ] = t2244 * t6655 + t2459 * t6657;
    result__[ 690 ] = -t2244 * t6659 - t2459 * t6661;
    result__[ 691 ] = result__[403];
    result__[ 692 ] = -t6609 * t6665 - t6611 * t6663;
    result__[ 693 ] = t2244 * t6667 + t2459 * t6669;
    result__[ 694 ] = result__[656];
    result__[ 695 ] = result__[680];
    result__[ 696 ] = t1551 * t3433 * t8 - t3396 * t6583;
    result__[ 697 ] = -t132 * t1551 * t3433 + t3396 * result__[621];
    result__[ 698 ] = result__[374];
    result__[ 699 ] = -t4711 * t160 * t3404;
    result__[ 700 ] = t159 * t247 * t3 * t3396 * t4711 - t3 * t3775 * t6595;
    result__[ 701 ] = t1551 * t290 * t3433 - t3396 * t6585;
    result__[ 702 ] = t1566;
    result__[ 703 ] = -result__[662] * t3396;
    result__[ 704 ] = -t2459 * t331 * t4113 + t4077 * result__[625];
    result__[ 705 ] = t2459 * t409 * t4113 - t4077 * t6586;
    result__[ 706 ] = result__[404];
    result__[ 707 ] = t5107 * t437 * t4085;
    result__[ 708 ] = -t326 * t4077 * t436 * t5107 * t524 + t326 * t4455 * t6609;
    result__[ 709 ] = -t2459 * t4113 * t567 + t4077 * result__[628];
    result__[ 710 ] = -result__[695];
    result__[ 711 ] = result__[629] * t4077;
    real_type t6724 = t6 * t3404;
    real_type t6727 = t3395 * t3327;
    real_type t6728 = t3401 * t6727;
    real_type t6730 = t3395 * t3321;
    real_type t6731 = t3411 * t6730;
    result__[ 712 ] = -t3330 * (-t3527 * t9 - t3324) - t4711 * t3432 * t6724 + t6728 * t9 + t6731 * t9;
    result__[ 713 ] = -t3330 * (t133 * t3527 + t3466) + t4711 * t3495 * t6724 - t6728 * t133 - t6731 * t133;
    result__[ 714 ] = -t3330 * (-t3530 - t3781) + t3401 * t6730 * result__[662] + t3411 * t3395 * t3527 * result__[662];
    result__[ 715 ] = t3591;
    result__[ 716 ] = result__[522];
    result__[ 717 ] = result__[699];
    result__[ 718 ] = -t3330 * (-t3779 - t3531) + t4711 * t3558 * t6 * t3396 + t3401 * t3395 * t3780 * result__[662] + t3411 * t6727 * result__[662];
    result__[ 719 ] = -t3330 * (t248 * t3 * t3527 + t3836) + t6584 * t3558 * t247 * t3404 - t3 * t3401 * t3395 * t5005 - t3 * t3411 * t3395 * t3834;
    result__[ 720 ] = -t3330 * (-t291 * t3527 - t3916) - t4711 * t3941 * t6724 + t6728 * t291 + t6731 * t291;
    result__[ 721 ] = t160 * t3527 + t3960;
    result__[ 722 ] = -t3431 * t160 * t3404;
    result__[ 723 ] = t6727 * result__[662];
    result__[ 724 ] = t6730 * result__[662];
    real_type t6783 = t329 * t4085;
    real_type t6786 = t3395 * t4068;
    real_type t6787 = t4082 * t6786;
    real_type t6789 = t3395 * t4062;
    real_type t6790 = t4092 * t6789;
    result__[ 725 ] = t4071 * (-t332 * t4231 - t4065) + t5107 * t4112 * t6783 - t6787 * t332 - t6790 * t332;
    result__[ 726 ] = t4071 * (t410 * t4231 + t4167) - t5107 * t4175 * t6783 + t6787 * t410 + t6790 * t410;
    result__[ 727 ] = t4071 * (-t4234 - t4471) - t4082 * t6789 * result__[629] - t4092 * t3395 * t4231 * result__[629];
    result__[ 728 ] = -t4271;
    result__[ 729 ] = result__[540];
    result__[ 730 ] = result__[707];
    result__[ 731 ] = t4071 * (-t4469 - t4235) - t5107 * t4238 * t329 * t4077 - t4082 * t3395 * t4470 * result__[629] - t4092 * t6786 * result__[629];
    result__[ 732 ] = t4071 * (t326 * t4231 * t525 + t4552) - t6587 * t4238 * t524 * t4085 + t326 * t4082 * t3395 * t5420 + t326 * t4092 * t3395 * t4550;
    result__[ 733 ] = t4071 * (-t4231 * t568 - t4616) + t5107 * t4621 * t6783 - t6787 * t568 - t6790 * t568;
    result__[ 734 ] = -t4231 * t437 - t4639;
    result__[ 735 ] = t4111 * t437 * t4085;
    result__[ 736 ] = -t6786 * result__[629];
    result__[ 737 ] = -t6789 * result__[629];
    real_type t6840 = ModelPars[120];
    real_type t6841 = t6 * t6840;
    real_type t6842 = ModelPars[212];
    real_type t6844 = LL__[34];
    result__[ 738 ] = t6844 * t6842 * t8 * t6841;
    result__[ 739 ] = -t6844 * t6842 * t132 * t6841;
    result__[ 740 ] = -t3 * t6844 * t6842 * t159 * t247 * t6840;
    result__[ 741 ] = t6844 * t6842 * t290 * t6841;
    result__[ 742 ] = t6842 * t159 * t6841;
    real_type t6857 = t329 * t6840;
    real_type t6859 = LR__[34];
    result__[ 743 ] = -t6859 * t6842 * t331 * t6857;
    result__[ 744 ] = t6859 * t6842 * t409 * t6857;
    result__[ 745 ] = t326 * t6859 * t6842 * t436 * t524 * t6840;
    result__[ 746 ] = -t6859 * t6842 * t567 * t6857;
    result__[ 747 ] = -t6842 * t436 * t6857;
    real_type t6873 = ModelPars[209];
    real_type t6875 = LL__[33] * t6873;
    result__[ 748 ] = t6875 * t9;
    result__[ 749 ] = -t6875 * t133;
    result__[ 750 ] = -t3 * t6875 * t248;
    result__[ 751 ] = t6875 * t291;
    result__[ 752 ] = t6873 * t160;
    real_type t6880 = LR__[33] * t6873;
    result__[ 753 ] = -t6880 * t332;
    result__[ 754 ] = t6880 * t410;
    result__[ 755 ] = t326 * t6880 * t525;
    result__[ 756 ] = -t6880 * t568;
    result__[ 757 ] = -t6873 * t437;
    real_type t6885 = ModelPars[210];
    real_type t6887 = LL__[35] * t6885;
    result__[ 758 ] = t6887 * t9;
    result__[ 759 ] = -t6887 * t133;
    result__[ 760 ] = -t3 * t6887 * t248;
    result__[ 761 ] = t6887 * t291;
    result__[ 762 ] = t6885 * t160;
    real_type t6892 = LR__[35] * t6885;
    result__[ 763 ] = -t6892 * t332;
    result__[ 764 ] = t6892 * t410;
    result__[ 765 ] = t326 * t6892 * t525;
    result__[ 766 ] = -t6892 * t568;
    result__[ 767 ] = -t6885 * t437;
    real_type t6897 = ModelPars[211];
    real_type t6899 = LL__[36] * t6897;
    result__[ 768 ] = t6899 * t9;
    result__[ 769 ] = -t6899 * t133;
    result__[ 770 ] = -t3 * t6899 * t248;
    result__[ 771 ] = t6899 * t291;
    result__[ 772 ] = t6897 * t160;
    real_type t6904 = LR__[36] * t6897;
    result__[ 773 ] = -t6904 * t332;
    result__[ 774 ] = t6904 * t410;
    result__[ 775 ] = t326 * t6904 * t525;
    result__[ 776 ] = -t6904 * t568;
    result__[ 777 ] = -t6897 * t437;
    real_type t6909 = LL__[37];
    result__[ 778 ] = t6909 * t9;
    result__[ 779 ] = -t6909 * t133;
    result__[ 780 ] = -t3 * t6909 * t248;
    result__[ 781 ] = t6909 * t291;
    result__[ 782 ] = result__[662];
    real_type t6913 = LR__[37];
    result__[ 783 ] = -t6913 * t332;
    result__[ 784 ] = t6913 * t410;
    result__[ 785 ] = t326 * t6913 * t525;
    result__[ 786 ] = -t6913 * t568;
    result__[ 787 ] = result__[667];
    real_type t6917 = LL__[38];
    result__[ 788 ] = t6917 * t9;
    result__[ 789 ] = -t6917 * t133;
    result__[ 790 ] = -t3 * t6917 * t248;
    result__[ 791 ] = t6917 * t291;
    result__[ 792 ] = result__[782];
    real_type t6921 = LR__[38];
    result__[ 793 ] = -t6921 * t332;
    result__[ 794 ] = t6921 * t410;
    result__[ 795 ] = t326 * t6921 * t525;
    result__[ 796 ] = -t6921 * t568;
    result__[ 797 ] = result__[787];
    #ifdef MECHATRONIX_DEBUG
    CHECK_NAN(result__,"DjumpDxlp_sparse",798);
    #endif
  }

}

// EOF: Straight_Methods.cc
