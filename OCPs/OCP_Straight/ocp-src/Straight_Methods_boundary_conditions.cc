/*-----------------------------------------------------------------------*\
 |  file: Straight_Methods.cc                                            |
 |                                                                       |
 |  version: 1.0   date 23/6/2020                                        |
 |                                                                       |
 |  Copyright (C) 2020                                                   |
 |                                                                       |
 |      Enrico Bertolazzi, Francesco Biral and Paolo Bosetti             |
 |      Dipartimento di Ingegneria Industriale                           |
 |      Universita` degli Studi di Trento                                |
 |      Via Sommarive 9, I-38123, Trento, Italy                          |
 |      email: enrico.bertolazzi@unitn.it                                |
 |             francesco.biral@unitn.it                                  |
 |             paolo.bosetti@unitn.it                                    |
\*-----------------------------------------------------------------------*/


#include "Straight.hh"
#include "Straight_Pars.hh"

using namespace std;
using Mechatronix::real_type;
using Mechatronix::integer;
using Mechatronix::ostream_type;

// user class in namespaces
using Mechatronix::Engine;
using Mechatronix::Road2D;


#if defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wunused-parameter"
#pragma clang diagnostic ignored "-Wsign-conversion"
#pragma clang diagnostic ignored "-Wunused-macros"
#elif defined(__llvm__) || defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wsign-conversion"
#pragma GCC diagnostic ignored "-Wunused-macros"
#elif defined(_MSC_VER)
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#endif

// map user defined functions and objects with macros
#define ALIAS_ISOAngle_R_DD(__t1) segmentRight.isoAngle_DD( __t1)
#define ALIAS_ISOAngle_R_D(__t1) segmentRight.isoAngle_D( __t1)
#define ALIAS_ISOAngle_R(__t1) segmentRight.isoAngle( __t1)
#define ALIAS_ISOAngle_L_DD(__t1) segmentLeft.isoAngle_DD( __t1)
#define ALIAS_ISOAngle_L_D(__t1) segmentLeft.isoAngle_D( __t1)
#define ALIAS_ISOAngle_L(__t1) segmentLeft.isoAngle( __t1)
#define ALIAS_ISOAngle_DD(__t1) segment.isoAngle_DD( __t1)
#define ALIAS_ISOAngle_D(__t1) segment.isoAngle_D( __t1)
#define ALIAS_ISOAngle(__t1) segment.isoAngle( __t1)
#define ALIAS_yISOright_R(__t1) segmentRight.isoRightY( __t1)
#define ALIAS_yISOright_L(__t1) segmentLeft.isoRightY( __t1)
#define ALIAS_yISOright(__t1) segment.isoRightY( __t1)
#define ALIAS_xISOright_R(__t1) segmentRight.isoRightX( __t1)
#define ALIAS_xISOright_L(__t1) segmentLeft.isoRightX( __t1)
#define ALIAS_xISOright(__t1) segment.isoRightX( __t1)
#define ALIAS_yISOleft_R(__t1) segmentRight.isoLeftY( __t1)
#define ALIAS_yISOleft_L(__t1) segmentLeft.isoLeftY( __t1)
#define ALIAS_yISOleft(__t1) segment.isoLeftY( __t1)
#define ALIAS_xISOleft_R(__t1) segmentRight.isoLeftX( __t1)
#define ALIAS_xISOleft_L(__t1) segmentLeft.isoLeftX( __t1)
#define ALIAS_xISOleft(__t1) segment.isoLeftX( __t1)
#define ALIAS_yISOMidLane_R_DD(__t1) segmentRight.isoY_DD( __t1)
#define ALIAS_yISOMidLane_R_D(__t1) segmentRight.isoY_D( __t1)
#define ALIAS_yISOMidLane_R(__t1) segmentRight.isoY( __t1)
#define ALIAS_yISOMidLane_L_DD(__t1) segmentLeft.isoY_DD( __t1)
#define ALIAS_yISOMidLane_L_D(__t1) segmentLeft.isoY_D( __t1)
#define ALIAS_yISOMidLane_L(__t1) segmentLeft.isoY( __t1)
#define ALIAS_yISOMidLane_DD(__t1) segment.isoY_DD( __t1)
#define ALIAS_yISOMidLane_D(__t1) segment.isoY_D( __t1)
#define ALIAS_yISOMidLane(__t1) segment.isoY( __t1)
#define ALIAS_xISOMidLane_R_DD(__t1) segmentRight.isoX_DD( __t1)
#define ALIAS_xISOMidLane_R_D(__t1) segmentRight.isoX_D( __t1)
#define ALIAS_xISOMidLane_R(__t1) segmentRight.isoX( __t1)
#define ALIAS_xISOMidLane_L_DD(__t1) segmentLeft.isoX_DD( __t1)
#define ALIAS_xISOMidLane_L_D(__t1) segmentLeft.isoX_D( __t1)
#define ALIAS_xISOMidLane_L(__t1) segmentLeft.isoX( __t1)
#define ALIAS_xISOMidLane_DD(__t1) segment.isoX_DD( __t1)
#define ALIAS_xISOMidLane_D(__t1) segment.isoX_D( __t1)
#define ALIAS_xISOMidLane(__t1) segment.isoX( __t1)
#define ALIAS_adherence_R(___dummy___) segmentRight.adherence()
#define ALIAS_adherence_L(___dummy___) segmentLeft.adherence()
#define ALIAS_adherence(___dummy___) segment.adherence()
#define ALIAS_sectionSpeedLimit_R(___dummy___) segmentRight.speedLimit()
#define ALIAS_sectionSpeedLimit_L(___dummy___) segmentLeft.speedLimit()
#define ALIAS_sectionSpeedLimit(___dummy___) segment.speedLimit()
#define ALIAS_rightWidth_R(__t1) segmentRight.rightWidth( __t1)
#define ALIAS_rightWidth_L(__t1) segmentLeft.rightWidth( __t1)
#define ALIAS_rightWidth(__t1) segment.rightWidth( __t1)
#define ALIAS_leftWidth_R_D(__t1) segmentRight.leftWidth_D( __t1)
#define ALIAS_leftWidth_R(__t1) segmentRight.leftWidth( __t1)
#define ALIAS_leftWidth_L_D(__t1) segmentLeft.leftWidth_D( __t1)
#define ALIAS_leftWidth_L(__t1) segmentLeft.leftWidth( __t1)
#define ALIAS_leftWidth_D(__t1) segment.leftWidth_D( __t1)
#define ALIAS_leftWidth(__t1) segment.leftWidth( __t1)
#define ALIAS_kappa_R_DD(__t1) segmentRight.saeCurvature_DD( __t1)
#define ALIAS_kappa_R_D(__t1) segmentRight.saeCurvature_D( __t1)
#define ALIAS_kappa_R(__t1) segmentRight.saeCurvature( __t1)
#define ALIAS_kappa_L_DD(__t1) segmentLeft.saeCurvature_DD( __t1)
#define ALIAS_kappa_L_D(__t1) segmentLeft.saeCurvature_D( __t1)
#define ALIAS_kappa_L(__t1) segmentLeft.saeCurvature( __t1)
#define ALIAS_kappa_DD(__t1) segment.saeCurvature_DD( __t1)
#define ALIAS_kappa_D(__t1) segment.saeCurvature_D( __t1)
#define ALIAS_kappa(__t1) segment.saeCurvature( __t1)
#define ALIAS_maxTorque_DD(__t1) pEngine -> maxTorqueOnWheelHub_DD( __t1)
#define ALIAS_maxTorque_D(__t1) pEngine -> maxTorqueOnWheelHub_D( __t1)
#define ALIAS_maxTorque(__t1) pEngine -> maxTorqueOnWheelHub( __t1)
#define ALIAS_roadLeftLateralBorder_DD(__t1) roadLeftLateralBorder.DD( __t1)
#define ALIAS_roadLeftLateralBorder_D(__t1) roadLeftLateralBorder.D( __t1)
#define ALIAS_roadRightLateralBorder_DD(__t1) roadRightLateralBorder.DD( __t1)
#define ALIAS_roadRightLateralBorder_D(__t1) roadRightLateralBorder.D( __t1)
#define ALIAS_MaxRollAngle_DD(__t1) MaxRollAngle.DD( __t1)
#define ALIAS_MaxRollAngle_D(__t1) MaxRollAngle.D( __t1)
#define ALIAS_MaxSteerAngle_DD(__t1) MaxSteerAngle.DD( __t1)
#define ALIAS_MaxSteerAngle_D(__t1) MaxSteerAngle.D( __t1)
#define ALIAS_LatSlipRear_DD(__t1) LatSlipRear.DD( __t1)
#define ALIAS_LatSlipRear_D(__t1) LatSlipRear.D( __t1)
#define ALIAS_LatSlipFront_DD(__t1) LatSlipFront.DD( __t1)
#define ALIAS_LatSlipFront_D(__t1) LatSlipFront.D( __t1)
#define ALIAS_LongSlipRear_DD(__t1) LongSlipRear.DD( __t1)
#define ALIAS_LongSlipRear_D(__t1) LongSlipRear.D( __t1)
#define ALIAS_LongSlipFront_DD(__t1) LongSlipFront.DD( __t1)
#define ALIAS_LongSlipFront_D(__t1) LongSlipFront.D( __t1)
#define ALIAS_RearWheelContact_DD(__t1) RearWheelContact.DD( __t1)
#define ALIAS_RearWheelContact_D(__t1) RearWheelContact.D( __t1)
#define ALIAS_FrontWheelContact_DD(__t1) FrontWheelContact.DD( __t1)
#define ALIAS_FrontWheelContact_D(__t1) FrontWheelContact.D( __t1)
#define ALIAS_OnlyTractionRear_DD(__t1) OnlyTractionRear.DD( __t1)
#define ALIAS_OnlyTractionRear_D(__t1) OnlyTractionRear.D( __t1)
#define ALIAS_OnlyBrakingRear_DD(__t1) OnlyBrakingRear.DD( __t1)
#define ALIAS_OnlyBrakingRear_D(__t1) OnlyBrakingRear.D( __t1)
#define ALIAS_OnlyBrakingFront_DD(__t1) OnlyBrakingFront.DD( __t1)
#define ALIAS_OnlyBrakingFront_D(__t1) OnlyBrakingFront.D( __t1)
#define ALIAS_tau__oControl_D_3(__t1, __t2, __t3) tau__oControl.D_3( __t1, __t2, __t3)
#define ALIAS_tau__oControl_D_2(__t1, __t2, __t3) tau__oControl.D_2( __t1, __t2, __t3)
#define ALIAS_tau__oControl_D_1(__t1, __t2, __t3) tau__oControl.D_1( __t1, __t2, __t3)
#define ALIAS_tau__oControl_D_3_3(__t1, __t2, __t3) tau__oControl.D_3_3( __t1, __t2, __t3)
#define ALIAS_tau__oControl_D_2_3(__t1, __t2, __t3) tau__oControl.D_2_3( __t1, __t2, __t3)
#define ALIAS_tau__oControl_D_2_2(__t1, __t2, __t3) tau__oControl.D_2_2( __t1, __t2, __t3)
#define ALIAS_tau__oControl_D_1_3(__t1, __t2, __t3) tau__oControl.D_1_3( __t1, __t2, __t3)
#define ALIAS_tau__oControl_D_1_2(__t1, __t2, __t3) tau__oControl.D_1_2( __t1, __t2, __t3)
#define ALIAS_tau__oControl_D_1_1(__t1, __t2, __t3) tau__oControl.D_1_1( __t1, __t2, __t3)
#define ALIAS_b__r__oControl_D_3(__t1, __t2, __t3) b__r__oControl.D_3( __t1, __t2, __t3)
#define ALIAS_b__r__oControl_D_2(__t1, __t2, __t3) b__r__oControl.D_2( __t1, __t2, __t3)
#define ALIAS_b__r__oControl_D_1(__t1, __t2, __t3) b__r__oControl.D_1( __t1, __t2, __t3)
#define ALIAS_b__r__oControl_D_3_3(__t1, __t2, __t3) b__r__oControl.D_3_3( __t1, __t2, __t3)
#define ALIAS_b__r__oControl_D_2_3(__t1, __t2, __t3) b__r__oControl.D_2_3( __t1, __t2, __t3)
#define ALIAS_b__r__oControl_D_2_2(__t1, __t2, __t3) b__r__oControl.D_2_2( __t1, __t2, __t3)
#define ALIAS_b__r__oControl_D_1_3(__t1, __t2, __t3) b__r__oControl.D_1_3( __t1, __t2, __t3)
#define ALIAS_b__r__oControl_D_1_2(__t1, __t2, __t3) b__r__oControl.D_1_2( __t1, __t2, __t3)
#define ALIAS_b__r__oControl_D_1_1(__t1, __t2, __t3) b__r__oControl.D_1_1( __t1, __t2, __t3)
#define ALIAS_b__f__oControl_D_3(__t1, __t2, __t3) b__f__oControl.D_3( __t1, __t2, __t3)
#define ALIAS_b__f__oControl_D_2(__t1, __t2, __t3) b__f__oControl.D_2( __t1, __t2, __t3)
#define ALIAS_b__f__oControl_D_1(__t1, __t2, __t3) b__f__oControl.D_1( __t1, __t2, __t3)
#define ALIAS_b__f__oControl_D_3_3(__t1, __t2, __t3) b__f__oControl.D_3_3( __t1, __t2, __t3)
#define ALIAS_b__f__oControl_D_2_3(__t1, __t2, __t3) b__f__oControl.D_2_3( __t1, __t2, __t3)
#define ALIAS_b__f__oControl_D_2_2(__t1, __t2, __t3) b__f__oControl.D_2_2( __t1, __t2, __t3)
#define ALIAS_b__f__oControl_D_1_3(__t1, __t2, __t3) b__f__oControl.D_1_3( __t1, __t2, __t3)
#define ALIAS_b__f__oControl_D_1_2(__t1, __t2, __t3) b__f__oControl.D_1_2( __t1, __t2, __t3)
#define ALIAS_b__f__oControl_D_1_1(__t1, __t2, __t3) b__f__oControl.D_1_1( __t1, __t2, __t3)
#define ALIAS_t__oControl_D_3(__t1, __t2, __t3) t__oControl.D_3( __t1, __t2, __t3)
#define ALIAS_t__oControl_D_2(__t1, __t2, __t3) t__oControl.D_2( __t1, __t2, __t3)
#define ALIAS_t__oControl_D_1(__t1, __t2, __t3) t__oControl.D_1( __t1, __t2, __t3)
#define ALIAS_t__oControl_D_3_3(__t1, __t2, __t3) t__oControl.D_3_3( __t1, __t2, __t3)
#define ALIAS_t__oControl_D_2_3(__t1, __t2, __t3) t__oControl.D_2_3( __t1, __t2, __t3)
#define ALIAS_t__oControl_D_2_2(__t1, __t2, __t3) t__oControl.D_2_2( __t1, __t2, __t3)
#define ALIAS_t__oControl_D_1_3(__t1, __t2, __t3) t__oControl.D_1_3( __t1, __t2, __t3)
#define ALIAS_t__oControl_D_1_2(__t1, __t2, __t3) t__oControl.D_1_2( __t1, __t2, __t3)
#define ALIAS_t__oControl_D_1_1(__t1, __t2, __t3) t__oControl.D_1_1( __t1, __t2, __t3)


namespace StraightDefine {

  /*\
   |   ___                   _
   |  | _ ) ___ _  _ _ _  __| |__ _ _ _ _  _
   |  | _ \/ _ \ || | ' \/ _` / _` | '_| || |
   |  |___/\___/\_,_|_||_\__,_\__,_|_|  \_, |
   |    ___             _ _ _   _       |__/
   |   / __|___ _ _  __| (_) |_(_)___ _ _  ___
   |  | (__/ _ \ ' \/ _` | |  _| / _ \ ' \(_-<
   |   \___\___/_||_\__,_|_|\__|_\___/_||_/__/
  \*/

  integer
  Straight::boundaryConditions_numEqns() const
  { return 43; }

  void
  Straight::boundaryConditions_eval(
    NodeType const     & LEFT__,
    NodeType const     & RIGHT__,
    P_const_pointer_type P__,
    real_type            result__[]
  ) const {
    integer i_segment_left  = LEFT__.i_segment;
    real_type const * QL__  = LEFT__.q;
    real_type const * XL__  = LEFT__.x;
    integer i_segment_right = RIGHT__.i_segment;
    real_type const * QR__  = RIGHT__.q;
    real_type const * XR__  = RIGHT__.x;
    Road2D::SegmentClass const & segmentLeft  = pRoad->getSegmentByIndex(i_segment_left);
    Road2D::SegmentClass const & segmentRight = pRoad->getSegmentByIndex(i_segment_right);
    result__[ 0   ] = XL__[0] - ModelPars[135];
    result__[ 1   ] = XL__[1] - ModelPars[137];
    result__[ 2   ] = XL__[2] - ModelPars[171];
    result__[ 3   ] = XL__[3] - ModelPars[96];
    result__[ 4   ] = XL__[4] - ModelPars[217];
    result__[ 5   ] = XL__[5] - ModelPars[70];
    result__[ 6   ] = XL__[6] - ModelPars[178];
    result__[ 7   ] = XL__[7] - ModelPars[67];
    result__[ 8   ] = XL__[8] - ModelPars[126];
    result__[ 9   ] = XL__[9] - ModelPars[148];
    result__[ 10  ] = XL__[10] - ModelPars[156];
    result__[ 11  ] = XL__[11] - ModelPars[159];
    result__[ 12  ] = XL__[12] - ModelPars[150];
    result__[ 13  ] = XL__[13] - ModelPars[157];
    result__[ 14  ] = XL__[14] - ModelPars[160];
    result__[ 15  ] = XL__[15] - ModelPars[176];
    result__[ 16  ] = XL__[16] - ModelPars[202];
    result__[ 17  ] = XL__[17] - ModelPars[195];
    result__[ 18  ] = XL__[18] - ModelPars[192];
    result__[ 19  ] = XL__[19] - ModelPars[198];
    result__[ 20  ] = XL__[20] - ModelPars[215];
    result__[ 21  ] = XL__[21] - ModelPars[184];
    result__[ 22  ] = XL__[22] - ModelPars[174];
    result__[ 23  ] = XL__[23] - ModelPars[182];
    result__[ 24  ] = XL__[24] - ModelPars[205];
    result__[ 25  ] = XL__[25] - ModelPars[221];
    result__[ 26  ] = XL__[26] - ModelPars[227];
    result__[ 27  ] = XL__[27] - ModelPars[235];
    result__[ 28  ] = XL__[28] - ModelPars[224];
    result__[ 29  ] = XL__[29] - ModelPars[230];
    result__[ 30  ] = XL__[30] - ModelPars[238];
    result__[ 31  ] = XL__[31] - ModelPars[241];
    result__[ 32  ] = XL__[32] - ModelPars[200];
    result__[ 33  ] = XL__[33] - ModelPars[4];
    result__[ 34  ] = XL__[34] - ModelPars[26];
    result__[ 35  ] = XL__[35] - ModelPars[28];
    result__[ 36  ] = XL__[36] - ModelPars[128];
    result__[ 37  ] = XL__[37] - ModelPars[80];
    result__[ 38  ] = XL__[38] - ModelPars[153];
    result__[ 39  ] = XR__[0] - ModelPars[134];
    result__[ 40  ] = XR__[3] - ModelPars[95];
    result__[ 41  ] = XR__[37] - ModelPars[79];
    result__[ 42  ] = XR__[38] - ModelPars[152];
    #ifdef MECHATRONIX_DEBUG
    CHECK_NAN(result__,"boundaryConditions_eval",43);
    #endif
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  integer
  Straight::DboundaryConditionsDx_numRows() const
  { return 43; }

  integer
  Straight::DboundaryConditionsDx_numCols() const
  { return 78; }

  integer
  Straight::DboundaryConditionsDx_nnz() const
  { return 43; }

  void
  Straight::DboundaryConditionsDx_pattern(
    integer iIndex[],
    integer jIndex[]
  ) const {
    iIndex[ 0  ] = 0   ; jIndex[ 0  ] = 0   ;
    iIndex[ 1  ] = 1   ; jIndex[ 1  ] = 1   ;
    iIndex[ 2  ] = 2   ; jIndex[ 2  ] = 2   ;
    iIndex[ 3  ] = 3   ; jIndex[ 3  ] = 3   ;
    iIndex[ 4  ] = 4   ; jIndex[ 4  ] = 4   ;
    iIndex[ 5  ] = 5   ; jIndex[ 5  ] = 5   ;
    iIndex[ 6  ] = 6   ; jIndex[ 6  ] = 6   ;
    iIndex[ 7  ] = 7   ; jIndex[ 7  ] = 7   ;
    iIndex[ 8  ] = 8   ; jIndex[ 8  ] = 8   ;
    iIndex[ 9  ] = 9   ; jIndex[ 9  ] = 9   ;
    iIndex[ 10 ] = 10  ; jIndex[ 10 ] = 10  ;
    iIndex[ 11 ] = 11  ; jIndex[ 11 ] = 11  ;
    iIndex[ 12 ] = 12  ; jIndex[ 12 ] = 12  ;
    iIndex[ 13 ] = 13  ; jIndex[ 13 ] = 13  ;
    iIndex[ 14 ] = 14  ; jIndex[ 14 ] = 14  ;
    iIndex[ 15 ] = 15  ; jIndex[ 15 ] = 15  ;
    iIndex[ 16 ] = 16  ; jIndex[ 16 ] = 16  ;
    iIndex[ 17 ] = 17  ; jIndex[ 17 ] = 17  ;
    iIndex[ 18 ] = 18  ; jIndex[ 18 ] = 18  ;
    iIndex[ 19 ] = 19  ; jIndex[ 19 ] = 19  ;
    iIndex[ 20 ] = 20  ; jIndex[ 20 ] = 20  ;
    iIndex[ 21 ] = 21  ; jIndex[ 21 ] = 21  ;
    iIndex[ 22 ] = 22  ; jIndex[ 22 ] = 22  ;
    iIndex[ 23 ] = 23  ; jIndex[ 23 ] = 23  ;
    iIndex[ 24 ] = 24  ; jIndex[ 24 ] = 24  ;
    iIndex[ 25 ] = 25  ; jIndex[ 25 ] = 25  ;
    iIndex[ 26 ] = 26  ; jIndex[ 26 ] = 26  ;
    iIndex[ 27 ] = 27  ; jIndex[ 27 ] = 27  ;
    iIndex[ 28 ] = 28  ; jIndex[ 28 ] = 28  ;
    iIndex[ 29 ] = 29  ; jIndex[ 29 ] = 29  ;
    iIndex[ 30 ] = 30  ; jIndex[ 30 ] = 30  ;
    iIndex[ 31 ] = 31  ; jIndex[ 31 ] = 31  ;
    iIndex[ 32 ] = 32  ; jIndex[ 32 ] = 32  ;
    iIndex[ 33 ] = 33  ; jIndex[ 33 ] = 33  ;
    iIndex[ 34 ] = 34  ; jIndex[ 34 ] = 34  ;
    iIndex[ 35 ] = 35  ; jIndex[ 35 ] = 35  ;
    iIndex[ 36 ] = 36  ; jIndex[ 36 ] = 36  ;
    iIndex[ 37 ] = 37  ; jIndex[ 37 ] = 37  ;
    iIndex[ 38 ] = 38  ; jIndex[ 38 ] = 38  ;
    iIndex[ 39 ] = 39  ; jIndex[ 39 ] = 39  ;
    iIndex[ 40 ] = 40  ; jIndex[ 40 ] = 42  ;
    iIndex[ 41 ] = 41  ; jIndex[ 41 ] = 76  ;
    iIndex[ 42 ] = 42  ; jIndex[ 42 ] = 77  ;
  }

  void
  Straight::DboundaryConditionsDx_sparse(
    NodeType const     & LEFT__,
    NodeType const     & RIGHT__,
    P_const_pointer_type P__,
    real_type            result__[]
  ) const {
    integer i_segment_left  = LEFT__.i_segment;
    real_type const * QL__  = LEFT__.q;
    real_type const * XL__  = LEFT__.x;
    integer i_segment_right = RIGHT__.i_segment;
    real_type const * QR__  = RIGHT__.q;
    real_type const * XR__  = RIGHT__.x;
    Road2D::SegmentClass const & segmentLeft  = pRoad->getSegmentByIndex(i_segment_left);
    Road2D::SegmentClass const & segmentRight = pRoad->getSegmentByIndex(i_segment_right);
    result__[ 0   ] = 1;
    result__[ 1   ] = 1;
    result__[ 2   ] = 1;
    result__[ 3   ] = 1;
    result__[ 4   ] = 1;
    result__[ 5   ] = 1;
    result__[ 6   ] = 1;
    result__[ 7   ] = 1;
    result__[ 8   ] = 1;
    result__[ 9   ] = 1;
    result__[ 10  ] = 1;
    result__[ 11  ] = 1;
    result__[ 12  ] = 1;
    result__[ 13  ] = 1;
    result__[ 14  ] = 1;
    result__[ 15  ] = 1;
    result__[ 16  ] = 1;
    result__[ 17  ] = 1;
    result__[ 18  ] = 1;
    result__[ 19  ] = 1;
    result__[ 20  ] = 1;
    result__[ 21  ] = 1;
    result__[ 22  ] = 1;
    result__[ 23  ] = 1;
    result__[ 24  ] = 1;
    result__[ 25  ] = 1;
    result__[ 26  ] = 1;
    result__[ 27  ] = 1;
    result__[ 28  ] = 1;
    result__[ 29  ] = 1;
    result__[ 30  ] = 1;
    result__[ 31  ] = 1;
    result__[ 32  ] = 1;
    result__[ 33  ] = 1;
    result__[ 34  ] = 1;
    result__[ 35  ] = 1;
    result__[ 36  ] = 1;
    result__[ 37  ] = 1;
    result__[ 38  ] = 1;
    result__[ 39  ] = 1;
    result__[ 40  ] = 1;
    result__[ 41  ] = 1;
    result__[ 42  ] = 1;
    #ifdef MECHATRONIX_DEBUG
    CHECK_NAN(result__,"DboundaryConditionsDxp_sparse",43);
    #endif
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  integer
  Straight::DboundaryConditionsDp_numRows() const
  { return 43; }

  integer
  Straight::DboundaryConditionsDp_numCols() const
  { return 0; }

  integer
  Straight::DboundaryConditionsDp_nnz() const
  { return 0; }

  void
  Straight::DboundaryConditionsDp_pattern(
    integer iIndex[],
    integer jIndex[]
  ) const {

  }

  void
  Straight::DboundaryConditionsDp_sparse(
    NodeType const     & LEFT__,
    NodeType const     & RIGHT__,
    P_const_pointer_type P__,
    real_type            result__[]
  ) const {
    // EMPTY

  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  integer
  Straight::adjointBC_numEqns() const
  { return 78; }

  void
  Straight::adjointBC_eval(
    NodeType2 const             & LEFT__,
    NodeType2 const             & RIGHT__,
    P_const_pointer_type          P__,
    OMEGA_full_const_pointer_type OMEGA__,
    real_type                     result__[]
  ) const {
    integer i_segment_left  = LEFT__.i_segment;
    real_type const * QL__  = LEFT__.q;
    real_type const * XL__  = LEFT__.x;
    real_type const * LL__  = LEFT__.lambda;
    integer i_segment_right = RIGHT__.i_segment;
    real_type const * QR__  = RIGHT__.q;
    real_type const * XR__  = RIGHT__.x;
    real_type const * LR__  = RIGHT__.lambda;
    Road2D::SegmentClass const & segmentLeft  = pRoad->getSegmentByIndex(i_segment_left);
    Road2D::SegmentClass const & segmentRight = pRoad->getSegmentByIndex(i_segment_right);
    real_type t4   = ALIAS_kappa_L(QL__[0]);
    real_type t7   = 1.0 / (t4 * XL__[37] - 1);
    real_type t8   = XL__[38];
    real_type t9   = cos(t8);
    real_type t12  = sin(t8);
    real_type t15  = -XL__[1] * t12 + XL__[0] * t9;
    real_type t16  = t15 * t7;
    real_type t17  = ModelPars[25];
    real_type t18  = LL__[0];
    real_type t21  = XL__[7];
    real_type t22  = cos(t21);
    real_type t23  = ModelPars[76];
    real_type t25  = ModelPars[233];
    real_type t26  = t25 * t23 * t22;
    real_type t27  = sin(t21);
    real_type t28  = ModelPars[24];
    real_type t29  = ModelPars[219];
    real_type t30  = -t28 + t29;
    real_type t32  = ModelPars[78];
    real_type t33  = t28 * t32;
    real_type t34  = t23 * t30 - t33;
    real_type t35  = t34 * t27;
    real_type t36  = ModelPars[75];
    real_type t37  = ModelPars[71];
    real_type t38  = t37 * t36;
    real_type t39  = ModelPars[66];
    real_type t40  = cos(t39);
    real_type t42  = t25 * t23 * t40;
    real_type t43  = sin(t39);
    real_type t45  = -t23 * t30;
    real_type t46  = t45 + t33;
    real_type t47  = t46 * t43;
    real_type t48  = ModelPars[214];
    real_type t49  = cos(t48);
    real_type t50  = t49 * t38;
    real_type t51  = ModelPars[204];
    real_type t52  = ModelPars[77];
    real_type t53  = t52 * t51;
    real_type t54  = XL__[8];
    real_type t55  = t52 * t54;
    real_type t56  = ModelPars[31];
    real_type t57  = t56 * t17;
    real_type t58  = -t26 + t35 - t38 + t42 + t47 + t50 + t53 - t55 - t57;
    real_type t59  = XL__[3];
    real_type t60  = cos(t59);
    real_type t61  = t60 * t58;
    real_type t63  = ModelPars[65];
    real_type t64  = XL__[4] + t63;
    real_type t65  = cos(t64);
    real_type t66  = t65 * t16;
    real_type t67  = t66 * t61;
    real_type t68  = t34 * t22;
    real_type t70  = t25 * t23 * t27;
    real_type t71  = t46 * t40;
    real_type t73  = t25 * t23 * t43;
    real_type t74  = sin(t48);
    real_type t75  = t74 * t38;
    real_type t76  = ModelPars[30];
    real_type t77  = t76 * t17;
    real_type t78  = t68 + t70 + t71 - t73 - t75 + t77;
    real_type t79  = t60 * t78;
    real_type t80  = sin(t64);
    real_type t82  = t80 * t79 * t16;
    real_type t83  = t60 * t17;
    real_type t84  = XL__[5];
    real_type t85  = t84 * t83;
    real_type t86  = sin(t59);
    real_type t87  = ModelPars[149];
    real_type t88  = t87 * t52;
    real_type t89  = ModelPars[190];
    real_type t90  = ModelPars[220];
    real_type t92  = t90 * t89 + t88;
    real_type t93  = t92 * t86;
    real_type t94  = XL__[6];
    real_type t96  = t94 * t93 + t85;
    real_type t99  = LL__[4];
    real_type t101 = t46 * t27;
    real_type t102 = t34 * t43;
    real_type t104 = t86 * (t26 + t101 + t38 - t42 + t102 - t50 - t53 + t55 + t57);
    real_type t109 = t86 * t17;
    real_type t110 = t84 * t109;
    real_type t111 = -t92;
    real_type t112 = t94 * t111;
    real_type t117 = -t66 * t104 - t80 * t78 * t86 * t16 - t15 * t7 * (t60 * t112 + t110);
    real_type t118 = LL__[5];
    real_type t120 = t92 * t16;
    real_type t121 = t65 * t94;
    real_type t122 = LL__[6];
    real_type t125 = t26 - t35;
    real_type t128 = t68 + t70;
    real_type t130 = t80 * t128 * t16;
    real_type t132 = LL__[7];
    real_type t134 = t7 * t52;
    real_type t135 = t80 * t15;
    real_type t136 = LL__[8];
    result__[ 0   ] = OMEGA__[0] - t18 * t17 * t16 + t99 * (-t96 * t16 + t67 - t82) + t118 * t117 + t122 * t121 * t120 + t132 * (-t65 * t125 * t16 - t130) + t136 * t135 * t134;
    real_type t140 = LL__[1];
    real_type t146 = LL__[3];
    real_type t152 = -t80 * t58 * t16 - t65 * t78 * t16;
    real_type t157 = t60 * t92;
    real_type t164 = -t125;
    real_type t165 = t164 * t86;
    real_type t168 = -t65 * t128 * t86 * t16 - t80 * t165 * t16;
    real_type t171 = t7 * t86 * t52;
    real_type t172 = t65 * t15;
    real_type t173 = t136 * t172;
    result__[ 1   ] = OMEGA__[1] - t140 * t17 * t16 + t146 * (t96 * t16 - t67 + t82) + t118 * t152 + t122 * (-t80 * t94 * t86 * t120 - t157 * t16) + t132 * t168 + t173 * t171;
    real_type t178 = ModelPars[151];
    real_type t179 = t178 * t38;
    real_type t180 = t22 * t22;
    real_type t182 = ModelPars[164];
    real_type t183 = t25 * t45 - t182;
    real_type t184 = 2 * t183;
    real_type t190 = t28 * t28;
    real_type t191 = t32 * t190;
    real_type t192 = ModelPars[15];
    real_type t193 = ModelPars[20];
    real_type t194 = (t28 - t29 - t25) * (t28 - t29 + t25) * t23 + t191 - t192 + t193;
    real_type t196 = t27 * t194 * t22;
    real_type t197 = t40 * t40;
    real_type t199 = -t184 * t197;
    real_type t201 = t43 * t194 * t40;
    real_type t202 = t37 * t37;
    real_type t203 = t202 * t36;
    real_type t204 = ModelPars[14];
    real_type t205 = ModelPars[19];
    real_type t206 = t203 + t204 - t205;
    real_type t209 = (t206 * t74 + t179) * t49;
    real_type t210 = ModelPars[161];
    real_type t211 = t36 * t210;
    real_type t212 = t74 * t37;
    real_type t213 = t212 * t211;
    real_type t214 = ModelPars[23];
    real_type t215 = t214 + t87;
    real_type t217 = t52 * t215 * t54;
    real_type t218 = t215 * t52;
    real_type t219 = t51 * t218;
    real_type t220 = t76 * t57;
    real_type t221 = ModelPars[0];
    real_type t222 = t184 * t180 - t179 + t196 + t199 - t201 + t209 + t213 - t217 + t219 - t220 - t221;
    real_type t223 = t222 * t60;
    real_type t225 = -t194;
    real_type t226 = t225 * t180;
    real_type t228 = t183 * t27 * t22;
    real_type t229 = 2 * t228;
    real_type t230 = t194 * t197;
    real_type t232 = t183 * t43 * t40;
    real_type t233 = 2 * t232;
    real_type t234 = t49 * t49;
    real_type t235 = -t206;
    real_type t236 = t235 * t234;
    real_type t238 = t49 * t37 * t211;
    real_type t240 = t212 * t36 * t178;
    real_type t241 = t54 * t54;
    real_type t242 = t241 * t52;
    real_type t243 = t242 / 2;
    real_type t244 = ModelPars[127];
    real_type t246 = t52 * t244 * t54;
    real_type t249 = (t244 - t51 / 2) * t53;
    real_type t250 = t210 * t38;
    real_type t251 = t76 * t76;
    real_type t252 = t56 * t56;
    real_type t253 = -t251 + t252;
    real_type t255 = t253 * t17 / 2;
    real_type t256 = ModelPars[10];
    real_type t257 = t256 / 2;
    real_type t258 = ModelPars[12];
    real_type t259 = t258 / 2;
    real_type t260 = t226 + t229 + t230 - t233 + t236 - t238 + t240 + t243 - t246 + t249 + t203 + t250 + t255 + t204 - t205 + t257 - t259;
    real_type t262 = t80 * t16;
    real_type t265 = t84 * t60;
    real_type t267 = t87 * t218;
    real_type t268 = t90 * t90;
    real_type t269 = t89 * t268;
    real_type t271 = t89 * t90 * t214;
    real_type t272 = ModelPars[13];
    real_type t273 = ModelPars[17];
    real_type t274 = ModelPars[165];
    real_type t275 = ModelPars[166];
    real_type t276 = t267 + t269 + t271 - t272 + t273 - t274 + t275;
    real_type t279 = -t94 * t276 * t86 - t78 * t265;
    real_type t287 = t52 * t244 * t87;
    real_type t290 = t89 * t90 * ModelPars[234];
    real_type t291 = ModelPars[163];
    real_type t292 = -t52 * t54 * t87 + t287 - t290 - t291;
    real_type t293 = t292 * t86;
    real_type t295 = -t58 * t265 - t94 * t293;
    real_type t298 = t65 * t65;
    real_type t304 = t86 * t260;
    real_type t306 = t298 * t16;
    real_type t309 = t86 * t222;
    real_type t313 = t60 * t60;
    real_type t317 = t84 * t86;
    real_type t320 = t94 * t292;
    real_type t328 = t86 * t60;
    real_type t329 = t78 * t84;
    real_type t332 = t94 * t276;
    real_type t337 = t84 * t94;
    real_type t340 = t84 * t84;
    real_type t341 = t340 * t17;
    real_type t342 = 2 * t240;
    real_type t343 = t251 * t17;
    real_type t344 = ModelPars[11];
    real_type t345 = t226 + t229 + t230 - t233 - t341 + t236 + t342 - t343 + t203 + t204 - t205 + t256 - t344;
    real_type t348 = t94 * t92;
    real_type t356 = t29 * t28;
    real_type t358 = t29 * t29;
    real_type t360 = t25 * t25;
    real_type t362 = 2 * t190 - 4 * t356 + 2 * t358 - 2 * t360;
    real_type t364 = 2 * t191;
    real_type t365 = 2 * t192;
    real_type t366 = 2 * t193;
    real_type t367 = t23 * t362 + t364 - t365 + t366;
    real_type t371 = -t25 * t28 + t25 * t29;
    real_type t372 = 4 * t371;
    real_type t374 = 4 * t182;
    real_type t375 = t23 * t372 + t374;
    real_type t380 = -t23 * t362 - t364 + t365 - t366;
    real_type t381 = t197 * t380;
    real_type t384 = -t23 * t372 - t374;
    real_type t386 = t40 * t43 * t384;
    real_type t387 = 2 * t206;
    real_type t388 = t234 * t387;
    real_type t389 = 2 * t238;
    real_type t390 = 2 * t246;
    real_type t393 = t51 * t51;
    real_type t394 = -2 * t51 * t244 + t393;
    real_type t395 = t52 * t394;
    real_type t396 = 2 * t203;
    real_type t397 = 2 * t250;
    real_type t399 = -t253 * t17;
    real_type t400 = 2 * t204;
    real_type t401 = 2 * t205;
    real_type t402 = t22 * t27 * t375 + t180 * t367 - t242 - t256 + t258 - t342 + t381 + t386 + t388 + t389 + t390 + t395 - t396 - t397 + t399 - t400 + t401;
    real_type t408 = t197 * t375;
    real_type t410 = t40 * t43 * t380;
    real_type t412 = 2 * t179;
    real_type t414 = (t387 * t74 + t412) * t49;
    real_type t415 = -t215;
    real_type t417 = 2 * t52 * t415;
    real_type t419 = 2 * t213;
    real_type t422 = t51 * t214 + t51 * t87;
    real_type t424 = 2 * t52 * t422;
    real_type t425 = 2 * t220;
    real_type t426 = 2 * t221;
    real_type t427 = t22 * t27 * t367 + t180 * t384 + t54 * t417 + t408 + t410 - t412 + t414 + t419 + t424 - t425 - t426;
    real_type t431 = t25 * t23;
    real_type t432 = t431 * t84 * t22;
    real_type t433 = 2 * t432;
    real_type t434 = 2 * t30;
    real_type t436 = 2 * t33;
    real_type t437 = t434 * t23 - t436;
    real_type t438 = t84 * t437;
    real_type t440 = 2 * t42;
    real_type t443 = -t434 * t23 + t436;
    real_type t444 = t43 * t443;
    real_type t445 = 2 * t50;
    real_type t446 = 2 * t38;
    real_type t447 = 2 * t53;
    real_type t448 = 2 * t55;
    real_type t449 = 2 * t57;
    real_type t457 = t84 * t443;
    real_type t459 = t437 * t43;
    real_type t470 = t27 * t25 * t84 * t23;
    real_type t471 = 2 * t470;
    real_type t473 = 2 * t73;
    real_type t474 = 2 * t75;
    real_type t475 = 2 * t77;
    real_type t476 = t40 * t437 + t473 + t474 - t475;
    real_type t480 = t87 * t214;
    real_type t481 = t87 * t87;
    real_type t482 = -t480 - t481;
    real_type t491 = 2 * t52 * t482 - 2 * t269 - 2 * t271 + 2 * t272 - 2 * t273 + 2 * t274 - 2 * t275;
    real_type t496 = t40 * t443 - t473 - t474 + t475;
    real_type t501 = 2 * t356;
    real_type t502 = -t190 + t501 - t358 + t360;
    real_type t504 = t23 * t502 - t191 + t192 - t193;
    real_type t507 = -2 * t371;
    real_type t509 = 2 * t182;
    real_type t510 = t23 * t507 - t509;
    real_type t515 = -t23 * t502 + t191 - t192 + t193;
    real_type t516 = t197 * t515;
    real_type t519 = -t23 * t507 + t509;
    real_type t521 = t40 * t43 * t519;
    real_type t522 = t22 * t27 * t510 + t180 * t504 + t203 + t204 - t205 + t236 + t256 - t341 + t342 - t343 - t344 + t516 + t521;
    real_type t524 = 2 * t111;
    real_type t529 = -t52 * t394;
    real_type t530 = t251 + t252;
    real_type t531 = t530 * t17;
    real_type t532 = t60 * t317 * t94 * t524 + t313 * t522 + t242 + t341 - t342 + t344 - t389 - t390 + t397 + t529 + t531;
    real_type t538 = t52 * t481;
    real_type t542 = ModelPars[167];
    real_type t543 = t52 * t480 + t538 + t90 * (t214 + t90) * t89 + t542 + t272;
    real_type t549 = -t292;
    real_type t552 = t94 * t549;
    real_type t553 = t86 * t552;
    real_type t563 = t190 - t501 + t358 + t360;
    real_type t565 = ModelPars[18];
    real_type t566 = ModelPars[16];
    real_type t567 = t563 * t23 + t191 + t565 + t566;
    real_type t569 = t567 * t86 * t16;
    real_type t585 = t7 * t94;
    real_type t586 = t15 * t585;
    real_type t587 = t273 * t60;
    real_type t592 = -t16 * t86 * t273 + t80 * t587 * t586;
    real_type t593 = LL__[9];
    real_type t595 = t7 * t86;
    real_type t596 = t565 * t15;
    real_type t597 = LL__[10];
    result__[ 2   ] = OMEGA__[2] + t18 * t117 + t140 * t152 + t146 * (t223 * t16 + t65 * (-2 * t262 * t260 * t60 - t279 * t16) - t80 * t295 * t16 - 2 * t298 * t223 * t16) + t99 * (-2 * t306 * t60 * t304 + t65 * (2 * t262 * t60 * t309 - (2 * t94 * t292 * t313 - 2 * t317 * t61 - t320) * t16) - t80 * (-2 * t94 * t276 * t313 + 2 * t329 * t328 + t332) * t16 - t15 * t7 * (-2 * t337 * t92 * t313 - t60 * t86 * t345 + t84 * t348)) + t118 * (-t306 * t313 * t402 + t65 * (-t262 * t313 * t427 - t15 * t7 * (t313 * (-t433 + t27 * t438 + t84 * (t440 + t444 + t445 - t446 + t447 - t448 - t449)) + 2 * t328 * t94 * t292 + t433 + t27 * t457 + t84 * (-t440 + t459 - t445 + t446 - t447 + t448 + t449))) - t135 * t7 * (t313 * (t22 * t457 + t84 * t476 - t471) + t328 * t94 * t491 + t22 * t438 + t471 + t84 * t496) - t15 * t7 * t532) + t122 * (-t65 * (-t337 * t93 + t543 * t60) * t16 + t262 * t549 * t60 + t553 * t16) + t132 * (-t80 * t317 * t128 * t16 + t65 * t165 * t84 * t16 - t569) + t136 * (2 * t80 * t52 * t15 * t7 * (-t94 * t60 * t87 / 2 + t317 / 2) + t86 * t218 * t16) + t593 * t592 - t597 * t596 * t595;
    result__[ 3   ] = -LL__[19] * t16 + OMEGA__[3];
    result__[ 4   ] = -LL__[20] * t16 + OMEGA__[4];
    result__[ 5   ] = -LL__[21] * t16 + OMEGA__[5];
    result__[ 6   ] = -LL__[22] * t16 + OMEGA__[6];
    result__[ 7   ] = -LL__[23] * t16 + OMEGA__[7];
    result__[ 8   ] = -LL__[24] * t16 + OMEGA__[8];
    result__[ 9   ] = -LL__[25] * t16 + OMEGA__[9];
    result__[ 10  ] = -LL__[26] * t16 + OMEGA__[10];
    result__[ 11  ] = -LL__[27] * t16 + OMEGA__[11];
    result__[ 12  ] = -LL__[28] * t16 + OMEGA__[12];
    result__[ 13  ] = -LL__[29] * t16 + OMEGA__[13];
    result__[ 14  ] = -LL__[30] * t16 + OMEGA__[14];
    result__[ 15  ] = -LL__[31] * t16 + OMEGA__[15];
    result__[ 16  ] = -LL__[32] * t16 + OMEGA__[16];
    real_type t643 = t7 * t60;
    real_type t651 = t597 * t565 * t16;
    result__[ 17  ] = -t118 * t596 * t595 - t132 * t565 * t16 - t99 * t596 * t643 - t651 + OMEGA__[17];
    real_type t653 = t65 * t273;
    real_type t665 = t593 * t15 * t7 * t273;
    result__[ 18  ] = OMEGA__[18] + t146 * t653 * t586 + t99 * (-t262 * t86 * t273 * t94 - t587 * t16) + t118 * t592 - t665;
    real_type t667 = t46 * t22;
    real_type t668 = t34 * t40;
    real_type t669 = t667 - t70 + t668 + t73 + t75 - t77;
    real_type t670 = t669 * t60;
    real_type t679 = t58 * t86;
    real_type t682 = t669 * t86;
    real_type t689 = LL__[2];
    real_type t692 = -4 * t183;
    real_type t696 = -t692 * t197;
    real_type t697 = 2 * t201;
    real_type t698 = -t387;
    real_type t701 = (t698 * t74 - t412) * t49;
    real_type t703 = 2 * t219;
    real_type t704 = t692 * t180 - 2 * t196 + 2 * t217 + t412 - t419 + t425 + t426 + t696 + t697 + t701 - t703;
    real_type t714 = 2 * t225;
    real_type t718 = -t197 * t714;
    real_type t719 = 4 * t232;
    real_type t720 = t698 * t234;
    real_type t721 = t253 * t17;
    real_type t722 = t180 * t714 + 4 * t228 + t242 + t256 - t258 + t342 - t389 - t390 + t396 + t397 + t400 - t401 + t529 + t718 - t719 + t720 + t721;
    real_type t727 = t225 * t197;
    real_type t728 = t206 * t234;
    real_type t729 = t194 * t180 - t203 - t204 + t205 - t229 + t233 + t258 + t341 - t342 + t343 + t727 + t728;
    real_type t746 = t292 * t60;
    real_type t760 = t197 * t367;
    real_type t762 = t40 * t43 * t375;
    real_type t763 = t22 * t27 * t384 + t180 * t380 + t242 + t256 - t258 + t342 - t389 - t390 + t396 + t397 + t400 - t401 + t529 + t720 + t721 + t760 + t762;
    real_type t766 = t84 * t46;
    real_type t768 = t668 + t75 + t73 - t77;
    real_type t770 = t22 * t766 + t84 * t768 - t470;
    real_type t773 = t52 * t482 - t269 - t271 + t272 - t273 + t274 - t275;
    real_type t781 = t27 * t766;
    real_type t792 = t197 * t510;
    real_type t794 = t40 * t43 * t515;
    real_type t797 = (t235 * t74 - t179) * t49;
    real_type t799 = -t52 * t422;
    real_type t800 = t22 * t27 * t504 + t180 * t519 + t179 - t213 + t217 + t220 + t221 + t792 + t794 + t797 + t799;
    real_type t806 = t65 * t292 * t16;
    real_type t807 = -t543;
    real_type t811 = t84 * t92 * t16;
    real_type t814 = t7 * t88;
    real_type t815 = t94 * t15;
    real_type t822 = XL__[15] * t15;
    real_type t823 = LL__[11];
    real_type t826 = XL__[16];
    real_type t827 = sin(t826);
    real_type t829 = cos(t826);
    real_type t831 = t827 * t60 - t829 * t86;
    real_type t834 = t80 * t94 * t831 * t16;
    real_type t837 = t60 * t829 + t86 * t827;
    real_type t838 = t837 * t16;
    real_type t840 = LL__[12];
    real_type t843 = ModelPars[124];
    real_type t844 = -ModelPars[122] + t843;
    real_type t846 = XL__[11];
    real_type t849 = -t844;
    real_type t850 = t827 * t849;
    real_type t851 = XL__[10];
    real_type t855 = LL__[14];
    real_type t858 = t829 * t849;
    real_type t865 = LL__[15];
    real_type t868 = ModelPars[125];
    real_type t870 = -t868 - XL__[14];
    real_type t872 = XL__[13];
    real_type t875 = LL__[17];
    real_type t882 = LL__[18];
    result__[ 19  ] = OMEGA__[19] + t140 * (-t67 - t80 * t670 * t16 - t15 * t7 * (t86 * t112 - t85)) + t689 * (-t65 * t679 * t16 - t80 * t682 * t16 - (t94 * t157 - t110) * t16) + t146 * (t65 * (2 * t16 * t84 * t58 - t80 * t704 * t16) - 2 * t262 * t329 - t298 * t15 * t7 * t722 - t15 * t7 * t729) + t99 * (2 * t298 * t309 * t16 + t65 * (2 * t262 * t304 - (-t94 * t276 * t60 + t78 * t317) * t16) - t80 * (t84 * t679 - t94 * t746) * t16 - t309 * t16) + t118 * (-t306 * t60 * t427 + t65 * (-t262 * t60 * t763 - t15 * t7 * (t86 * t94 * t773 + t60 * t770)) - t135 * t7 * (t60 * (t432 + t781 + t84 * (-t42 + t102 - t50 + t38 - t53 + t55 + t57)) + t553) - t16 * t60 * t800) + t122 * (-t80 * t807 * t16 - t806 + t811) - t136 * t65 * t815 * t814 + t593 * t653 * t586 + t823 * t822 * t595 + t840 * (t834 - t838) - t855 * ((t844 * t829 - t843 - t846) * t60 - t86 * (t850 - t851)) * t16 - t865 * ((t858 + t843 + t846) * t86 + t60 * (t844 * t827 + t851)) * t16 - t875 * (t870 * t60 + t86 * t872) * t16 - t882 * (t60 * t872 - t870 * t86) * t16;
    real_type t895 = -t65 * t682 * t16 - t262 * t104;
    real_type t899 = t262 * t61;
    real_type t914 = t530 * t17 / 2;
    real_type t915 = t344 / 2;
    real_type t923 = t84 * t34;
    real_type t933 = -t52 * t482;
    real_type t934 = t933 + t269 + t271 - t272 + t273 - t274 + t275;
    real_type t942 = -t530 * t17;
    real_type t952 = -t563 * t23 - t191 - t565 - t566;
    real_type t963 = t244 - t54;
    real_type t967 = LL__[13];
    real_type t975 = t27 * t28;
    real_type t977 = t22 * t28;
    real_type t979 = -t262 * t977 + t66 * t975;
    real_type t980 = LL__[16];
    real_type t984 = t262 * t975 + t66 * t977;
    result__[ 20  ] = OMEGA__[20] + t18 * (-t65 * t58 * t16 - t80 * t669 * t16) + t140 * t895 + t689 * (t65 * t670 * t16 - t899) + t146 * (-t80 * t320 * t16 - t65 * t332 * t16) + t99 * (t65 * t295 * t16 - t80 * t279 * t16 + 2 * t16 * t60 * (-t238 + t243 - t246 - t240 + t249 + t250 + t914 + t915)) + t118 * (-t172 * t7 * (t60 * t552 + t86 * (-t432 + t27 * t923 + t84 * (t42 + t47 + t50 - t38 + t53 - t55 - t57))) - t135 * t7 * (t60 * t94 * t934 + t86 * t770) - t16 * t86 * (t389 - t242 + t390 + t342 + t395 - t397 + t942 - t344)) - t122 * t552 * t16 - t132 * t952 * t16 - t136 * t218 * t16 + t665 + t651 - t823 * t135 * t585 + t840 * t121 * t838 + t967 * (-t80 * t415 * t16 - t65 * t963 * t16) + t865 * (-t65 * t215 * t16 - t80 * t963 * t16) + t980 * t979 + t882 * t984;
    real_type t1001 = t667 - t70;
    result__[ 21  ] = OMEGA__[21] + t140 * t109 * t16 - t689 * t83 * t16 - t146 * t348 * t16 + t99 * (t65 * t79 * t16 + t899) + t118 * t895 + t122 * t80 * t94 * t120 + t132 * (-t65 * t1001 * t16 - t80 * t125 * t16) - t173 * t134 - t865 * t16 - t882 * t16;
    real_type t1018 = -t267 - t269 - t271 - t272 - t542;
    real_type t1023 = -t1018;
    real_type t1031 = t933 + t269 + t271 + t272 + t542;
    real_type t1038 = t538 + t269 + t272 + t542;
    real_type t1043 = -t837;
    real_type t1048 = t855 * t15;
    result__[ 22  ] = OMEGA__[22] - t140 * t157 * t16 - t689 * t86 * t15 * t7 * t92 + t146 * (-t80 * t1018 * t16 - t806 + t811) + t99 * (t65 * t1023 * t86 * t16 + t80 * t293 * t16) + t118 * (-t66 * t60 * t1031 - t80 * t746 * t16) - t122 * t1038 * t16 + t823 * t65 * t16 - t840 * t80 * t1043 * t16 - t1048 * t7 * t87;
    real_type t1051 = t26 + t101;
    result__[ 23  ] = OMEGA__[23] + t18 * (-t172 * t7 * t1051 - t130) + t140 * t168 + t689 * (t65 * t128 * t60 * t16 + t80 * t60 * t164 * t16) + t99 * (t80 * t1001 * t84 * t60 * t16 - t65 * t265 * t1051 * t16 - t567 * t60 * t16) + t118 * (-t66 * t86 * (t432 + t781) - t262 * t86 * (t22 * t923 + t470) - t569) - t132 * t567 * t16 - t651 - t980 * t979 - t882 * t984;
    real_type t1120 = t52 * t415;
    result__[ 24  ] = OMEGA__[24] + t18 * t135 * t134 + t140 * t172 * t171 - t689 * t172 * t7 * t60 * t52 - t146 * t65 * t815 * t814 + t99 * (t80 * t52 * (t94 * t86 * t87 + t265) * t16 + t60 * t218 * t16) + t118 * (-t135 * t7 * (-t86 * t84 * t52 + t60 * t94 * t88) - t15 * t595 * t1120) - t136 * t15 * t134 + t967 * t80 * t16 - t865 * t65 * t16;
    real_type t1132 = t967 * t16;
    result__[ 25  ] = OMEGA__[25] + t1132;
    real_type t1135 = t865 * t15;
    result__[ 26  ] = t1048 * t643 - t1135 * t595 + OMEGA__[26];
    result__[ 27  ] = t1048 * t595 + t1135 * t643 + OMEGA__[27];
    result__[ 28  ] = -t980 * t16 + OMEGA__[28];
    real_type t1143 = t875 * t15;
    real_type t1145 = t882 * t15;
    result__[ 29  ] = t1143 * t643 - t1145 * t595 + OMEGA__[29];
    result__[ 30  ] = t1143 * t595 + t1145 * t643 + OMEGA__[30];
    result__[ 31  ] = -t823 * t15 * t643 + t1132 * t850 + OMEGA__[31];
    result__[ 32  ] = OMEGA__[32] + t840 * (-t1043 * t16 - t834) + t967 * t822 * t7 * t858 - t855 * t849 * t837 * t16 - t865 * t849 * t831 * t16;
    real_type t1171 = ModelPars[139];
    real_type t1174 = ModelPars[120];
    real_type t1176 = ModelPars[212];
    result__[ 33  ] = t1171 * (2 * XL__[33] - 2 * ModelPars[5]) + OMEGA__[33] - LL__[34] * t1176 * t15 * t7 * t1174;
    real_type t1187 = ModelPars[209];
    result__[ 34  ] = t1171 * (2 * XL__[34] - 2 * ModelPars[27]) + OMEGA__[34] - LL__[33] * t1187 * t16;
    real_type t1197 = ModelPars[210];
    result__[ 35  ] = t1171 * (2 * XL__[35] - 2 * ModelPars[29]) + OMEGA__[35] - LL__[35] * t1197 * t16;
    real_type t1205 = ModelPars[211];
    result__[ 36  ] = -LL__[36] * t1205 * t16 + 2 * t1171 * XL__[36] + OMEGA__[36];
    result__[ 37  ] = -LL__[37] * t16 + OMEGA__[37];
    result__[ 38  ] = -LL__[38] * t16 + OMEGA__[38];
    real_type t1218 = ALIAS_kappa_L(QR__[0]);
    real_type t1221 = 1.0 / (t1218 * XR__[37] - 1);
    real_type t1222 = XR__[38];
    real_type t1223 = cos(t1222);
    real_type t1226 = sin(t1222);
    real_type t1229 = XR__[0] * t1223 - XR__[1] * t1226;
    real_type t1230 = t1229 * t1221;
    real_type t1231 = LR__[0];
    real_type t1234 = XR__[7];
    real_type t1235 = cos(t1234);
    real_type t1237 = t25 * t23 * t1235;
    real_type t1238 = sin(t1234);
    real_type t1239 = t34 * t1238;
    real_type t1240 = XR__[8];
    real_type t1241 = t52 * t1240;
    real_type t1242 = -t1237 + t1239 - t38 + t42 + t47 + t50 + t53 - t1241 - t57;
    real_type t1243 = XR__[3];
    real_type t1244 = cos(t1243);
    real_type t1245 = t1244 * t1242;
    real_type t1247 = XR__[4] + t63;
    real_type t1248 = cos(t1247);
    real_type t1249 = t1248 * t1230;
    real_type t1250 = t1249 * t1245;
    real_type t1251 = t34 * t1235;
    real_type t1253 = t25 * t23 * t1238;
    real_type t1254 = t1251 + t1253 + t71 - t73 - t75 + t77;
    real_type t1255 = t1244 * t1254;
    real_type t1256 = sin(t1247);
    real_type t1258 = t1256 * t1255 * t1230;
    real_type t1259 = t1244 * t17;
    real_type t1260 = XR__[5];
    real_type t1261 = t1260 * t1259;
    real_type t1262 = sin(t1243);
    real_type t1263 = t92 * t1262;
    real_type t1264 = XR__[6];
    real_type t1266 = t1264 * t1263 + t1261;
    real_type t1269 = LR__[4];
    real_type t1271 = t46 * t1238;
    real_type t1273 = t1262 * (t1237 + t1271 + t38 - t42 + t102 - t50 - t53 + t1241 + t57);
    real_type t1278 = t1262 * t17;
    real_type t1279 = t1260 * t1278;
    real_type t1280 = t1264 * t111;
    real_type t1285 = -t1249 * t1273 - t1256 * t1254 * t1262 * t1230 - t1229 * t1221 * (t1244 * t1280 + t1279);
    real_type t1286 = LR__[5];
    real_type t1288 = t92 * t1230;
    real_type t1289 = t1248 * t1264;
    real_type t1290 = LR__[6];
    real_type t1293 = t1237 - t1239;
    real_type t1296 = t1251 + t1253;
    real_type t1298 = t1256 * t1296 * t1230;
    real_type t1300 = LR__[7];
    real_type t1302 = t1221 * t52;
    real_type t1303 = t1256 * t1229;
    real_type t1304 = LR__[8];
    result__[ 39  ] = OMEGA__[39] + t1231 * t17 * t1230 - t1269 * (-t1266 * t1230 + t1250 - t1258) - t1286 * t1285 - t1290 * t1289 * t1288 - t1300 * (-t1248 * t1293 * t1230 - t1298) - t1304 * t1303 * t1302;
    real_type t1307 = LR__[1];
    real_type t1313 = LR__[3];
    real_type t1319 = -t1256 * t1242 * t1230 - t1248 * t1254 * t1230;
    real_type t1324 = t1244 * t92;
    real_type t1331 = -t1293;
    real_type t1332 = t1331 * t1262;
    real_type t1335 = -t1248 * t1296 * t1262 * t1230 - t1256 * t1332 * t1230;
    real_type t1338 = t1221 * t1262 * t52;
    real_type t1339 = t1248 * t1229;
    real_type t1340 = t1304 * t1339;
    result__[ 40  ] = t1307 * t17 * t1230 - t1313 * (t1266 * t1230 - t1250 + t1258) - t1286 * t1319 - t1290 * (-t1256 * t1264 * t1262 * t1288 - t1324 * t1230) - t1300 * t1335 - t1340 * t1338;
    real_type t1344 = t1235 * t1235;
    real_type t1347 = t1238 * t194 * t1235;
    real_type t1349 = t52 * t215 * t1240;
    real_type t1350 = t184 * t1344 + t1347 - t1349 - t179 + t199 - t201 + t209 + t213 + t219 - t220 - t221;
    real_type t1351 = t1350 * t1244;
    real_type t1353 = t225 * t1344;
    real_type t1355 = t183 * t1238 * t1235;
    real_type t1356 = 2 * t1355;
    real_type t1357 = t1240 * t1240;
    real_type t1358 = t1357 * t52;
    real_type t1359 = t1358 / 2;
    real_type t1361 = t52 * t244 * t1240;
    real_type t1362 = t1353 + t1356 + t230 - t233 + t236 - t238 + t240 + t1359 - t1361 + t249 + t203 + t250 + t255 + t204 - t205 + t257 - t259;
    real_type t1364 = t1256 * t1230;
    real_type t1367 = t1260 * t1244;
    real_type t1371 = -t1264 * t276 * t1262 - t1254 * t1367;
    real_type t1378 = -t52 * t1240 * t87 + t287 - t290 - t291;
    real_type t1379 = t1378 * t1262;
    real_type t1381 = -t1242 * t1367 - t1264 * t1379;
    real_type t1384 = t1248 * t1248;
    real_type t1390 = t1262 * t1362;
    real_type t1392 = t1384 * t1230;
    real_type t1395 = t1262 * t1350;
    real_type t1399 = t1244 * t1244;
    real_type t1403 = t1260 * t1262;
    real_type t1406 = t1264 * t1378;
    real_type t1414 = t1262 * t1244;
    real_type t1415 = t1254 * t1260;
    real_type t1418 = t1264 * t276;
    real_type t1423 = t1260 * t1264;
    real_type t1426 = t1260 * t1260;
    real_type t1427 = t1426 * t17;
    real_type t1428 = t1353 + t1356 + t230 - t233 - t1427 + t236 + t342 - t343 + t203 + t204 - t205 + t256 - t344;
    real_type t1431 = t1264 * t92;
    real_type t1441 = 2 * t1361;
    real_type t1442 = t1235 * t1238 * t375 + t1344 * t367 - t1358 + t1441 - t256 + t258 - t342 + t381 + t386 + t388 + t389 + t395 - t396 - t397 + t399 - t400 + t401;
    real_type t1449 = t1235 * t1238 * t367 + t1240 * t417 + t1344 * t384 + t408 + t410 - t412 + t414 + t419 + t424 - t425 - t426;
    real_type t1453 = t431 * t1260 * t1235;
    real_type t1454 = 2 * t1453;
    real_type t1455 = t1260 * t437;
    real_type t1457 = 2 * t1241;
    real_type t1465 = t1260 * t443;
    real_type t1477 = t1238 * t25 * t1260 * t23;
    real_type t1478 = 2 * t1477;
    real_type t1492 = t1235 * t1238 * t510 + t1344 * t504 - t1427 + t203 + t204 - t205 + t236 + t256 + t342 - t343 - t344 + t516 + t521;
    real_type t1497 = t1244 * t1403 * t1264 * t524 + t1399 * t1492 + t1358 + t1427 - t1441 - t342 + t344 - t389 + t397 + t529 + t531;
    real_type t1507 = -t1378;
    real_type t1510 = t1264 * t1507;
    real_type t1511 = t1262 * t1510;
    real_type t1522 = t567 * t1262 * t1230;
    real_type t1538 = t1221 * t1264;
    real_type t1539 = t1229 * t1538;
    real_type t1540 = t273 * t1244;
    real_type t1545 = -t1230 * t1262 * t273 + t1256 * t1540 * t1539;
    real_type t1546 = LR__[9];
    real_type t1548 = t1221 * t1262;
    real_type t1549 = t565 * t1229;
    real_type t1550 = LR__[10];
    result__[ 41  ] = -t1231 * t1285 - t1307 * t1319 - t1313 * (t1351 * t1230 + t1248 * (-2 * t1364 * t1362 * t1244 - t1371 * t1230) - t1256 * t1381 * t1230 - 2 * t1384 * t1351 * t1230) - t1269 * (-2 * t1392 * t1244 * t1390 + t1248 * (2 * t1364 * t1244 * t1395 - (2 * t1264 * t1378 * t1399 - 2 * t1403 * t1245 - t1406) * t1230) - t1256 * (-2 * t1264 * t276 * t1399 + 2 * t1415 * t1414 + t1418) * t1230 - t1229 * t1221 * (-t1244 * t1262 * t1428 - 2 * t1423 * t92 * t1399 + t1260 * t1431)) - t1286 * (-t1392 * t1399 * t1442 + t1248 * (-t1364 * t1399 * t1449 - t1229 * t1221 * (t1399 * (-t1454 + t1238 * t1455 + t1260 * (t440 + t444 + t445 - t446 + t447 - t1457 - t449)) + 2 * t1414 * t1264 * t1378 + t1454 + t1238 * t1465 + t1260 * (-t440 + t459 - t445 + t446 - t447 + t1457 + t449))) - t1303 * t1221 * (t1399 * (t1235 * t1465 + t1260 * t476 - t1478) + t1414 * t1264 * t491 + t1235 * t1455 + t1478 + t1260 * t496) - t1229 * t1221 * t1497) - t1290 * (-t1248 * (t543 * t1244 - t1423 * t1263) * t1230 + t1364 * t1507 * t1244 + t1511 * t1230) - t1300 * (t1248 * t1332 * t1260 * t1230 - t1256 * t1403 * t1296 * t1230 - t1522) - t1304 * (2 * t1256 * t52 * t1229 * t1221 * (-t1264 * t1244 * t87 / 2 + t1403 / 2) + t1262 * t218 * t1230) - t1546 * t1545 + t1550 * t1549 * t1548;
    result__[ 42  ] = LR__[19] * t1230 + OMEGA__[40];
    result__[ 43  ] = LR__[20] * t1230;
    result__[ 44  ] = LR__[21] * t1230;
    result__[ 45  ] = LR__[22] * t1230;
    result__[ 46  ] = LR__[23] * t1230;
    result__[ 47  ] = LR__[24] * t1230;
    result__[ 48  ] = LR__[25] * t1230;
    result__[ 49  ] = LR__[26] * t1230;
    result__[ 50  ] = LR__[27] * t1230;
    result__[ 51  ] = LR__[28] * t1230;
    result__[ 52  ] = LR__[29] * t1230;
    result__[ 53  ] = LR__[30] * t1230;
    result__[ 54  ] = LR__[31] * t1230;
    result__[ 55  ] = LR__[32] * t1230;
    real_type t1569 = t1221 * t1244;
    real_type t1577 = t1550 * t565 * t1230;
    result__[ 56  ] = t1300 * t565 * t1230 + t1269 * t1549 * t1569 + t1286 * t1549 * t1548 + t1577;
    real_type t1578 = t1248 * t273;
    real_type t1590 = t1546 * t1229 * t1221 * t273;
    result__[ 57  ] = -t1313 * t1578 * t1539 - t1269 * (-t1364 * t1262 * t273 * t1264 - t1540 * t1230) - t1286 * t1545 + t1590;
    real_type t1591 = t46 * t1235;
    real_type t1592 = t1591 - t1253 + t668 + t73 + t75 - t77;
    real_type t1593 = t1592 * t1244;
    real_type t1602 = t1242 * t1262;
    real_type t1605 = t1592 * t1262;
    real_type t1612 = LR__[2];
    real_type t1617 = t692 * t1344 - 2 * t1347 + 2 * t1349 + t412 - t419 + t425 + t426 + t696 + t697 + t701 - t703;
    real_type t1629 = t1344 * t714 + 4 * t1355 + t1358 - t1441 + t256 - t258 + t342 - t389 + t396 + t397 + t400 - t401 + t529 + t718 - t719 + t720 + t721;
    real_type t1634 = t194 * t1344 - t1356 + t1427 - t203 - t204 + t205 + t233 + t258 - t342 + t343 + t727 + t728;
    real_type t1651 = t1378 * t1244;
    real_type t1665 = t1235 * t1238 * t384 + t1344 * t380 + t1358 - t1441 + t256 - t258 + t342 - t389 + t396 + t397 + t400 - t401 + t529 + t720 + t721 + t760 + t762;
    real_type t1668 = t1260 * t46;
    real_type t1671 = t1235 * t1668 + t1260 * t768 - t1477;
    real_type t1680 = t1238 * t1668;
    real_type t1691 = t1235 * t1238 * t504 + t1344 * t519 + t1349 + t179 - t213 + t220 + t221 + t792 + t794 + t797 + t799;
    real_type t1697 = t1248 * t1378 * t1230;
    real_type t1701 = t1260 * t92 * t1230;
    real_type t1704 = t1221 * t88;
    real_type t1705 = t1264 * t1229;
    real_type t1712 = XR__[15] * t1229;
    real_type t1713 = LR__[11];
    real_type t1716 = XR__[16];
    real_type t1717 = sin(t1716);
    real_type t1719 = cos(t1716);
    real_type t1721 = t1717 * t1244 - t1719 * t1262;
    real_type t1724 = t1256 * t1264 * t1721 * t1230;
    real_type t1727 = t1244 * t1719 + t1262 * t1717;
    real_type t1728 = t1727 * t1230;
    real_type t1730 = LR__[12];
    real_type t1733 = XR__[11];
    real_type t1736 = t1717 * t849;
    real_type t1737 = XR__[10];
    real_type t1741 = LR__[14];
    real_type t1744 = t1719 * t849;
    real_type t1751 = LR__[15];
    real_type t1755 = -t868 - XR__[14];
    real_type t1757 = XR__[13];
    real_type t1760 = LR__[17];
    real_type t1767 = LR__[18];
    result__[ 58  ] = -t1307 * (-t1250 - t1256 * t1593 * t1230 - t1229 * t1221 * (t1262 * t1280 - t1261)) - t1612 * (-t1248 * t1602 * t1230 - t1256 * t1605 * t1230 - (t1264 * t1324 - t1279) * t1230) - t1313 * (t1248 * (2 * t1230 * t1260 * t1242 - t1256 * t1617 * t1230) - 2 * t1364 * t1415 - t1384 * t1229 * t1221 * t1629 - t1229 * t1221 * t1634) - t1269 * (2 * t1384 * t1395 * t1230 + t1248 * (2 * t1364 * t1390 - (-t1264 * t276 * t1244 + t1254 * t1403) * t1230) - t1256 * (t1260 * t1602 - t1264 * t1651) * t1230 - t1395 * t1230) - t1286 * (-t1392 * t1244 * t1449 + t1248 * (-t1364 * t1244 * t1665 - t1229 * t1221 * (t1262 * t1264 * t773 + t1244 * t1671)) - t1303 * t1221 * (t1244 * (t1453 + t1680 + t1260 * (-t42 + t102 - t50 + t38 - t53 + t1241 + t57)) + t1511) - t1230 * t1244 * t1691) - t1290 * (-t1256 * t807 * t1230 - t1697 + t1701) + t1304 * t1248 * t1705 * t1704 - t1546 * t1578 * t1539 - t1713 * t1712 * t1548 - t1730 * (t1724 - t1728) + t1741 * ((t844 * t1719 - t1733 - t843) * t1244 - t1262 * (t1736 - t1737)) * t1230 + t1751 * ((t1744 + t843 + t1733) * t1262 + t1244 * (t844 * t1717 + t1737)) * t1230 + t1760 * (t1755 * t1244 + t1262 * t1757) * t1230 + t1767 * (t1244 * t1757 - t1755 * t1262) * t1230;
    real_type t1779 = -t1248 * t1605 * t1230 - t1364 * t1273;
    real_type t1783 = t1364 * t1245;
    real_type t1804 = t1260 * t34;
    real_type t1836 = t244 - t1240;
    real_type t1840 = LR__[13];
    real_type t1848 = t1238 * t28;
    real_type t1850 = t1235 * t28;
    real_type t1852 = t1249 * t1848 - t1364 * t1850;
    real_type t1853 = LR__[16];
    real_type t1857 = t1249 * t1850 + t1364 * t1848;
    result__[ 59  ] = -t1231 * (-t1248 * t1242 * t1230 - t1256 * t1592 * t1230) - t1307 * t1779 - t1612 * (t1248 * t1593 * t1230 - t1783) - t1313 * (-t1248 * t1418 * t1230 - t1256 * t1406 * t1230) - t1269 * (t1248 * t1381 * t1230 - t1256 * t1371 * t1230 + 2 * t1230 * t1244 * (-t238 + t1359 - t1361 - t240 + t249 + t250 + t914 + t915)) - t1286 * (-t1339 * t1221 * (t1244 * t1510 + t1262 * (-t1453 + t1238 * t1804 + t1260 * (t42 + t47 + t50 - t38 + t53 - t1241 - t57))) - t1303 * t1221 * (t1244 * t1264 * t934 + t1262 * t1671) - t1230 * t1262 * (t389 - t1358 + t1441 + t342 + t395 - t397 + t942 - t344)) + t1290 * t1510 * t1230 + t1300 * t952 * t1230 + t1304 * t218 * t1230 - t1590 - t1577 + t1713 * t1303 * t1538 - t1730 * t1289 * t1728 - t1840 * (-t1248 * t1836 * t1230 - t1256 * t415 * t1230) - t1751 * (-t1248 * t215 * t1230 - t1256 * t1836 * t1230) - t1853 * t1852 - t1767 * t1857;
    real_type t1873 = t1591 - t1253;
    result__[ 60  ] = -t1307 * t1278 * t1230 + t1612 * t1259 * t1230 + t1313 * t1431 * t1230 - t1269 * (t1248 * t1255 * t1230 + t1783) - t1286 * t1779 - t1290 * t1256 * t1264 * t1288 - t1300 * (-t1248 * t1873 * t1230 - t1256 * t1293 * t1230) + t1340 * t1302 + t1751 * t1230 + t1767 * t1230;
    real_type t1910 = -t1727;
    real_type t1915 = t1741 * t1229;
    result__[ 61  ] = t1307 * t1324 * t1230 + t1612 * t1262 * t1229 * t1221 * t92 - t1313 * (-t1256 * t1018 * t1230 - t1697 + t1701) - t1269 * (t1248 * t1023 * t1262 * t1230 + t1256 * t1379 * t1230) - t1286 * (-t1249 * t1244 * t1031 - t1256 * t1651 * t1230) + t1290 * t1038 * t1230 - t1713 * t1248 * t1230 + t1730 * t1256 * t1910 * t1230 + t1915 * t1221 * t87;
    real_type t1917 = t1237 + t1271;
    result__[ 62  ] = -t1231 * (-t1339 * t1221 * t1917 - t1298) - t1307 * t1335 - t1612 * (t1248 * t1296 * t1244 * t1230 + t1256 * t1244 * t1331 * t1230) - t1269 * (t1256 * t1873 * t1260 * t1244 * t1230 - t1248 * t1367 * t1917 * t1230 - t567 * t1244 * t1230) - t1286 * (-t1249 * t1262 * (t1453 + t1680) - t1364 * t1262 * (t1235 * t1804 + t1477) - t1522) + t1300 * t567 * t1230 + t1577 + t1853 * t1852 + t1767 * t1857;
    result__[ 63  ] = -t1231 * t1303 * t1302 - t1307 * t1339 * t1338 + t1612 * t1339 * t1221 * t1244 * t52 + t1313 * t1248 * t1705 * t1704 - t1269 * (t1256 * t52 * (t1264 * t1262 * t87 + t1367) * t1230 + t1244 * t218 * t1230) - t1286 * (-t1303 * t1221 * (t1244 * t1264 * t88 - t1262 * t1260 * t52) - t1229 * t1548 * t1120) + t1304 * t1229 * t1302 - t1840 * t1256 * t1230 + t1751 * t1248 * t1230;
    real_type t1995 = t1840 * t1230;
    result__[ 64  ] = -t1995;
    real_type t1997 = t1751 * t1229;
    result__[ 65  ] = t1997 * t1548 - t1915 * t1569;
    result__[ 66  ] = -t1915 * t1548 - t1997 * t1569;
    result__[ 67  ] = t1853 * t1230;
    real_type t2001 = t1760 * t1229;
    real_type t2003 = t1767 * t1229;
    result__[ 68  ] = t2003 * t1548 - t2001 * t1569;
    result__[ 69  ] = -t2001 * t1548 - t2003 * t1569;
    result__[ 70  ] = t1713 * t1229 * t1569 - t1995 * t1736;
    result__[ 71  ] = -t1730 * (-t1910 * t1230 - t1724) - t1840 * t1712 * t1221 * t1744 + t1741 * t849 * t1727 * t1230 + t1751 * t849 * t1721 * t1230;
    result__[ 72  ] = LR__[34] * t1176 * t1229 * t1221 * t1174;
    result__[ 73  ] = LR__[33] * t1187 * t1230;
    result__[ 74  ] = LR__[35] * t1197 * t1230;
    result__[ 75  ] = LR__[36] * t1205 * t1230;
    result__[ 76  ] = LR__[37] * t1230 + OMEGA__[41];
    result__[ 77  ] = LR__[38] * t1230 + OMEGA__[42];
    #ifdef MECHATRONIX_DEBUG
    CHECK_NAN(result__,"adjointBC_eval",78);
    #endif
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  integer
  Straight::DadjointBCDx_numRows() const
  { return 78; }

  integer
  Straight::DadjointBCDx_numCols() const
  { return 78; }

  integer
  Straight::DadjointBCDx_nnz() const
  { return 456; }

  void
  Straight::DadjointBCDx_pattern(
    integer iIndex[],
    integer jIndex[]
  ) const {
    iIndex[ 0  ] = 0   ; jIndex[ 0  ] = 0   ;
    iIndex[ 1  ] = 0   ; jIndex[ 1  ] = 1   ;
    iIndex[ 2  ] = 0   ; jIndex[ 2  ] = 3   ;
    iIndex[ 3  ] = 0   ; jIndex[ 3  ] = 4   ;
    iIndex[ 4  ] = 0   ; jIndex[ 4  ] = 5   ;
    iIndex[ 5  ] = 0   ; jIndex[ 5  ] = 6   ;
    iIndex[ 6  ] = 0   ; jIndex[ 6  ] = 7   ;
    iIndex[ 7  ] = 0   ; jIndex[ 7  ] = 8   ;
    iIndex[ 8  ] = 0   ; jIndex[ 8  ] = 37  ;
    iIndex[ 9  ] = 0   ; jIndex[ 9  ] = 38  ;
    iIndex[ 10 ] = 1   ; jIndex[ 10 ] = 0   ;
    iIndex[ 11 ] = 1   ; jIndex[ 11 ] = 1   ;
    iIndex[ 12 ] = 1   ; jIndex[ 12 ] = 3   ;
    iIndex[ 13 ] = 1   ; jIndex[ 13 ] = 4   ;
    iIndex[ 14 ] = 1   ; jIndex[ 14 ] = 5   ;
    iIndex[ 15 ] = 1   ; jIndex[ 15 ] = 6   ;
    iIndex[ 16 ] = 1   ; jIndex[ 16 ] = 7   ;
    iIndex[ 17 ] = 1   ; jIndex[ 17 ] = 8   ;
    iIndex[ 18 ] = 1   ; jIndex[ 18 ] = 37  ;
    iIndex[ 19 ] = 1   ; jIndex[ 19 ] = 38  ;
    iIndex[ 20 ] = 2   ; jIndex[ 20 ] = 0   ;
    iIndex[ 21 ] = 2   ; jIndex[ 21 ] = 1   ;
    iIndex[ 22 ] = 2   ; jIndex[ 22 ] = 3   ;
    iIndex[ 23 ] = 2   ; jIndex[ 23 ] = 4   ;
    iIndex[ 24 ] = 2   ; jIndex[ 24 ] = 5   ;
    iIndex[ 25 ] = 2   ; jIndex[ 25 ] = 6   ;
    iIndex[ 26 ] = 2   ; jIndex[ 26 ] = 7   ;
    iIndex[ 27 ] = 2   ; jIndex[ 27 ] = 8   ;
    iIndex[ 28 ] = 2   ; jIndex[ 28 ] = 37  ;
    iIndex[ 29 ] = 2   ; jIndex[ 29 ] = 38  ;
    iIndex[ 30 ] = 3   ; jIndex[ 30 ] = 0   ;
    iIndex[ 31 ] = 3   ; jIndex[ 31 ] = 1   ;
    iIndex[ 32 ] = 3   ; jIndex[ 32 ] = 37  ;
    iIndex[ 33 ] = 3   ; jIndex[ 33 ] = 38  ;
    iIndex[ 34 ] = 4   ; jIndex[ 34 ] = 0   ;
    iIndex[ 35 ] = 4   ; jIndex[ 35 ] = 1   ;
    iIndex[ 36 ] = 4   ; jIndex[ 36 ] = 37  ;
    iIndex[ 37 ] = 4   ; jIndex[ 37 ] = 38  ;
    iIndex[ 38 ] = 5   ; jIndex[ 38 ] = 0   ;
    iIndex[ 39 ] = 5   ; jIndex[ 39 ] = 1   ;
    iIndex[ 40 ] = 5   ; jIndex[ 40 ] = 37  ;
    iIndex[ 41 ] = 5   ; jIndex[ 41 ] = 38  ;
    iIndex[ 42 ] = 6   ; jIndex[ 42 ] = 0   ;
    iIndex[ 43 ] = 6   ; jIndex[ 43 ] = 1   ;
    iIndex[ 44 ] = 6   ; jIndex[ 44 ] = 37  ;
    iIndex[ 45 ] = 6   ; jIndex[ 45 ] = 38  ;
    iIndex[ 46 ] = 7   ; jIndex[ 46 ] = 0   ;
    iIndex[ 47 ] = 7   ; jIndex[ 47 ] = 1   ;
    iIndex[ 48 ] = 7   ; jIndex[ 48 ] = 37  ;
    iIndex[ 49 ] = 7   ; jIndex[ 49 ] = 38  ;
    iIndex[ 50 ] = 8   ; jIndex[ 50 ] = 0   ;
    iIndex[ 51 ] = 8   ; jIndex[ 51 ] = 1   ;
    iIndex[ 52 ] = 8   ; jIndex[ 52 ] = 37  ;
    iIndex[ 53 ] = 8   ; jIndex[ 53 ] = 38  ;
    iIndex[ 54 ] = 9   ; jIndex[ 54 ] = 0   ;
    iIndex[ 55 ] = 9   ; jIndex[ 55 ] = 1   ;
    iIndex[ 56 ] = 9   ; jIndex[ 56 ] = 37  ;
    iIndex[ 57 ] = 9   ; jIndex[ 57 ] = 38  ;
    iIndex[ 58 ] = 10  ; jIndex[ 58 ] = 0   ;
    iIndex[ 59 ] = 10  ; jIndex[ 59 ] = 1   ;
    iIndex[ 60 ] = 10  ; jIndex[ 60 ] = 37  ;
    iIndex[ 61 ] = 10  ; jIndex[ 61 ] = 38  ;
    iIndex[ 62 ] = 11  ; jIndex[ 62 ] = 0   ;
    iIndex[ 63 ] = 11  ; jIndex[ 63 ] = 1   ;
    iIndex[ 64 ] = 11  ; jIndex[ 64 ] = 37  ;
    iIndex[ 65 ] = 11  ; jIndex[ 65 ] = 38  ;
    iIndex[ 66 ] = 12  ; jIndex[ 66 ] = 0   ;
    iIndex[ 67 ] = 12  ; jIndex[ 67 ] = 1   ;
    iIndex[ 68 ] = 12  ; jIndex[ 68 ] = 37  ;
    iIndex[ 69 ] = 12  ; jIndex[ 69 ] = 38  ;
    iIndex[ 70 ] = 13  ; jIndex[ 70 ] = 0   ;
    iIndex[ 71 ] = 13  ; jIndex[ 71 ] = 1   ;
    iIndex[ 72 ] = 13  ; jIndex[ 72 ] = 37  ;
    iIndex[ 73 ] = 13  ; jIndex[ 73 ] = 38  ;
    iIndex[ 74 ] = 14  ; jIndex[ 74 ] = 0   ;
    iIndex[ 75 ] = 14  ; jIndex[ 75 ] = 1   ;
    iIndex[ 76 ] = 14  ; jIndex[ 76 ] = 37  ;
    iIndex[ 77 ] = 14  ; jIndex[ 77 ] = 38  ;
    iIndex[ 78 ] = 15  ; jIndex[ 78 ] = 0   ;
    iIndex[ 79 ] = 15  ; jIndex[ 79 ] = 1   ;
    iIndex[ 80 ] = 15  ; jIndex[ 80 ] = 37  ;
    iIndex[ 81 ] = 15  ; jIndex[ 81 ] = 38  ;
    iIndex[ 82 ] = 16  ; jIndex[ 82 ] = 0   ;
    iIndex[ 83 ] = 16  ; jIndex[ 83 ] = 1   ;
    iIndex[ 84 ] = 16  ; jIndex[ 84 ] = 37  ;
    iIndex[ 85 ] = 16  ; jIndex[ 85 ] = 38  ;
    iIndex[ 86 ] = 17  ; jIndex[ 86 ] = 0   ;
    iIndex[ 87 ] = 17  ; jIndex[ 87 ] = 1   ;
    iIndex[ 88 ] = 17  ; jIndex[ 88 ] = 3   ;
    iIndex[ 89 ] = 17  ; jIndex[ 89 ] = 37  ;
    iIndex[ 90 ] = 17  ; jIndex[ 90 ] = 38  ;
    iIndex[ 91 ] = 18  ; jIndex[ 91 ] = 0   ;
    iIndex[ 92 ] = 18  ; jIndex[ 92 ] = 1   ;
    iIndex[ 93 ] = 18  ; jIndex[ 93 ] = 3   ;
    iIndex[ 94 ] = 18  ; jIndex[ 94 ] = 4   ;
    iIndex[ 95 ] = 18  ; jIndex[ 95 ] = 6   ;
    iIndex[ 96 ] = 18  ; jIndex[ 96 ] = 37  ;
    iIndex[ 97 ] = 18  ; jIndex[ 97 ] = 38  ;
    iIndex[ 98 ] = 19  ; jIndex[ 98 ] = 0   ;
    iIndex[ 99 ] = 19  ; jIndex[ 99 ] = 1   ;
    iIndex[ 100 ] = 19  ; jIndex[ 100 ] = 3   ;
    iIndex[ 101 ] = 19  ; jIndex[ 101 ] = 4   ;
    iIndex[ 102 ] = 19  ; jIndex[ 102 ] = 5   ;
    iIndex[ 103 ] = 19  ; jIndex[ 103 ] = 6   ;
    iIndex[ 104 ] = 19  ; jIndex[ 104 ] = 7   ;
    iIndex[ 105 ] = 19  ; jIndex[ 105 ] = 8   ;
    iIndex[ 106 ] = 19  ; jIndex[ 106 ] = 10  ;
    iIndex[ 107 ] = 19  ; jIndex[ 107 ] = 11  ;
    iIndex[ 108 ] = 19  ; jIndex[ 108 ] = 13  ;
    iIndex[ 109 ] = 19  ; jIndex[ 109 ] = 14  ;
    iIndex[ 110 ] = 19  ; jIndex[ 110 ] = 15  ;
    iIndex[ 111 ] = 19  ; jIndex[ 111 ] = 16  ;
    iIndex[ 112 ] = 19  ; jIndex[ 112 ] = 37  ;
    iIndex[ 113 ] = 19  ; jIndex[ 113 ] = 38  ;
    iIndex[ 114 ] = 20  ; jIndex[ 114 ] = 0   ;
    iIndex[ 115 ] = 20  ; jIndex[ 115 ] = 1   ;
    iIndex[ 116 ] = 20  ; jIndex[ 116 ] = 3   ;
    iIndex[ 117 ] = 20  ; jIndex[ 117 ] = 4   ;
    iIndex[ 118 ] = 20  ; jIndex[ 118 ] = 5   ;
    iIndex[ 119 ] = 20  ; jIndex[ 119 ] = 6   ;
    iIndex[ 120 ] = 20  ; jIndex[ 120 ] = 7   ;
    iIndex[ 121 ] = 20  ; jIndex[ 121 ] = 8   ;
    iIndex[ 122 ] = 20  ; jIndex[ 122 ] = 16  ;
    iIndex[ 123 ] = 20  ; jIndex[ 123 ] = 37  ;
    iIndex[ 124 ] = 20  ; jIndex[ 124 ] = 38  ;
    iIndex[ 125 ] = 21  ; jIndex[ 125 ] = 0   ;
    iIndex[ 126 ] = 21  ; jIndex[ 126 ] = 1   ;
    iIndex[ 127 ] = 21  ; jIndex[ 127 ] = 3   ;
    iIndex[ 128 ] = 21  ; jIndex[ 128 ] = 4   ;
    iIndex[ 129 ] = 21  ; jIndex[ 129 ] = 6   ;
    iIndex[ 130 ] = 21  ; jIndex[ 130 ] = 7   ;
    iIndex[ 131 ] = 21  ; jIndex[ 131 ] = 8   ;
    iIndex[ 132 ] = 21  ; jIndex[ 132 ] = 37  ;
    iIndex[ 133 ] = 21  ; jIndex[ 133 ] = 38  ;
    iIndex[ 134 ] = 22  ; jIndex[ 134 ] = 0   ;
    iIndex[ 135 ] = 22  ; jIndex[ 135 ] = 1   ;
    iIndex[ 136 ] = 22  ; jIndex[ 136 ] = 3   ;
    iIndex[ 137 ] = 22  ; jIndex[ 137 ] = 4   ;
    iIndex[ 138 ] = 22  ; jIndex[ 138 ] = 5   ;
    iIndex[ 139 ] = 22  ; jIndex[ 139 ] = 8   ;
    iIndex[ 140 ] = 22  ; jIndex[ 140 ] = 16  ;
    iIndex[ 141 ] = 22  ; jIndex[ 141 ] = 37  ;
    iIndex[ 142 ] = 22  ; jIndex[ 142 ] = 38  ;
    iIndex[ 143 ] = 23  ; jIndex[ 143 ] = 0   ;
    iIndex[ 144 ] = 23  ; jIndex[ 144 ] = 1   ;
    iIndex[ 145 ] = 23  ; jIndex[ 145 ] = 3   ;
    iIndex[ 146 ] = 23  ; jIndex[ 146 ] = 4   ;
    iIndex[ 147 ] = 23  ; jIndex[ 147 ] = 5   ;
    iIndex[ 148 ] = 23  ; jIndex[ 148 ] = 7   ;
    iIndex[ 149 ] = 23  ; jIndex[ 149 ] = 37  ;
    iIndex[ 150 ] = 23  ; jIndex[ 150 ] = 38  ;
    iIndex[ 151 ] = 24  ; jIndex[ 151 ] = 0   ;
    iIndex[ 152 ] = 24  ; jIndex[ 152 ] = 1   ;
    iIndex[ 153 ] = 24  ; jIndex[ 153 ] = 3   ;
    iIndex[ 154 ] = 24  ; jIndex[ 154 ] = 4   ;
    iIndex[ 155 ] = 24  ; jIndex[ 155 ] = 5   ;
    iIndex[ 156 ] = 24  ; jIndex[ 156 ] = 6   ;
    iIndex[ 157 ] = 24  ; jIndex[ 157 ] = 37  ;
    iIndex[ 158 ] = 24  ; jIndex[ 158 ] = 38  ;
    iIndex[ 159 ] = 25  ; jIndex[ 159 ] = 0   ;
    iIndex[ 160 ] = 25  ; jIndex[ 160 ] = 1   ;
    iIndex[ 161 ] = 25  ; jIndex[ 161 ] = 37  ;
    iIndex[ 162 ] = 25  ; jIndex[ 162 ] = 38  ;
    iIndex[ 163 ] = 26  ; jIndex[ 163 ] = 0   ;
    iIndex[ 164 ] = 26  ; jIndex[ 164 ] = 1   ;
    iIndex[ 165 ] = 26  ; jIndex[ 165 ] = 3   ;
    iIndex[ 166 ] = 26  ; jIndex[ 166 ] = 37  ;
    iIndex[ 167 ] = 26  ; jIndex[ 167 ] = 38  ;
    iIndex[ 168 ] = 27  ; jIndex[ 168 ] = 0   ;
    iIndex[ 169 ] = 27  ; jIndex[ 169 ] = 1   ;
    iIndex[ 170 ] = 27  ; jIndex[ 170 ] = 3   ;
    iIndex[ 171 ] = 27  ; jIndex[ 171 ] = 37  ;
    iIndex[ 172 ] = 27  ; jIndex[ 172 ] = 38  ;
    iIndex[ 173 ] = 28  ; jIndex[ 173 ] = 0   ;
    iIndex[ 174 ] = 28  ; jIndex[ 174 ] = 1   ;
    iIndex[ 175 ] = 28  ; jIndex[ 175 ] = 37  ;
    iIndex[ 176 ] = 28  ; jIndex[ 176 ] = 38  ;
    iIndex[ 177 ] = 29  ; jIndex[ 177 ] = 0   ;
    iIndex[ 178 ] = 29  ; jIndex[ 178 ] = 1   ;
    iIndex[ 179 ] = 29  ; jIndex[ 179 ] = 3   ;
    iIndex[ 180 ] = 29  ; jIndex[ 180 ] = 37  ;
    iIndex[ 181 ] = 29  ; jIndex[ 181 ] = 38  ;
    iIndex[ 182 ] = 30  ; jIndex[ 182 ] = 0   ;
    iIndex[ 183 ] = 30  ; jIndex[ 183 ] = 1   ;
    iIndex[ 184 ] = 30  ; jIndex[ 184 ] = 3   ;
    iIndex[ 185 ] = 30  ; jIndex[ 185 ] = 37  ;
    iIndex[ 186 ] = 30  ; jIndex[ 186 ] = 38  ;
    iIndex[ 187 ] = 31  ; jIndex[ 187 ] = 0   ;
    iIndex[ 188 ] = 31  ; jIndex[ 188 ] = 1   ;
    iIndex[ 189 ] = 31  ; jIndex[ 189 ] = 3   ;
    iIndex[ 190 ] = 31  ; jIndex[ 190 ] = 16  ;
    iIndex[ 191 ] = 31  ; jIndex[ 191 ] = 37  ;
    iIndex[ 192 ] = 31  ; jIndex[ 192 ] = 38  ;
    iIndex[ 193 ] = 32  ; jIndex[ 193 ] = 0   ;
    iIndex[ 194 ] = 32  ; jIndex[ 194 ] = 1   ;
    iIndex[ 195 ] = 32  ; jIndex[ 195 ] = 3   ;
    iIndex[ 196 ] = 32  ; jIndex[ 196 ] = 4   ;
    iIndex[ 197 ] = 32  ; jIndex[ 197 ] = 6   ;
    iIndex[ 198 ] = 32  ; jIndex[ 198 ] = 15  ;
    iIndex[ 199 ] = 32  ; jIndex[ 199 ] = 16  ;
    iIndex[ 200 ] = 32  ; jIndex[ 200 ] = 37  ;
    iIndex[ 201 ] = 32  ; jIndex[ 201 ] = 38  ;
    iIndex[ 202 ] = 33  ; jIndex[ 202 ] = 0   ;
    iIndex[ 203 ] = 33  ; jIndex[ 203 ] = 1   ;
    iIndex[ 204 ] = 33  ; jIndex[ 204 ] = 33  ;
    iIndex[ 205 ] = 33  ; jIndex[ 205 ] = 37  ;
    iIndex[ 206 ] = 33  ; jIndex[ 206 ] = 38  ;
    iIndex[ 207 ] = 34  ; jIndex[ 207 ] = 0   ;
    iIndex[ 208 ] = 34  ; jIndex[ 208 ] = 1   ;
    iIndex[ 209 ] = 34  ; jIndex[ 209 ] = 34  ;
    iIndex[ 210 ] = 34  ; jIndex[ 210 ] = 37  ;
    iIndex[ 211 ] = 34  ; jIndex[ 211 ] = 38  ;
    iIndex[ 212 ] = 35  ; jIndex[ 212 ] = 0   ;
    iIndex[ 213 ] = 35  ; jIndex[ 213 ] = 1   ;
    iIndex[ 214 ] = 35  ; jIndex[ 214 ] = 35  ;
    iIndex[ 215 ] = 35  ; jIndex[ 215 ] = 37  ;
    iIndex[ 216 ] = 35  ; jIndex[ 216 ] = 38  ;
    iIndex[ 217 ] = 36  ; jIndex[ 217 ] = 0   ;
    iIndex[ 218 ] = 36  ; jIndex[ 218 ] = 1   ;
    iIndex[ 219 ] = 36  ; jIndex[ 219 ] = 36  ;
    iIndex[ 220 ] = 36  ; jIndex[ 220 ] = 37  ;
    iIndex[ 221 ] = 36  ; jIndex[ 221 ] = 38  ;
    iIndex[ 222 ] = 37  ; jIndex[ 222 ] = 0   ;
    iIndex[ 223 ] = 37  ; jIndex[ 223 ] = 1   ;
    iIndex[ 224 ] = 37  ; jIndex[ 224 ] = 37  ;
    iIndex[ 225 ] = 37  ; jIndex[ 225 ] = 38  ;
    iIndex[ 226 ] = 38  ; jIndex[ 226 ] = 0   ;
    iIndex[ 227 ] = 38  ; jIndex[ 227 ] = 1   ;
    iIndex[ 228 ] = 38  ; jIndex[ 228 ] = 37  ;
    iIndex[ 229 ] = 38  ; jIndex[ 229 ] = 38  ;
    iIndex[ 230 ] = 39  ; jIndex[ 230 ] = 39  ;
    iIndex[ 231 ] = 39  ; jIndex[ 231 ] = 40  ;
    iIndex[ 232 ] = 39  ; jIndex[ 232 ] = 42  ;
    iIndex[ 233 ] = 39  ; jIndex[ 233 ] = 43  ;
    iIndex[ 234 ] = 39  ; jIndex[ 234 ] = 44  ;
    iIndex[ 235 ] = 39  ; jIndex[ 235 ] = 45  ;
    iIndex[ 236 ] = 39  ; jIndex[ 236 ] = 46  ;
    iIndex[ 237 ] = 39  ; jIndex[ 237 ] = 47  ;
    iIndex[ 238 ] = 39  ; jIndex[ 238 ] = 76  ;
    iIndex[ 239 ] = 39  ; jIndex[ 239 ] = 77  ;
    iIndex[ 240 ] = 40  ; jIndex[ 240 ] = 39  ;
    iIndex[ 241 ] = 40  ; jIndex[ 241 ] = 40  ;
    iIndex[ 242 ] = 40  ; jIndex[ 242 ] = 42  ;
    iIndex[ 243 ] = 40  ; jIndex[ 243 ] = 43  ;
    iIndex[ 244 ] = 40  ; jIndex[ 244 ] = 44  ;
    iIndex[ 245 ] = 40  ; jIndex[ 245 ] = 45  ;
    iIndex[ 246 ] = 40  ; jIndex[ 246 ] = 46  ;
    iIndex[ 247 ] = 40  ; jIndex[ 247 ] = 47  ;
    iIndex[ 248 ] = 40  ; jIndex[ 248 ] = 76  ;
    iIndex[ 249 ] = 40  ; jIndex[ 249 ] = 77  ;
    iIndex[ 250 ] = 41  ; jIndex[ 250 ] = 39  ;
    iIndex[ 251 ] = 41  ; jIndex[ 251 ] = 40  ;
    iIndex[ 252 ] = 41  ; jIndex[ 252 ] = 42  ;
    iIndex[ 253 ] = 41  ; jIndex[ 253 ] = 43  ;
    iIndex[ 254 ] = 41  ; jIndex[ 254 ] = 44  ;
    iIndex[ 255 ] = 41  ; jIndex[ 255 ] = 45  ;
    iIndex[ 256 ] = 41  ; jIndex[ 256 ] = 46  ;
    iIndex[ 257 ] = 41  ; jIndex[ 257 ] = 47  ;
    iIndex[ 258 ] = 41  ; jIndex[ 258 ] = 76  ;
    iIndex[ 259 ] = 41  ; jIndex[ 259 ] = 77  ;
    iIndex[ 260 ] = 42  ; jIndex[ 260 ] = 39  ;
    iIndex[ 261 ] = 42  ; jIndex[ 261 ] = 40  ;
    iIndex[ 262 ] = 42  ; jIndex[ 262 ] = 76  ;
    iIndex[ 263 ] = 42  ; jIndex[ 263 ] = 77  ;
    iIndex[ 264 ] = 43  ; jIndex[ 264 ] = 39  ;
    iIndex[ 265 ] = 43  ; jIndex[ 265 ] = 40  ;
    iIndex[ 266 ] = 43  ; jIndex[ 266 ] = 76  ;
    iIndex[ 267 ] = 43  ; jIndex[ 267 ] = 77  ;
    iIndex[ 268 ] = 44  ; jIndex[ 268 ] = 39  ;
    iIndex[ 269 ] = 44  ; jIndex[ 269 ] = 40  ;
    iIndex[ 270 ] = 44  ; jIndex[ 270 ] = 76  ;
    iIndex[ 271 ] = 44  ; jIndex[ 271 ] = 77  ;
    iIndex[ 272 ] = 45  ; jIndex[ 272 ] = 39  ;
    iIndex[ 273 ] = 45  ; jIndex[ 273 ] = 40  ;
    iIndex[ 274 ] = 45  ; jIndex[ 274 ] = 76  ;
    iIndex[ 275 ] = 45  ; jIndex[ 275 ] = 77  ;
    iIndex[ 276 ] = 46  ; jIndex[ 276 ] = 39  ;
    iIndex[ 277 ] = 46  ; jIndex[ 277 ] = 40  ;
    iIndex[ 278 ] = 46  ; jIndex[ 278 ] = 76  ;
    iIndex[ 279 ] = 46  ; jIndex[ 279 ] = 77  ;
    iIndex[ 280 ] = 47  ; jIndex[ 280 ] = 39  ;
    iIndex[ 281 ] = 47  ; jIndex[ 281 ] = 40  ;
    iIndex[ 282 ] = 47  ; jIndex[ 282 ] = 76  ;
    iIndex[ 283 ] = 47  ; jIndex[ 283 ] = 77  ;
    iIndex[ 284 ] = 48  ; jIndex[ 284 ] = 39  ;
    iIndex[ 285 ] = 48  ; jIndex[ 285 ] = 40  ;
    iIndex[ 286 ] = 48  ; jIndex[ 286 ] = 76  ;
    iIndex[ 287 ] = 48  ; jIndex[ 287 ] = 77  ;
    iIndex[ 288 ] = 49  ; jIndex[ 288 ] = 39  ;
    iIndex[ 289 ] = 49  ; jIndex[ 289 ] = 40  ;
    iIndex[ 290 ] = 49  ; jIndex[ 290 ] = 76  ;
    iIndex[ 291 ] = 49  ; jIndex[ 291 ] = 77  ;
    iIndex[ 292 ] = 50  ; jIndex[ 292 ] = 39  ;
    iIndex[ 293 ] = 50  ; jIndex[ 293 ] = 40  ;
    iIndex[ 294 ] = 50  ; jIndex[ 294 ] = 76  ;
    iIndex[ 295 ] = 50  ; jIndex[ 295 ] = 77  ;
    iIndex[ 296 ] = 51  ; jIndex[ 296 ] = 39  ;
    iIndex[ 297 ] = 51  ; jIndex[ 297 ] = 40  ;
    iIndex[ 298 ] = 51  ; jIndex[ 298 ] = 76  ;
    iIndex[ 299 ] = 51  ; jIndex[ 299 ] = 77  ;
    iIndex[ 300 ] = 52  ; jIndex[ 300 ] = 39  ;
    iIndex[ 301 ] = 52  ; jIndex[ 301 ] = 40  ;
    iIndex[ 302 ] = 52  ; jIndex[ 302 ] = 76  ;
    iIndex[ 303 ] = 52  ; jIndex[ 303 ] = 77  ;
    iIndex[ 304 ] = 53  ; jIndex[ 304 ] = 39  ;
    iIndex[ 305 ] = 53  ; jIndex[ 305 ] = 40  ;
    iIndex[ 306 ] = 53  ; jIndex[ 306 ] = 76  ;
    iIndex[ 307 ] = 53  ; jIndex[ 307 ] = 77  ;
    iIndex[ 308 ] = 54  ; jIndex[ 308 ] = 39  ;
    iIndex[ 309 ] = 54  ; jIndex[ 309 ] = 40  ;
    iIndex[ 310 ] = 54  ; jIndex[ 310 ] = 76  ;
    iIndex[ 311 ] = 54  ; jIndex[ 311 ] = 77  ;
    iIndex[ 312 ] = 55  ; jIndex[ 312 ] = 39  ;
    iIndex[ 313 ] = 55  ; jIndex[ 313 ] = 40  ;
    iIndex[ 314 ] = 55  ; jIndex[ 314 ] = 76  ;
    iIndex[ 315 ] = 55  ; jIndex[ 315 ] = 77  ;
    iIndex[ 316 ] = 56  ; jIndex[ 316 ] = 39  ;
    iIndex[ 317 ] = 56  ; jIndex[ 317 ] = 40  ;
    iIndex[ 318 ] = 56  ; jIndex[ 318 ] = 42  ;
    iIndex[ 319 ] = 56  ; jIndex[ 319 ] = 76  ;
    iIndex[ 320 ] = 56  ; jIndex[ 320 ] = 77  ;
    iIndex[ 321 ] = 57  ; jIndex[ 321 ] = 39  ;
    iIndex[ 322 ] = 57  ; jIndex[ 322 ] = 40  ;
    iIndex[ 323 ] = 57  ; jIndex[ 323 ] = 42  ;
    iIndex[ 324 ] = 57  ; jIndex[ 324 ] = 43  ;
    iIndex[ 325 ] = 57  ; jIndex[ 325 ] = 45  ;
    iIndex[ 326 ] = 57  ; jIndex[ 326 ] = 76  ;
    iIndex[ 327 ] = 57  ; jIndex[ 327 ] = 77  ;
    iIndex[ 328 ] = 58  ; jIndex[ 328 ] = 39  ;
    iIndex[ 329 ] = 58  ; jIndex[ 329 ] = 40  ;
    iIndex[ 330 ] = 58  ; jIndex[ 330 ] = 42  ;
    iIndex[ 331 ] = 58  ; jIndex[ 331 ] = 43  ;
    iIndex[ 332 ] = 58  ; jIndex[ 332 ] = 44  ;
    iIndex[ 333 ] = 58  ; jIndex[ 333 ] = 45  ;
    iIndex[ 334 ] = 58  ; jIndex[ 334 ] = 46  ;
    iIndex[ 335 ] = 58  ; jIndex[ 335 ] = 47  ;
    iIndex[ 336 ] = 58  ; jIndex[ 336 ] = 49  ;
    iIndex[ 337 ] = 58  ; jIndex[ 337 ] = 50  ;
    iIndex[ 338 ] = 58  ; jIndex[ 338 ] = 52  ;
    iIndex[ 339 ] = 58  ; jIndex[ 339 ] = 53  ;
    iIndex[ 340 ] = 58  ; jIndex[ 340 ] = 54  ;
    iIndex[ 341 ] = 58  ; jIndex[ 341 ] = 55  ;
    iIndex[ 342 ] = 58  ; jIndex[ 342 ] = 76  ;
    iIndex[ 343 ] = 58  ; jIndex[ 343 ] = 77  ;
    iIndex[ 344 ] = 59  ; jIndex[ 344 ] = 39  ;
    iIndex[ 345 ] = 59  ; jIndex[ 345 ] = 40  ;
    iIndex[ 346 ] = 59  ; jIndex[ 346 ] = 42  ;
    iIndex[ 347 ] = 59  ; jIndex[ 347 ] = 43  ;
    iIndex[ 348 ] = 59  ; jIndex[ 348 ] = 44  ;
    iIndex[ 349 ] = 59  ; jIndex[ 349 ] = 45  ;
    iIndex[ 350 ] = 59  ; jIndex[ 350 ] = 46  ;
    iIndex[ 351 ] = 59  ; jIndex[ 351 ] = 47  ;
    iIndex[ 352 ] = 59  ; jIndex[ 352 ] = 55  ;
    iIndex[ 353 ] = 59  ; jIndex[ 353 ] = 76  ;
    iIndex[ 354 ] = 59  ; jIndex[ 354 ] = 77  ;
    iIndex[ 355 ] = 60  ; jIndex[ 355 ] = 39  ;
    iIndex[ 356 ] = 60  ; jIndex[ 356 ] = 40  ;
    iIndex[ 357 ] = 60  ; jIndex[ 357 ] = 42  ;
    iIndex[ 358 ] = 60  ; jIndex[ 358 ] = 43  ;
    iIndex[ 359 ] = 60  ; jIndex[ 359 ] = 45  ;
    iIndex[ 360 ] = 60  ; jIndex[ 360 ] = 46  ;
    iIndex[ 361 ] = 60  ; jIndex[ 361 ] = 47  ;
    iIndex[ 362 ] = 60  ; jIndex[ 362 ] = 76  ;
    iIndex[ 363 ] = 60  ; jIndex[ 363 ] = 77  ;
    iIndex[ 364 ] = 61  ; jIndex[ 364 ] = 39  ;
    iIndex[ 365 ] = 61  ; jIndex[ 365 ] = 40  ;
    iIndex[ 366 ] = 61  ; jIndex[ 366 ] = 42  ;
    iIndex[ 367 ] = 61  ; jIndex[ 367 ] = 43  ;
    iIndex[ 368 ] = 61  ; jIndex[ 368 ] = 44  ;
    iIndex[ 369 ] = 61  ; jIndex[ 369 ] = 47  ;
    iIndex[ 370 ] = 61  ; jIndex[ 370 ] = 55  ;
    iIndex[ 371 ] = 61  ; jIndex[ 371 ] = 76  ;
    iIndex[ 372 ] = 61  ; jIndex[ 372 ] = 77  ;
    iIndex[ 373 ] = 62  ; jIndex[ 373 ] = 39  ;
    iIndex[ 374 ] = 62  ; jIndex[ 374 ] = 40  ;
    iIndex[ 375 ] = 62  ; jIndex[ 375 ] = 42  ;
    iIndex[ 376 ] = 62  ; jIndex[ 376 ] = 43  ;
    iIndex[ 377 ] = 62  ; jIndex[ 377 ] = 44  ;
    iIndex[ 378 ] = 62  ; jIndex[ 378 ] = 46  ;
    iIndex[ 379 ] = 62  ; jIndex[ 379 ] = 76  ;
    iIndex[ 380 ] = 62  ; jIndex[ 380 ] = 77  ;
    iIndex[ 381 ] = 63  ; jIndex[ 381 ] = 39  ;
    iIndex[ 382 ] = 63  ; jIndex[ 382 ] = 40  ;
    iIndex[ 383 ] = 63  ; jIndex[ 383 ] = 42  ;
    iIndex[ 384 ] = 63  ; jIndex[ 384 ] = 43  ;
    iIndex[ 385 ] = 63  ; jIndex[ 385 ] = 44  ;
    iIndex[ 386 ] = 63  ; jIndex[ 386 ] = 45  ;
    iIndex[ 387 ] = 63  ; jIndex[ 387 ] = 76  ;
    iIndex[ 388 ] = 63  ; jIndex[ 388 ] = 77  ;
    iIndex[ 389 ] = 64  ; jIndex[ 389 ] = 39  ;
    iIndex[ 390 ] = 64  ; jIndex[ 390 ] = 40  ;
    iIndex[ 391 ] = 64  ; jIndex[ 391 ] = 76  ;
    iIndex[ 392 ] = 64  ; jIndex[ 392 ] = 77  ;
    iIndex[ 393 ] = 65  ; jIndex[ 393 ] = 39  ;
    iIndex[ 394 ] = 65  ; jIndex[ 394 ] = 40  ;
    iIndex[ 395 ] = 65  ; jIndex[ 395 ] = 42  ;
    iIndex[ 396 ] = 65  ; jIndex[ 396 ] = 76  ;
    iIndex[ 397 ] = 65  ; jIndex[ 397 ] = 77  ;
    iIndex[ 398 ] = 66  ; jIndex[ 398 ] = 39  ;
    iIndex[ 399 ] = 66  ; jIndex[ 399 ] = 40  ;
    iIndex[ 400 ] = 66  ; jIndex[ 400 ] = 42  ;
    iIndex[ 401 ] = 66  ; jIndex[ 401 ] = 76  ;
    iIndex[ 402 ] = 66  ; jIndex[ 402 ] = 77  ;
    iIndex[ 403 ] = 67  ; jIndex[ 403 ] = 39  ;
    iIndex[ 404 ] = 67  ; jIndex[ 404 ] = 40  ;
    iIndex[ 405 ] = 67  ; jIndex[ 405 ] = 76  ;
    iIndex[ 406 ] = 67  ; jIndex[ 406 ] = 77  ;
    iIndex[ 407 ] = 68  ; jIndex[ 407 ] = 39  ;
    iIndex[ 408 ] = 68  ; jIndex[ 408 ] = 40  ;
    iIndex[ 409 ] = 68  ; jIndex[ 409 ] = 42  ;
    iIndex[ 410 ] = 68  ; jIndex[ 410 ] = 76  ;
    iIndex[ 411 ] = 68  ; jIndex[ 411 ] = 77  ;
    iIndex[ 412 ] = 69  ; jIndex[ 412 ] = 39  ;
    iIndex[ 413 ] = 69  ; jIndex[ 413 ] = 40  ;
    iIndex[ 414 ] = 69  ; jIndex[ 414 ] = 42  ;
    iIndex[ 415 ] = 69  ; jIndex[ 415 ] = 76  ;
    iIndex[ 416 ] = 69  ; jIndex[ 416 ] = 77  ;
    iIndex[ 417 ] = 70  ; jIndex[ 417 ] = 39  ;
    iIndex[ 418 ] = 70  ; jIndex[ 418 ] = 40  ;
    iIndex[ 419 ] = 70  ; jIndex[ 419 ] = 42  ;
    iIndex[ 420 ] = 70  ; jIndex[ 420 ] = 55  ;
    iIndex[ 421 ] = 70  ; jIndex[ 421 ] = 76  ;
    iIndex[ 422 ] = 70  ; jIndex[ 422 ] = 77  ;
    iIndex[ 423 ] = 71  ; jIndex[ 423 ] = 39  ;
    iIndex[ 424 ] = 71  ; jIndex[ 424 ] = 40  ;
    iIndex[ 425 ] = 71  ; jIndex[ 425 ] = 42  ;
    iIndex[ 426 ] = 71  ; jIndex[ 426 ] = 43  ;
    iIndex[ 427 ] = 71  ; jIndex[ 427 ] = 45  ;
    iIndex[ 428 ] = 71  ; jIndex[ 428 ] = 54  ;
    iIndex[ 429 ] = 71  ; jIndex[ 429 ] = 55  ;
    iIndex[ 430 ] = 71  ; jIndex[ 430 ] = 76  ;
    iIndex[ 431 ] = 71  ; jIndex[ 431 ] = 77  ;
    iIndex[ 432 ] = 72  ; jIndex[ 432 ] = 39  ;
    iIndex[ 433 ] = 72  ; jIndex[ 433 ] = 40  ;
    iIndex[ 434 ] = 72  ; jIndex[ 434 ] = 76  ;
    iIndex[ 435 ] = 72  ; jIndex[ 435 ] = 77  ;
    iIndex[ 436 ] = 73  ; jIndex[ 436 ] = 39  ;
    iIndex[ 437 ] = 73  ; jIndex[ 437 ] = 40  ;
    iIndex[ 438 ] = 73  ; jIndex[ 438 ] = 76  ;
    iIndex[ 439 ] = 73  ; jIndex[ 439 ] = 77  ;
    iIndex[ 440 ] = 74  ; jIndex[ 440 ] = 39  ;
    iIndex[ 441 ] = 74  ; jIndex[ 441 ] = 40  ;
    iIndex[ 442 ] = 74  ; jIndex[ 442 ] = 76  ;
    iIndex[ 443 ] = 74  ; jIndex[ 443 ] = 77  ;
    iIndex[ 444 ] = 75  ; jIndex[ 444 ] = 39  ;
    iIndex[ 445 ] = 75  ; jIndex[ 445 ] = 40  ;
    iIndex[ 446 ] = 75  ; jIndex[ 446 ] = 76  ;
    iIndex[ 447 ] = 75  ; jIndex[ 447 ] = 77  ;
    iIndex[ 448 ] = 76  ; jIndex[ 448 ] = 39  ;
    iIndex[ 449 ] = 76  ; jIndex[ 449 ] = 40  ;
    iIndex[ 450 ] = 76  ; jIndex[ 450 ] = 76  ;
    iIndex[ 451 ] = 76  ; jIndex[ 451 ] = 77  ;
    iIndex[ 452 ] = 77  ; jIndex[ 452 ] = 39  ;
    iIndex[ 453 ] = 77  ; jIndex[ 453 ] = 40  ;
    iIndex[ 454 ] = 77  ; jIndex[ 454 ] = 76  ;
    iIndex[ 455 ] = 77  ; jIndex[ 455 ] = 77  ;
  }

  void
  Straight::DadjointBCDx_sparse(
    NodeType2 const             & LEFT__,
    NodeType2 const             & RIGHT__,
    P_const_pointer_type          P__,
    OMEGA_full_const_pointer_type OMEGA__,
    real_type                     result__[]
  ) const {
    integer i_segment_left  = LEFT__.i_segment;
    real_type const * QL__  = LEFT__.q;
    real_type const * XL__  = LEFT__.x;
    real_type const * LL__  = LEFT__.lambda;
    integer i_segment_right = RIGHT__.i_segment;
    real_type const * QR__  = RIGHT__.q;
    real_type const * XR__  = RIGHT__.x;
    real_type const * LR__  = RIGHT__.lambda;
    Road2D::SegmentClass const & segmentLeft  = pRoad->getSegmentByIndex(i_segment_left);
    Road2D::SegmentClass const & segmentRight = pRoad->getSegmentByIndex(i_segment_right);
    real_type t3   = ALIAS_kappa_L(QL__[0]);
    real_type t5   = t3 * XL__[37] - 1;
    real_type t6   = 1.0 / t5;
    real_type t7   = XL__[38];
    real_type t8   = cos(t7);
    real_type t9   = t8 * t6;
    real_type t10  = ModelPars[25];
    real_type t11  = LL__[0];
    real_type t12  = t11 * t10;
    real_type t14  = XL__[7];
    real_type t15  = cos(t14);
    real_type t16  = ModelPars[76];
    real_type t18  = ModelPars[233];
    real_type t19  = t18 * t16 * t15;
    real_type t20  = sin(t14);
    real_type t21  = ModelPars[24];
    real_type t22  = ModelPars[219];
    real_type t23  = -t21 + t22;
    real_type t25  = ModelPars[78];
    real_type t26  = t21 * t25;
    real_type t27  = t16 * t23 - t26;
    real_type t28  = t27 * t20;
    real_type t29  = ModelPars[75];
    real_type t30  = ModelPars[71];
    real_type t31  = t30 * t29;
    real_type t32  = ModelPars[66];
    real_type t33  = cos(t32);
    real_type t35  = t18 * t16 * t33;
    real_type t36  = sin(t32);
    real_type t38  = -t16 * t23;
    real_type t39  = t38 + t26;
    real_type t40  = t39 * t36;
    real_type t41  = ModelPars[214];
    real_type t42  = cos(t41);
    real_type t43  = t42 * t31;
    real_type t44  = ModelPars[204];
    real_type t45  = ModelPars[77];
    real_type t46  = t45 * t44;
    real_type t47  = XL__[8];
    real_type t48  = t45 * t47;
    real_type t49  = ModelPars[31];
    real_type t50  = t49 * t10;
    real_type t51  = -t19 + t28 - t31 + t35 + t40 + t43 + t46 - t48 - t50;
    real_type t52  = XL__[3];
    real_type t53  = cos(t52);
    real_type t54  = t53 * t51;
    real_type t56  = ModelPars[65];
    real_type t57  = XL__[4] + t56;
    real_type t58  = cos(t57);
    real_type t59  = t58 * t9;
    real_type t60  = t59 * t54;
    real_type t61  = t27 * t15;
    real_type t63  = t18 * t16 * t20;
    real_type t64  = t39 * t33;
    real_type t66  = t18 * t16 * t36;
    real_type t67  = sin(t41);
    real_type t68  = t67 * t31;
    real_type t69  = ModelPars[30];
    real_type t70  = t69 * t10;
    real_type t71  = t61 + t63 + t64 - t66 - t68 + t70;
    real_type t72  = t53 * t71;
    real_type t73  = sin(t57);
    real_type t74  = t73 * t72;
    real_type t75  = t74 * t9;
    real_type t76  = t53 * t10;
    real_type t77  = XL__[5];
    real_type t78  = t77 * t76;
    real_type t79  = sin(t52);
    real_type t80  = ModelPars[149];
    real_type t81  = t80 * t45;
    real_type t82  = ModelPars[190];
    real_type t83  = ModelPars[220];
    real_type t85  = t83 * t82 + t81;
    real_type t86  = t85 * t79;
    real_type t87  = XL__[6];
    real_type t89  = t87 * t86 + t78;
    real_type t92  = LL__[4];
    real_type t94  = t39 * t20;
    real_type t95  = t27 * t36;
    real_type t96  = t19 + t94 + t31 - t35 + t95 - t43 - t46 + t48 + t50;
    real_type t97  = t79 * t96;
    real_type t99  = t71 * t79;
    real_type t100 = t73 * t99;
    real_type t102 = t79 * t10;
    real_type t103 = t77 * t102;
    real_type t104 = -t85;
    real_type t105 = t87 * t104;
    real_type t107 = t53 * t105 + t103;
    real_type t108 = t6 * t107;
    real_type t110 = -t100 * t9 - t8 * t108 - t59 * t97;
    real_type t111 = LL__[5];
    real_type t113 = t85 * t9;
    real_type t114 = t58 * t87;
    real_type t115 = LL__[6];
    real_type t116 = t115 * t114;
    real_type t118 = t19 - t28;
    real_type t119 = t58 * t118;
    real_type t121 = t61 + t63;
    real_type t122 = t73 * t121;
    real_type t123 = t122 * t9;
    real_type t125 = LL__[7];
    real_type t127 = t6 * t45;
    real_type t128 = t73 * t8;
    real_type t129 = LL__[8];
    result__[ 0   ] = -t12 * t9 + t92 * (-t89 * t9 + t60 - t75) + t111 * t110 + t116 * t113 + t125 * (-t119 * t9 - t123) + t129 * t128 * t127;
    real_type t132 = sin(t7);
    real_type t133 = t132 * t6;
    real_type t135 = t58 * t133;
    real_type t136 = t135 * t54;
    real_type t137 = t74 * t133;
    real_type t144 = t100 * t133 + t132 * t108 + t135 * t97;
    real_type t146 = t85 * t133;
    real_type t149 = t122 * t133;
    real_type t152 = t73 * t132;
    result__[ 1   ] = t12 * t133 + t92 * (t89 * t133 - t136 + t137) + t111 * t144 - t116 * t146 + t125 * (t119 * t133 + t149) - t129 * t152 * t127;
    real_type t155 = XL__[0];
    real_type t157 = XL__[1];
    real_type t159 = -t157 * t132 + t155 * t8;
    real_type t160 = t159 * t6;
    real_type t161 = t51 * t79;
    real_type t162 = t58 * t161;
    real_type t163 = t162 * t160;
    real_type t164 = t100 * t160;
    real_type t165 = t85 * t53;
    real_type t167 = t87 * t165 - t103;
    real_type t171 = t53 * t96;
    real_type t172 = t58 * t160;
    real_type t174 = t74 * t160;
    real_type t176 = -t79 * t105 + t78;
    real_type t179 = -t159 * t6 * t176 - t172 * t171 - t174;
    result__[ 2   ] = t92 * (-t167 * t160 - t163 + t164) + t111 * t179;
    real_type t181 = t73 * t160;
    real_type t182 = t181 * t54;
    real_type t183 = t58 * t72;
    real_type t185 = -t183 * t160 - t182;
    real_type t189 = t58 * t99 * t160;
    real_type t190 = t181 * t97 - t189;
    real_type t192 = t85 * t160;
    real_type t193 = t73 * t87;
    real_type t194 = t115 * t193;
    real_type t196 = t73 * t118;
    real_type t197 = t196 * t160;
    real_type t198 = t58 * t121;
    real_type t199 = t198 * t160;
    real_type t202 = t58 * t159;
    real_type t203 = t129 * t202;
    result__[ 3   ] = t92 * t185 + t111 * t190 - t194 * t192 + t125 * (t197 - t199) + t203 * t127;
    real_type t207 = t111 * t160;
    result__[ 4   ] = -t92 * t76 * t160 - t207 * t102;
    real_type t211 = t53 * t104;
    result__[ 5   ] = t115 * t58 * t85 * t160 - t92 * t86 * t160 - t207 * t211;
    real_type t216 = t121 * t53;
    real_type t217 = t58 * t216;
    real_type t218 = t217 * t160;
    real_type t219 = t53 * t118;
    real_type t222 = -t73 * t219 * t160 + t218;
    real_type t224 = t39 * t15;
    real_type t225 = t224 - t63;
    real_type t226 = t79 * t225;
    real_type t228 = t118 * t79;
    real_type t231 = -t73 * t228 * t160 - t172 * t226;
    real_type t233 = -t121;
    result__[ 6   ] = t92 * t222 + t111 * t231 + t125 * (-t58 * t233 * t160 - t197);
    real_type t238 = t53 * t45;
    real_type t239 = t6 * t238;
    real_type t242 = t79 * t45;
    real_type t243 = t6 * t242;
    real_type t244 = t111 * t202;
    result__[ 7   ] = -t92 * t202 * t239 - t244 * t243;
    real_type t246 = t5 * t5;
    real_type t247 = 1.0 / t246;
    real_type t248 = t159 * t247;
    real_type t251 = t247 * t54;
    real_type t252 = t3 * t202;
    real_type t253 = t252 * t251;
    real_type t254 = t71 * t248;
    real_type t256 = t3 * t73 * t53;
    real_type t257 = t256 * t254;
    real_type t262 = t247 * t97;
    real_type t264 = t79 * t248;
    real_type t265 = t73 * t71;
    real_type t269 = t3 * t159;
    real_type t271 = t269 * t247 * t107 + t3 * t265 * t264 + t252 * t262;
    real_type t273 = t85 * t248;
    real_type t274 = t3 * t115;
    real_type t280 = t3 * t122 * t248;
    real_type t283 = t247 * t45;
    real_type t284 = t159 * t283;
    real_type t285 = t129 * t73;
    result__[ 8   ] = t3 * t12 * t248 + t92 * (t3 * t89 * t248 - t253 + t257) + t111 * t271 - t274 * t114 * t273 + t125 * (t3 * t119 * t248 + t280) - t3 * t285 * t284;
    real_type t290 = -t155 * t132 - t157 * t8;
    real_type t291 = t290 * t6;
    real_type t293 = t58 * t291;
    real_type t294 = t293 * t54;
    real_type t295 = t74 * t291;
    real_type t302 = -t100 * t291 - t290 * t108 - t293 * t97;
    real_type t304 = t85 * t291;
    real_type t307 = t122 * t291;
    real_type t310 = t73 * t290;
    result__[ 9   ] = -t12 * t291 + t92 * (-t89 * t291 + t294 - t295) + t111 * t302 + t116 * t304 + t125 * (-t119 * t291 - t307) + t129 * t310 * t127;
    real_type t313 = LL__[1];
    real_type t314 = t313 * t10;
    real_type t316 = -t89;
    real_type t319 = LL__[3];
    real_type t321 = t58 * t71;
    real_type t323 = t73 * t51;
    real_type t325 = -t321 * t9 - t323 * t9;
    real_type t327 = t87 * t79;
    real_type t328 = t73 * t327;
    real_type t333 = t121 * t79;
    real_type t334 = t58 * t333;
    real_type t336 = -t118;
    real_type t337 = t336 * t79;
    real_type t338 = t73 * t337;
    real_type t340 = -t334 * t9 - t338 * t9;
    real_type t342 = t58 * t8;
    real_type t343 = t129 * t342;
    result__[ 10  ] = -t314 * t9 + t319 * (-t316 * t9 - t60 + t75) + t111 * t325 + t115 * (-t328 * t113 - t165 * t9) + t125 * t340 + t343 * t243;
    real_type t351 = t321 * t133 + t323 * t133;
    real_type t359 = t334 * t133 + t338 * t133;
    real_type t361 = t58 * t132;
    real_type t362 = t129 * t361;
    result__[ 11  ] = t314 * t133 + t319 * (t316 * t133 + t136 - t137) + t111 * t351 + t115 * (t165 * t133 + t328 * t146) + t125 * t359 - t362 * t243;
    real_type t368 = t87 * t53;
    real_type t374 = t53 * t336;
    real_type t375 = t73 * t374;
    real_type t377 = -t375 * t160 - t218;
    result__[ 12  ] = t319 * (t167 * t160 + t163 - t164) + t115 * (-t73 * t368 * t192 + t86 * t160) + t125 * t377 + t203 * t239;
    real_type t381 = -t319 * t185;
    real_type t382 = t265 * t160;
    real_type t383 = t58 * t51;
    real_type t384 = t383 * t160;
    real_type t385 = t382 - t384;
    real_type t389 = t115 * t58 * t327 * t192;
    real_type t391 = t73 * t333 * t160;
    real_type t392 = t58 * t337;
    real_type t394 = -t392 * t160 + t391;
    real_type t396 = t73 * t159;
    real_type t397 = t129 * t396;
    real_type t398 = t397 * t243;
    result__[ 13  ] = t111 * t385 + t125 * t394 + t381 - t389 - t398;
    result__[ 14  ] = t319 * t76 * t160;
    real_type t402 = t73 * t79;
    result__[ 15  ] = -t115 * t402 * t192 + t319 * t86 * t160;
    real_type t407 = t119 * t160;
    real_type t409 = -t122 * t160 - t407;
    real_type t413 = -t58 * t228 * t160 - t391;
    result__[ 16  ] = t111 * t409 + t125 * t413 - t319 * t222;
    result__[ 17  ] = t111 * t396 * t127 + t319 * t202 * t239;
    real_type t419 = t3 * t314;
    real_type t429 = t3 * t321 * t248 + t3 * t323 * t248;
    real_type t431 = t3 * t73;
    real_type t438 = t3 * t198;
    real_type t443 = t3 * t73 * t336 * t264 + t438 * t264;
    real_type t445 = t247 * t242;
    real_type t446 = t3 * t129;
    result__[ 18  ] = t419 * t248 + t319 * (t3 * t316 * t248 + t253 - t257) + t111 * t429 + t115 * (t3 * t165 * t248 + t431 * t327 * t273) + t125 * t443 - t446 * t202 * t445;
    real_type t455 = -t321 * t291 - t323 * t291;
    real_type t463 = -t334 * t291 - t338 * t291;
    real_type t465 = t58 * t290;
    real_type t466 = t129 * t465;
    result__[ 19  ] = -t314 * t291 + t319 * (-t316 * t291 - t294 + t295) + t111 * t455 + t115 * (-t165 * t291 - t328 * t304) + t125 * t463 + t466 * t243;
    real_type t470 = ModelPars[151];
    real_type t471 = t470 * t31;
    real_type t472 = t15 * t15;
    real_type t474 = ModelPars[164];
    real_type t475 = t18 * t38 - t474;
    real_type t476 = 2 * t475;
    real_type t482 = t21 * t21;
    real_type t483 = t25 * t482;
    real_type t484 = ModelPars[15];
    real_type t485 = ModelPars[20];
    real_type t486 = (t21 - t22 - t18) * (t21 - t22 + t18) * t16 + t483 - t484 + t485;
    real_type t488 = t20 * t486 * t15;
    real_type t489 = t33 * t33;
    real_type t491 = -t476 * t489;
    real_type t493 = t36 * t486 * t33;
    real_type t494 = t30 * t30;
    real_type t495 = t494 * t29;
    real_type t496 = ModelPars[14];
    real_type t497 = ModelPars[19];
    real_type t498 = t495 + t496 - t497;
    real_type t501 = (t498 * t67 + t471) * t42;
    real_type t502 = ModelPars[161];
    real_type t503 = t29 * t502;
    real_type t504 = t67 * t30;
    real_type t505 = t504 * t503;
    real_type t506 = ModelPars[23];
    real_type t507 = t506 + t80;
    real_type t509 = t45 * t507 * t47;
    real_type t510 = t507 * t45;
    real_type t511 = t44 * t510;
    real_type t512 = t69 * t50;
    real_type t513 = ModelPars[0];
    real_type t514 = t476 * t472 - t471 + t488 + t491 - t493 + t501 + t505 - t509 + t511 - t512 - t513;
    real_type t515 = t514 * t53;
    real_type t517 = -t486;
    real_type t518 = t517 * t472;
    real_type t520 = t475 * t20 * t15;
    real_type t521 = 2 * t520;
    real_type t522 = t486 * t489;
    real_type t524 = t475 * t36 * t33;
    real_type t525 = 2 * t524;
    real_type t526 = t42 * t42;
    real_type t527 = -t498;
    real_type t528 = t527 * t526;
    real_type t530 = t42 * t30 * t503;
    real_type t532 = t504 * t29 * t470;
    real_type t533 = t47 * t47;
    real_type t534 = t533 * t45;
    real_type t535 = t534 / 2;
    real_type t536 = ModelPars[127];
    real_type t538 = t45 * t536 * t47;
    real_type t541 = (t536 - t44 / 2) * t46;
    real_type t542 = t502 * t31;
    real_type t543 = t69 * t69;
    real_type t544 = t49 * t49;
    real_type t545 = -t543 + t544;
    real_type t547 = t545 * t10 / 2;
    real_type t548 = ModelPars[10];
    real_type t549 = t548 / 2;
    real_type t550 = ModelPars[12];
    real_type t551 = t550 / 2;
    real_type t552 = t518 + t521 + t522 - t525 + t528 - t530 + t532 + t535 - t538 + t541 + t495 + t542 + t547 + t496 - t497 + t549 - t551;
    real_type t553 = t552 * t53;
    real_type t554 = t73 * t9;
    real_type t557 = t77 * t53;
    real_type t559 = t80 * t510;
    real_type t560 = t83 * t83;
    real_type t561 = t82 * t560;
    real_type t563 = t82 * t83 * t506;
    real_type t564 = ModelPars[13];
    real_type t565 = ModelPars[17];
    real_type t566 = ModelPars[165];
    real_type t567 = ModelPars[166];
    real_type t568 = t559 + t561 + t563 - t564 + t565 - t566 + t567;
    real_type t569 = t568 * t79;
    real_type t571 = -t71 * t557 - t87 * t569;
    real_type t577 = t45 * t47 * t80;
    real_type t579 = t45 * t536 * t80;
    real_type t582 = t82 * t83 * ModelPars[234];
    real_type t583 = ModelPars[163];
    real_type t584 = -t577 + t579 - t582 - t583;
    real_type t585 = t584 * t79;
    real_type t587 = -t51 * t557 - t87 * t585;
    real_type t588 = t73 * t587;
    real_type t590 = t58 * t58;
    real_type t591 = t590 * t515;
    real_type t596 = t79 * t552;
    real_type t597 = t53 * t596;
    real_type t598 = t590 * t9;
    real_type t601 = t79 * t514;
    real_type t602 = t53 * t601;
    real_type t605 = t53 * t53;
    real_type t606 = t584 * t605;
    real_type t609 = t77 * t79;
    real_type t612 = t87 * t584;
    real_type t613 = -2 * t609 * t54 + 2 * t87 * t606 - t612;
    real_type t617 = t568 * t605;
    real_type t620 = t79 * t53;
    real_type t621 = t71 * t77;
    real_type t624 = t87 * t568;
    real_type t625 = -2 * t87 * t617 + 2 * t621 * t620 + t624;
    real_type t626 = t73 * t625;
    real_type t628 = t85 * t605;
    real_type t629 = t77 * t87;
    real_type t632 = t77 * t77;
    real_type t633 = t632 * t10;
    real_type t634 = 2 * t532;
    real_type t635 = t543 * t10;
    real_type t636 = ModelPars[11];
    real_type t637 = t518 + t521 + t522 - t525 - t633 + t528 + t634 - t635 + t495 + t496 - t497 + t548 - t636;
    real_type t640 = t87 * t85;
    real_type t642 = -t53 * t79 * t637 - 2 * t629 * t628 + t77 * t640;
    real_type t643 = t6 * t642;
    real_type t648 = t22 * t21;
    real_type t650 = t22 * t22;
    real_type t652 = t18 * t18;
    real_type t654 = 2 * t482 - 4 * t648 + 2 * t650 - 2 * t652;
    real_type t656 = 2 * t483;
    real_type t657 = 2 * t484;
    real_type t658 = 2 * t485;
    real_type t659 = t16 * t654 + t656 - t657 + t658;
    real_type t660 = t472 * t659;
    real_type t663 = -t18 * t21 + t18 * t22;
    real_type t664 = 4 * t663;
    real_type t666 = 4 * t474;
    real_type t667 = t16 * t664 + t666;
    real_type t672 = -t16 * t654 - t656 + t657 - t658;
    real_type t673 = t489 * t672;
    real_type t676 = -t16 * t664 - t666;
    real_type t678 = t33 * t36 * t676;
    real_type t679 = 2 * t498;
    real_type t680 = t526 * t679;
    real_type t681 = 2 * t530;
    real_type t682 = 2 * t538;
    real_type t685 = t44 * t44;
    real_type t686 = -2 * t44 * t536 + t685;
    real_type t687 = t45 * t686;
    real_type t688 = 2 * t495;
    real_type t689 = 2 * t542;
    real_type t691 = -t545 * t10;
    real_type t692 = 2 * t496;
    real_type t693 = 2 * t497;
    real_type t694 = t15 * t20 * t667 - t534 - t548 + t550 - t634 + t660 + t673 + t678 + t680 + t681 + t682 + t687 - t688 - t689 + t691 - t692 + t693;
    real_type t695 = t605 * t694;
    real_type t697 = t472 * t676;
    real_type t699 = t15 * t20 * t659;
    real_type t700 = t489 * t667;
    real_type t702 = t33 * t36 * t672;
    real_type t704 = 2 * t471;
    real_type t706 = (t679 * t67 + t704) * t42;
    real_type t707 = -t507;
    real_type t709 = 2 * t45 * t707;
    real_type t711 = 2 * t505;
    real_type t714 = t44 * t506 + t44 * t80;
    real_type t716 = 2 * t45 * t714;
    real_type t717 = 2 * t512;
    real_type t718 = 2 * t513;
    real_type t719 = t47 * t709 + t697 + t699 + t700 + t702 - t704 + t706 + t711 + t716 - t717 - t718;
    real_type t720 = t605 * t719;
    real_type t723 = t18 * t16;
    real_type t724 = t723 * t77 * t15;
    real_type t725 = 2 * t724;
    real_type t726 = 2 * t23;
    real_type t728 = 2 * t26;
    real_type t729 = t726 * t16 - t728;
    real_type t730 = t77 * t729;
    real_type t731 = t20 * t730;
    real_type t732 = 2 * t35;
    real_type t735 = -t726 * t16 + t728;
    real_type t736 = t36 * t735;
    real_type t737 = 2 * t43;
    real_type t738 = 2 * t31;
    real_type t739 = 2 * t46;
    real_type t740 = 2 * t48;
    real_type t741 = 2 * t50;
    real_type t744 = -t725 + t731 + t77 * (t732 + t736 + t737 - t738 + t739 - t740 - t741);
    real_type t746 = 2 * t584;
    real_type t747 = t87 * t746;
    real_type t749 = t77 * t735;
    real_type t750 = t20 * t749;
    real_type t751 = t729 * t36;
    real_type t754 = t605 * t744 + t620 * t747 + t725 + t750 + t77 * (-t732 + t751 - t737 + t738 - t739 + t740 + t741);
    real_type t755 = t6 * t754;
    real_type t759 = t15 * t749;
    real_type t762 = t20 * t18 * t77 * t16;
    real_type t763 = 2 * t762;
    real_type t764 = t33 * t729;
    real_type t765 = 2 * t66;
    real_type t766 = 2 * t68;
    real_type t767 = 2 * t70;
    real_type t768 = t764 + t765 + t766 - t767;
    real_type t770 = t77 * t768 + t759 - t763;
    real_type t772 = t80 * t506;
    real_type t773 = t80 * t80;
    real_type t774 = -t772 - t773;
    real_type t783 = 2 * t45 * t774 - 2 * t561 - 2 * t563 + 2 * t564 - 2 * t565 + 2 * t566 - 2 * t567;
    real_type t784 = t87 * t783;
    real_type t786 = t15 * t730;
    real_type t787 = t33 * t735;
    real_type t788 = t787 - t766 - t765 + t767;
    real_type t790 = t605 * t770 + t620 * t784 + t77 * t788 + t763 + t786;
    real_type t791 = t6 * t790;
    real_type t793 = 2 * t648;
    real_type t794 = -t482 + t793 - t650 + t652;
    real_type t796 = t16 * t794 - t483 + t484 - t485;
    real_type t797 = t472 * t796;
    real_type t799 = -2 * t663;
    real_type t801 = 2 * t474;
    real_type t802 = t16 * t799 - t801;
    real_type t807 = -t16 * t794 + t483 - t484 + t485;
    real_type t808 = t489 * t807;
    real_type t811 = -t16 * t799 + t801;
    real_type t813 = t33 * t36 * t811;
    real_type t814 = t15 * t20 * t802 + t495 + t496 - t497 + t528 + t548 - t633 + t634 - t635 - t636 + t797 + t808 + t813;
    real_type t816 = 2 * t104;
    real_type t817 = t87 * t816;
    real_type t821 = -t45 * t686;
    real_type t822 = t543 + t544;
    real_type t823 = t822 * t10;
    real_type t824 = t53 * t609 * t817 + t605 * t814 + t534 + t633 - t634 + t636 - t681 - t682 + t689 + t821 + t823;
    real_type t825 = t6 * t824;
    real_type t830 = t45 * t773;
    real_type t834 = ModelPars[167];
    real_type t835 = t45 * t772 + t830 + t83 * (t506 + t83) * t82 + t834 + t564;
    real_type t838 = t835 * t53 - t629 * t86;
    real_type t839 = t58 * t838;
    real_type t841 = -t584;
    real_type t842 = t841 * t53;
    real_type t844 = t87 * t841;
    real_type t845 = t79 * t844;
    real_type t852 = t73 * t609;
    real_type t854 = t482 - t793 + t650 + t652;
    real_type t856 = ModelPars[18];
    real_type t857 = ModelPars[16];
    real_type t858 = t854 * t16 + t483 + t856 + t857;
    real_type t859 = t858 * t79;
    real_type t860 = t859 * t9;
    real_type t863 = t53 * t80;
    real_type t865 = -t87 * t863 + t609;
    real_type t866 = t865 / 2;
    real_type t867 = t6 * t866;
    real_type t872 = t79 * t510;
    real_type t876 = t6 * t87;
    real_type t877 = t8 * t876;
    real_type t878 = t565 * t53;
    real_type t879 = t73 * t878;
    real_type t881 = t79 * t565;
    real_type t883 = t879 * t877 - t9 * t881;
    real_type t884 = LL__[9];
    real_type t886 = t6 * t79;
    real_type t887 = t856 * t8;
    real_type t888 = LL__[10];
    result__[ 20  ] = t11 * t110 + t313 * t325 + t319 * (t515 * t9 + t58 * (-2 * t554 * t553 - t571 * t9) - t588 * t9 - 2 * t591 * t9) + t92 * (-2 * t598 * t597 + t58 * (2 * t554 * t602 - t613 * t9) - t626 * t9 - t8 * t643) + t111 * (-t598 * t695 + t58 * (-t554 * t720 - t8 * t755) - t128 * t791 - t8 * t825) + t115 * (t554 * t842 - t839 * t9 + t845 * t9) + t125 * (-t852 * t121 * t9 + t392 * t77 * t9 - t860) + t129 * (2 * t73 * t45 * t8 * t867 + t872 * t9) + t884 * t883 - t888 * t887 * t886;
    real_type t894 = t73 * t133;
    real_type t905 = t590 * t133;
    real_type t935 = t859 * t133;
    real_type t945 = t132 * t876;
    real_type t948 = t133 * t881 - t879 * t945;
    real_type t950 = t856 * t132;
    result__[ 21  ] = t11 * t144 + t313 * t351 + t319 * (-t515 * t133 + t58 * (t571 * t133 + 2 * t894 * t553) + t588 * t133 + 2 * t591 * t133) + t92 * (2 * t905 * t597 + t58 * (t613 * t133 - 2 * t894 * t602) + t626 * t133 + t132 * t643) + t111 * (t905 * t695 + t58 * (t132 * t755 + t894 * t720) + t152 * t791 + t132 * t825) + t115 * (t839 * t133 - t845 * t133 - t894 * t842) + t125 * (t852 * t121 * t133 - t392 * t77 * t133 + t935) + t129 * (-2 * t73 * t45 * t132 * t867 - t872 * t133) + t884 * t948 + t888 * t950 * t886;
    real_type t954 = t590 * t601;
    real_type t959 = t568 * t53;
    real_type t962 = t71 * t609 - t87 * t959;
    real_type t964 = -t962 * t160 + 2 * t181 * t596;
    real_type t966 = t584 * t53;
    real_type t969 = t77 * t161 - t87 * t966;
    real_type t970 = t73 * t969;
    real_type t976 = t590 * t160;
    real_type t979 = t79 * t79;
    real_type t1003 = t77 * t979;
    real_type t1006 = t77 * t605;
    real_type t1024 = t590 * t159;
    real_type t1028 = t53 * t719;
    real_type t1029 = t6 * t1028;
    real_type t1066 = t841 * t79;
    real_type t1067 = t181 * t1066;
    real_type t1068 = t53 * t844;
    real_type t1072 = t77 * t160;
    real_type t1073 = t58 * t374;
    real_type t1075 = t121 * t160;
    real_type t1076 = t73 * t557;
    real_type t1077 = t1076 * t1075;
    real_type t1078 = t858 * t53;
    real_type t1079 = t1078 * t160;
    real_type t1082 = t79 * t80;
    real_type t1083 = t87 * t1082;
    real_type t1084 = t1083 + t557;
    real_type t1087 = t45 * t159;
    real_type t1088 = t73 * t1087;
    real_type t1091 = t53 * t510;
    real_type t1092 = t1091 * t160;
    real_type t1096 = t79 * t565 * t87;
    real_type t1099 = -t181 * t1096 - t878 * t160;
    real_type t1101 = t6 * t53;
    real_type t1102 = t856 * t159;
    result__[ 22  ] = t11 * t179 + t319 * (-t601 * t160 + 2 * t954 * t160 - t970 * t160 + t58 * t964) + t92 * (-2 * t976 * t605 * t552 + 2 * t976 * t979 * t552 + t58 * (2 * t181 * t605 * t514 - 2 * t181 * t979 * t514 - (-2 * t77 * t51 * t605 + 2 * t77 * t51 * t979 - 4 * t327 * t966) * t160) - t73 * (-2 * t71 * t1003 + 2 * t71 * t1006 + 4 * t327 * t959) * t160 - t159 * t6 * (4 * t79 * t629 * t165 - t605 * t637 + t979 * t637)) + t111 * (2 * t79 * t1024 * t6 * t53 * t694 + t58 * (2 * t79 * t396 * t1029 - t159 * t6 * (-2 * t79 * t53 * t744 + t605 * t747 - t979 * t747)) - t396 * t6 * (-2 * t79 * t53 * t770 + t605 * t784 - t979 * t784) - t159 * t6 * (-2 * t79 * t53 * t814 - t1003 * t817 + t1006 * t817)) + t115 * (-t58 * (-t629 * t165 - t835 * t79) * t160 - t1067 + t1068 * t160) + t125 * (t1073 * t1072 - t1077 - t1079) + t129 * (t1088 * t6 * t1084 + t1092) + t884 * t1099 - t888 * t1102 * t1101;
    real_type t1110 = 2 * t181 * t553;
    real_type t1116 = t53 * t160;
    real_type t1118 = t73 * t58 * t514;
    real_type t1139 = t73 * t202;
    real_type t1152 = t172 * t842;
    real_type t1156 = t58 * t609;
    real_type t1157 = t1156 * t1075;
    real_type t1161 = t58 * t45;
    real_type t1165 = t159 * t876;
    result__[ 23  ] = t11 * t190 + t313 * t385 + t319 * (-2 * t976 * t553 - t73 * (-t571 * t160 - t1110) - t58 * t587 * t160 + 4 * t1118 * t1116) + t92 * (4 * t73 * t58 * t160 * t597 + 2 * t976 * t602 - t73 * (-t613 * t160 + 2 * t181 * t602) - t58 * t625 * t160) + t111 * (2 * t1139 * t6 * t695 - t976 * t720 - t73 * (-t159 * t755 - t181 * t720) - t202 * t791) + t115 * (t73 * t838 * t160 + t1152) + t125 * (-t338 * t1072 - t1157) + 2 * t129 * t1161 * t159 * t867 + t884 * t58 * t878 * t1165;
    real_type t1169 = t11 * t160;
    real_type t1177 = t77 * t10;
    real_type t1185 = 2 * t19;
    real_type t1194 = 2 * t63;
    result__[ 24  ] = -t1169 * t102 + t381 + t92 * (2 * t162 * t1116 - 2 * t100 * t1116 - t159 * t6 * (2 * t620 * t1177 - 2 * t87 * t628 + t640)) + t111 * (-t202 * t6 * (t605 * (t20 * t729 - t1185 + t732 + t736 + t737 - t738 + t739 - t740 - t741) + t1185 + t20 * t735 - t732 + t751 - t737 + t738 - t739 + t740 + t741) - t396 * t6 * (t605 * (t15 * t735 - t1194 + t764 + t765 + t766 - t767) + t15 * t729 + t1194 + t787 - t766 - t765 + t767) - t159 * t6 * (-2 * t605 * t1177 + t620 * t817 + 2 * t1177)) + t389 - t125 * t394 + t398;
    real_type t1215 = t73 * t585;
    real_type t1216 = t1215 * t160;
    real_type t1229 = t77 * t85;
    real_type t1250 = t6 * t863;
    real_type t1253 = t73 * t565;
    real_type t1254 = t884 * t1253;
    result__[ 25  ] = -t1169 * t211 + t319 * (t58 * t569 * t160 + t1216) + t92 * (-t58 * (2 * t606 - t579 + t577 + t582 + t583) * t160 - t73 * (-2 * t617 + t559 + t561 + t563 - t564 + t565 - t566 + t567) * t160 - t159 * t6 * (-2 * t77 * t628 + t1229)) + t111 * (-t1116 * t79 * t77 * t816 - t172 * t53 * t79 * t746 - t181 * t53 * t79 * t783) + t115 * (t1066 * t160 + t1156 * t192) - t285 * t1087 * t1250 + t1254 * t1116;
    real_type t1261 = t20 * t20;
    real_type t1262 = t486 * t1261;
    real_type t1263 = t486 * t472;
    real_type t1264 = -2 * t20 * t476 * t15 - t1262 + t1263;
    real_type t1265 = t1264 * t53;
    real_type t1269 = t475 * t1261;
    real_type t1270 = t475 * t472;
    real_type t1272 = -2 * t20 * t517 * t15 - 2 * t1269 + 2 * t1270;
    real_type t1285 = t79 * t1272;
    real_type t1289 = t79 * t1264;
    real_type t1310 = t15 * t20 * t676;
    real_type t1313 = -t1261 * t659 - 2 * t1310 + t660;
    real_type t1329 = t15 * t20 * t796;
    result__[ 26  ] = t11 * t231 + t313 * t409 + t319 * (t1265 * t160 + t58 * (t118 * t557 * t160 - 2 * t181 * t1272 * t53) + t1077 - 2 * t590 * t1265 * t160) + t92 * (-2 * t976 * t53 * t1285 + t58 * (2 * t77 * t333 * t1116 + 2 * t181 * t53 * t1289) - 2 * t196 * t609 * t1116 + t1116 * t1285) + t111 * (-t976 * t605 * (-t1261 * t667 + t472 * t667 - 2 * t699) + t58 * (-t181 * t605 * t1313 - t159 * t6 * (t605 * (t763 + t786) - t763 + t759)) - t396 * t6 * (t605 * (-t750 - t725) - t731 + t725) - t160 * t605 * (-t1261 * t802 + t472 * t802 - 2 * t1329)) + t125 * (-t852 * t118 * t160 + t1157);
    real_type t1346 = t45 * t536;
    real_type t1347 = t48 - t1346;
    real_type t1348 = t1347 * t53;
    real_type t1353 = t87 * t80;
    real_type t1355 = t1353 * t242 + t45 * t557;
    real_type t1357 = t73 * t1355 * t160;
    real_type t1358 = t590 * t510;
    real_type t1363 = t79 * t1347;
    real_type t1383 = -2 * t1347;
    real_type t1388 = t77 * t45;
    real_type t1398 = -t1383;
    real_type t1399 = t6 * t1398;
    real_type t1404 = t45 * t160;
    result__[ 27  ] = -t11 * t202 * t243 + t313 * t396 * t127 + t319 * (-2 * t1139 * t6 * t1348 + 2 * t1358 * t1116 - t1092 - t1357) + t92 * (-2 * t976 * t53 * t1363 + t58 * (-2 * t396 * t1101 * t872 - (-2 * t1353 * t45 * t605 + 2 * t609 * t238 + t87 * t81) * t160)) + t111 * (-t976 * t605 * t1383 + t58 * (-t181 * t605 * t709 - t159 * t6 * (-2 * t53 * t327 * t81 - 2 * t605 * t1388 + 2 * t1388)) - t159 * t1399) + t115 * (t1083 * t1404 + t1088 * t1250);
    real_type t1413 = t3 * t396;
    real_type t1422 = t53 * t248;
    real_type t1424 = t3 * t590 * t514;
    real_type t1433 = t431 * t248;
    real_type t1447 = t3 * t1024;
    real_type t1465 = t841 * t248;
    real_type t1471 = t3 * t58;
    real_type t1478 = t3 * t859 * t248;
    real_type t1483 = t73 * t45;
    real_type t1484 = t3 * t1483;
    real_type t1487 = t507 * t248;
    real_type t1493 = t159 * t247 * t87;
    real_type t1496 = t3 * t248;
    real_type t1498 = -t431 * t878 * t1493 + t1496 * t881;
    real_type t1500 = t888 * t856;
    real_type t1501 = t3 * t1500;
    result__[ 28  ] = t11 * t271 + t313 * t429 + t319 * (-t3 * t515 * t248 + t58 * (2 * t1413 * t247 * t553 + t3 * t571 * t248) + t3 * t588 * t248 + 2 * t1424 * t1422) + t92 * (2 * t3 * t590 * t248 * t597 + t58 * (t3 * t613 * t248 - 2 * t1433 * t602) + t3 * t626 * t248 + t269 * t247 * t642) + t111 * (t1447 * t247 * t695 + t58 * (t1413 * t247 * t720 + t269 * t247 * t754) + t1413 * t247 * t790 + t269 * t247 * t824) + t115 * (-t1413 * t247 * t842 - t3 * t327 * t1465 + t3 * t839 * t248) + t125 * (t431 * t609 * t121 * t248 - t1471 * t337 * t77 * t248 + t1478) + t129 * (-2 * t1484 * t159 * t247 * t866 - t3 * t242 * t1487) + t884 * t1498 + t1501 * t264;
    real_type t1506 = t73 * t291;
    real_type t1517 = t590 * t291;
    real_type t1547 = t859 * t291;
    real_type t1557 = t290 * t876;
    real_type t1560 = t879 * t1557 - t291 * t881;
    real_type t1562 = t856 * t290;
    result__[ 29  ] = t11 * t302 + t313 * t455 + t319 * (t515 * t291 + t58 * (-2 * t1506 * t553 - t571 * t291) - t588 * t291 - 2 * t591 * t291) + t92 * (-2 * t1517 * t597 + t58 * (2 * t1506 * t602 - t613 * t291) - t626 * t291 - t290 * t643) + t111 * (-t1517 * t695 + t58 * (-t1506 * t720 - t290 * t755) - t310 * t791 - t290 * t825) + t115 * (t1506 * t842 - t839 * t291 + t845 * t291) + t125 * (-t852 * t121 * t291 + t392 * t77 * t291 - t1547) + t129 * (2 * t73 * t45 * t290 * t867 + t872 * t291) + t884 * t1560 - t888 * t1562 * t886;
    real_type t1565 = LL__[19];
    result__[ 30  ] = -t1565 * t9;
    result__[ 31  ] = t1565 * t133;
    result__[ 32  ] = t3 * t1565 * t248;
    result__[ 33  ] = -t1565 * t291;
    real_type t1569 = LL__[20];
    result__[ 34  ] = -t1569 * t9;
    result__[ 35  ] = t1569 * t133;
    result__[ 36  ] = t3 * t1569 * t248;
    result__[ 37  ] = -t1569 * t291;
    real_type t1573 = LL__[21];
    result__[ 38  ] = -t1573 * t9;
    result__[ 39  ] = t1573 * t133;
    result__[ 40  ] = t3 * t1573 * t248;
    result__[ 41  ] = -t1573 * t291;
    real_type t1577 = LL__[22];
    result__[ 42  ] = -t1577 * t9;
    result__[ 43  ] = t1577 * t133;
    result__[ 44  ] = t3 * t1577 * t248;
    result__[ 45  ] = -t1577 * t291;
    real_type t1581 = LL__[23];
    result__[ 46  ] = -t1581 * t9;
    result__[ 47  ] = t1581 * t133;
    result__[ 48  ] = t3 * t1581 * t248;
    result__[ 49  ] = -t1581 * t291;
    real_type t1585 = LL__[24];
    result__[ 50  ] = -t1585 * t9;
    result__[ 51  ] = t1585 * t133;
    result__[ 52  ] = t3 * t1585 * t248;
    result__[ 53  ] = -t1585 * t291;
    real_type t1589 = LL__[25];
    result__[ 54  ] = -t1589 * t9;
    result__[ 55  ] = t1589 * t133;
    result__[ 56  ] = t3 * t1589 * t248;
    result__[ 57  ] = -t1589 * t291;
    real_type t1593 = LL__[26];
    result__[ 58  ] = -t1593 * t9;
    result__[ 59  ] = t1593 * t133;
    result__[ 60  ] = t3 * t1593 * t248;
    result__[ 61  ] = -t1593 * t291;
    real_type t1597 = LL__[27];
    result__[ 62  ] = -t1597 * t9;
    result__[ 63  ] = t1597 * t133;
    result__[ 64  ] = t3 * t1597 * t248;
    result__[ 65  ] = -t1597 * t291;
    real_type t1601 = LL__[28];
    result__[ 66  ] = -t1601 * t9;
    result__[ 67  ] = t1601 * t133;
    result__[ 68  ] = t3 * t1601 * t248;
    result__[ 69  ] = -t1601 * t291;
    real_type t1605 = LL__[29];
    result__[ 70  ] = -t1605 * t9;
    result__[ 71  ] = t1605 * t133;
    result__[ 72  ] = t3 * t1605 * t248;
    result__[ 73  ] = -t1605 * t291;
    real_type t1609 = LL__[30];
    result__[ 74  ] = -t1609 * t9;
    result__[ 75  ] = t1609 * t133;
    result__[ 76  ] = t3 * t1609 * t248;
    result__[ 77  ] = -t1609 * t291;
    real_type t1613 = LL__[31];
    result__[ 78  ] = -t1613 * t9;
    result__[ 79  ] = t1613 * t133;
    result__[ 80  ] = t3 * t1613 * t248;
    result__[ 81  ] = -t1613 * t291;
    real_type t1617 = LL__[32];
    result__[ 82  ] = -t1617 * t9;
    result__[ 83  ] = t1617 * t133;
    result__[ 84  ] = t3 * t1617 * t248;
    result__[ 85  ] = -t1617 * t291;
    real_type t1625 = t125 * t856;
    real_type t1627 = t1500 * t9;
    result__[ 86  ] = -t92 * t887 * t1101 - t111 * t887 * t886 - t1625 * t9 - t1627;
    real_type t1633 = t1500 * t133;
    result__[ 87  ] = t92 * t950 * t1101 + t111 * t950 * t886 + t1625 * t133 + t1633;
    result__[ 88  ] = -t111 * t1102 * t1101 + t92 * t1102 * t886;
    real_type t1646 = t1501 * t248;
    result__[ 89  ] = t3 * t111 * t856 * t264 + t3 * t92 * t856 * t1422 + t3 * t1625 * t248 + t1646;
    real_type t1652 = t1500 * t291;
    result__[ 90  ] = -t92 * t1562 * t1101 - t111 * t1562 * t886 - t1625 * t291 - t1652;
    real_type t1653 = t58 * t565;
    real_type t1654 = t319 * t1653;
    real_type t1661 = t6 * t565;
    real_type t1663 = t884 * t8 * t1661;
    result__[ 91  ] = t1654 * t877 + t92 * (-t554 * t1096 - t878 * t9) + t111 * t883 - t1663;
    real_type t1671 = t884 * t132 * t1661;
    result__[ 92  ] = -t1654 * t945 + t92 * (t894 * t1096 + t878 * t133) + t111 * t948 + t1671;
    result__[ 93  ] = t92 * (-t879 * t1165 + t160 * t881) + t111 * t1099;
    result__[ 94  ] = -t92 * t58 * t160 * t1096 + t111 * t58 * t878 * t1165 - t319 * t1253 * t1165;
    real_type t1687 = t92 * t396;
    result__[ 95  ] = t111 * t1253 * t1116 - t1687 * t6 * t881 + t1654 * t160;
    real_type t1691 = t3 * t319;
    real_type t1703 = t3 * t884 * t159 * t247 * t565;
    result__[ 96  ] = -t1691 * t1653 * t1493 + t92 * (t3 * t878 * t248 + t1433 * t1096) + t111 * t1498 + t1703;
    real_type t1711 = t884 * t290 * t1661;
    result__[ 97  ] = t1654 * t1557 + t92 * (-t1506 * t1096 - t878 * t291) + t111 * t1560 - t1711;
    real_type t1712 = t27 * t33;
    real_type t1713 = t224 - t63 + t1712 + t66 + t68 - t70;
    real_type t1714 = t1713 * t53;
    real_type t1715 = t73 * t1714;
    real_type t1717 = -t176;
    real_type t1718 = t6 * t1717;
    real_type t1723 = t1713 * t79;
    real_type t1724 = t73 * t1723;
    real_type t1728 = LL__[2];
    real_type t1731 = -4 * t475;
    real_type t1735 = -t1731 * t489;
    real_type t1736 = 2 * t493;
    real_type t1737 = -t679;
    real_type t1740 = (t1737 * t67 - t704) * t42;
    real_type t1742 = 2 * t511;
    real_type t1743 = t1731 * t472 + t1735 + t1736 + t1740 - t1742 - 2 * t488 + 2 * t509 + t704 - t711 + t717 + t718;
    real_type t1744 = t73 * t1743;
    real_type t1746 = t77 * t51;
    real_type t1753 = 2 * t517;
    real_type t1757 = -t489 * t1753;
    real_type t1758 = 4 * t524;
    real_type t1759 = t1737 * t526;
    real_type t1760 = t545 * t10;
    real_type t1761 = t472 * t1753 + t1757 - t1758 + t1759 + t1760 + 4 * t520 + t534 + t548 - t550 + t634 - t681 - t682 + t688 + t689 + t692 - t693 + t821;
    real_type t1762 = t6 * t1761;
    real_type t1765 = t517 * t489;
    real_type t1766 = t498 * t526;
    real_type t1767 = t1263 - t521 + t1765 + t525 + t633 + t1766 - t634 + t635 - t495 - t496 + t497 + t550;
    real_type t1768 = t6 * t1767;
    real_type t1785 = t489 * t659;
    real_type t1787 = t33 * t36 * t667;
    real_type t1788 = t472 * t672 + t1310 + t1759 + t1760 + t1785 + t1787 + t534 + t548 - t550 + t634 - t681 - t682 + t688 + t689 + t692 - t693 + t821;
    real_type t1789 = t53 * t1788;
    real_type t1791 = t77 * t39;
    real_type t1792 = t15 * t1791;
    real_type t1793 = t1712 + t68 + t66 - t70;
    real_type t1795 = t77 * t1793 + t1792 - t762;
    real_type t1796 = t53 * t1795;
    real_type t1798 = t45 * t774 - t561 - t563 + t564 - t565 + t566 - t567;
    real_type t1799 = t87 * t1798;
    real_type t1801 = t79 * t1799 + t1796;
    real_type t1802 = t6 * t1801;
    real_type t1806 = t20 * t1791;
    real_type t1809 = t724 + t1806 + t77 * (-t35 + t95 - t43 + t31 - t46 + t48 + t50);
    real_type t1811 = t53 * t1809 + t845;
    real_type t1812 = t6 * t1811;
    real_type t1815 = t489 * t802;
    real_type t1817 = t33 * t36 * t807;
    real_type t1820 = (t527 * t67 - t471) * t42;
    real_type t1822 = -t45 * t714;
    real_type t1823 = t472 * t811 + t1329 + t1815 + t1817 + t1820 + t1822 + t471 - t505 + t509 + t512 + t513;
    real_type t1824 = t53 * t1823;
    real_type t1828 = t58 * t584;
    real_type t1829 = t1828 * t9;
    real_type t1830 = -t835;
    real_type t1831 = t73 * t1830;
    real_type t1833 = t1229 * t9;
    real_type t1836 = t6 * t81;
    real_type t1837 = t87 * t8;
    real_type t1838 = t129 * t58;
    real_type t1841 = t884 * t1653;
    real_type t1843 = XL__[15];
    real_type t1844 = t1843 * t8;
    real_type t1845 = LL__[11];
    real_type t1848 = XL__[16];
    real_type t1849 = sin(t1848);
    real_type t1850 = t1849 * t53;
    real_type t1851 = cos(t1848);
    real_type t1853 = -t1851 * t79 + t1850;
    real_type t1855 = t73 * t87 * t1853;
    real_type t1856 = t1855 * t9;
    real_type t1859 = t79 * t1849 + t53 * t1851;
    real_type t1860 = t1859 * t9;
    real_type t1862 = LL__[12];
    real_type t1865 = ModelPars[124];
    real_type t1866 = -ModelPars[122] + t1865;
    real_type t1867 = t1866 * t1851;
    real_type t1868 = XL__[11];
    real_type t1869 = t1867 - t1868 - t1865;
    real_type t1871 = -t1866;
    real_type t1872 = t1849 * t1871;
    real_type t1873 = XL__[10];
    real_type t1874 = t1872 - t1873;
    real_type t1877 = LL__[14];
    real_type t1878 = t1877 * (t1869 * t53 - t79 * t1874);
    real_type t1880 = t1851 * t1871;
    real_type t1881 = t1880 + t1865 + t1868;
    real_type t1884 = t1866 * t1849 + t1873;
    real_type t1887 = LL__[15];
    real_type t1888 = t1887 * (t1881 * t79 + t53 * t1884);
    real_type t1890 = ModelPars[125];
    real_type t1892 = -t1890 - XL__[14];
    real_type t1894 = XL__[13];
    real_type t1895 = t79 * t1894;
    real_type t1897 = LL__[17];
    real_type t1898 = t1897 * (t1892 * t53 + t1895);
    real_type t1900 = -t1892;
    real_type t1902 = t53 * t1894;
    real_type t1904 = LL__[18];
    real_type t1905 = t1904 * (t1900 * t79 + t1902);
    result__[ 98  ] = t313 * (-t1715 * t9 - t8 * t1718 - t60) + t1728 * (-t162 * t9 - t167 * t9 - t1724 * t9) + t319 * (t58 * (-t1744 * t9 + 2 * t9 * t1746) - 2 * t554 * t621 - t590 * t8 * t1762 - t8 * t1768) + t92 * (2 * t954 * t9 + t58 * (2 * t554 * t596 - t962 * t9) - t970 * t9 - t601 * t9) + t111 * (-t598 * t1028 + t58 * (-t554 * t1789 - t8 * t1802) - t128 * t1812 - t9 * t1824) + t115 * (-t1831 * t9 - t1829 + t1833) - t1838 * t1837 * t1836 + t1841 * t877 + t1845 * t1844 * t886 + t1862 * (t1856 - t1860) - t1878 * t9 - t1888 * t9 - t1898 * t9 - t1905 * t9;
    real_type t1948 = t1828 * t133;
    real_type t1950 = t1229 * t133;
    real_type t1953 = t87 * t132;
    real_type t1957 = t1843 * t132;
    real_type t1960 = t1855 * t133;
    real_type t1961 = t1859 * t133;
    result__[ 99  ] = t313 * (t132 * t1718 + t1715 * t133 + t136) + t1728 * (t133 * t162 + t133 * t167 + t1724 * t133) + t319 * (t58 * (t1744 * t133 - 2 * t133 * t1746) + 2 * t894 * t621 + t590 * t132 * t1762 + t132 * t1768) + t92 * (-2 * t954 * t133 + t58 * (t962 * t133 - 2 * t894 * t596) + t970 * t133 + t601 * t133) + t111 * (t905 * t1028 + t58 * (t132 * t1802 + t894 * t1789) + t152 * t1812 + t133 * t1824) + t115 * (t1831 * t133 + t1948 - t1950) + t1838 * t1953 * t1836 - t1841 * t945 - t1845 * t1957 * t886 + t1862 * (-t1960 + t1961) + t1878 * t133 + t1888 * t133 + t1898 * t133 + t1905 * t133;
    real_type t1968 = t1724 * t160;
    real_type t1972 = t172 * t54;
    real_type t1973 = t1715 * t160;
    real_type t1983 = -t587;
    real_type t1985 = t73 * t1983 * t160;
    real_type t1993 = t79 * t1795;
    real_type t2008 = t1843 * t159;
    real_type t2011 = -t1859;
    real_type t2014 = t73 * t87 * t2011 * t160;
    real_type t2015 = t1853 * t160;
    result__[ 100 ] = t313 * (-t159 * t108 + t163 + t1968) + t1728 * (-t316 * t160 - t1972 - t1973) + t92 * (2 * t591 * t160 + t58 * (t571 * t160 + t1110) - t1985 - t515 * t160) + t111 * (t976 * t79 * t719 + t58 * (t181 * t79 * t1788 - t159 * t6 * (t53 * t1799 - t1993)) - t396 * t6 * (-t79 * t1809 + t1068) + t160 * t79 * t1823) + t1845 * t2008 * t1101 + t1862 * (t2014 - t2015) - t1877 * (-t1869 * t79 - t53 * t1874) * t160 - t1887 * (t1881 * t53 - t79 * t1884) * t160 - t1897 * (-t1892 * t79 + t1902) * t160 - t1904 * (t1900 * t53 - t1895) * t160;
    real_type t2036 = t58 * t1714;
    real_type t2037 = t2036 * t160;
    real_type t2041 = t73 * t161 * t160;
    real_type t2042 = t58 * t1723;
    real_type t2045 = t1728 * (-t2042 * t160 + t2041);
    real_type t2059 = t79 * t160;
    real_type t2080 = t73 * t584 * t160;
    real_type t2089 = t1862 * t114;
    real_type t2090 = t2089 * t2015;
    result__[ 101 ] = t313 * (t182 - t2037) + t2045 + t319 * (-t590 * t1743 * t160 - t73 * (-t1744 * t160 + 2 * t160 * t1746) - 2 * t172 * t621 + 2 * t1139 * t1762) + t92 * (-t58 * t969 * t160 - 4 * t1118 * t2059 + 2 * t976 * t596 - t73 * t964) + t111 * (2 * t1139 * t1029 - t976 * t1789 - t73 * (-t159 * t1802 - t181 * t1789) - t202 * t1812) + t115 * (-t58 * t1830 * t160 + t2080) + t285 * t87 * t159 * t1836 - t1254 * t1165 + t2090;
    real_type t2092 = t313 * t76 * t160;
    real_type t2094 = t1728 * t160 * t102;
    real_type t2100 = t92 * (-t189 - t2041);
    real_type t2102 = -t171 * t181 - t2037;
    real_type t2103 = t111 * t2102;
    result__[ 102 ] = t2092 + t2094 + t319 * (-2 * t160 * t1177 - 2 * t382 + 2 * t384) + t2100 + t2103 + t115 * t85 * t160;
    real_type t2110 = t1728 * t165 * t160;
    real_type t2113 = t73 * t966;
    real_type t2114 = t2113 * t160;
    real_type t2125 = t1862 * t73 * t1853 * t160;
    result__[ 103 ] = -t313 * t160 * t79 * t104 - t2110 + t92 * (t58 * t959 * t160 + t2114) + t111 * (-t172 * t79 * t1798 - t1067) - t203 * t1836 + t1841 * t160 + t2125;
    real_type t2126 = -t94 - t19;
    real_type t2127 = t2126 * t53;
    real_type t2132 = t334 * t160;
    real_type t2133 = t2126 * t79;
    real_type t2144 = t77 * t121;
    real_type t2149 = t118 * t77;
    real_type t2188 = -t1806 - t724;
    real_type t2193 = -t762 + t1792;
    result__[ 104 ] = t313 * (-t73 * t2127 * t160 - t218) + t1728 * (-t73 * t2133 * t160 - t2132) + t319 * (t58 * (-t73 * (-2 * t20 * t1731 * t15 + 2 * t1262 - 2 * t1263) * t160 + 2 * t160 * t2144) - 2 * t181 * t2149 - t1024 * t6 * (-2 * t20 * t15 * t1753 - 4 * t1269 + 4 * t1270) - t159 * t6 * (-2 * t488 + 2 * t1269 - 2 * t1270)) + t92 * (2 * t590 * t1289 * t160 + t58 * (-t118 * t609 * t160 + 2 * t181 * t1285) - t852 * t1075 - t1289 * t160) + t111 * (-t976 * t53 * t1313 + t58 * (-t181 * t53 * (-2 * t20 * t15 * t672 - t1261 * t676 + t697) - t160 * t53 * t2188) - t181 * t53 * t2193 - t160 * t53 * (-2 * t20 * t15 * t811 - t1261 * t796 + t797));
    real_type t2206 = t313 * t202 * t239;
    real_type t2208 = t1728 * t202 * t243;
    real_type t2225 = -t79 * t1388 + t368 * t81;
    real_type t2226 = t6 * t2225;
    real_type t2228 = t872 * t160;
    real_type t2238 = t58 * t80;
    result__[ 105 ] = t2206 + t2208 + t319 * (t58 * (-2 * t73 * t510 * t160 - 2 * t160 * t1388) - t1024 * t1399) + t92 * (2 * t1139 * t6 * t1363 - 2 * t1358 * t2059 - t396 * t2226 + t2228) + t111 * (-t1139 * t6 * t53 * t1398 - t976 * t53 * t709 - t1092 - t1357) + t115 * t2238 * t1404;
    real_type t2241 = t1877 * t159;
    real_type t2243 = t1887 * t159;
    result__[ 106 ] = -t2243 * t1101 - t2241 * t886;
    result__[ 107 ] = t2241 * t1101 - t2243 * t886;
    real_type t2247 = t1897 * t159;
    real_type t2249 = t1904 * t159;
    result__[ 108 ] = -t2249 * t1101 - t2247 * t886;
    result__[ 109 ] = t2247 * t1101 - t2249 * t886;
    real_type t2253 = t1845 * t159;
    result__[ 110 ] = t2253 * t886;
    real_type t2256 = t73 * t87 * t1859 * t160;
    real_type t2257 = -t1853;
    real_type t2258 = t2257 * t160;
    result__[ 111 ] = t1862 * (t2256 - t2258) - t1877 * (-t1866 * t1850 - t79 * t1880) * t160 - t1887 * (-t1849 * t1871 * t79 + t53 * t1867) * t160;
    real_type t2272 = t73 * t1713;
    real_type t2273 = t3 * t2272;
    real_type t2279 = t3 * t383;
    real_type t2330 = t3 * t1828 * t248;
    real_type t2334 = t3 * t1229 * t248;
    real_type t2337 = t248 * t81;
    real_type t2346 = t1853 * t248;
    real_type t2347 = t3 * t193;
    real_type t2348 = t2347 * t2346;
    result__[ 112 ] = t313 * (t269 * t247 * t1717 + t2273 * t1422 + t253) + t1728 * (t167 * t248 * t3 + t2273 * t264 + t2279 * t264) + t319 * (t58 * (t3 * t1744 * t248 - 2 * t1496 * t1746) + 2 * t1413 * t247 * t621 + t1447 * t247 * t1761 + t269 * t247 * t1767) + t92 * (-2 * t1424 * t264 + t58 * (-2 * t1413 * t247 * t596 + t3 * t962 * t248) + t3 * t970 * t248 + t3 * t601 * t248) + t111 * (t1447 * t247 * t1028 + t58 * (t1413 * t247 * t1789 + t269 * t247 * t1801) + t1413 * t247 * t1811 + t1496 * t1824) + t115 * (t3 * t1831 * t248 + t2330 - t2334) + t446 * t114 * t2337 - t3 * t884 * t1653 * t1493 - t3 * t1845 * t1843 * t264 + t1862 * (t3 * t1859 * t248 - t2348) + t3 * t1878 * t248 + t3 * t1888 * t248 + t3 * t1898 * t248 + t3 * t1905 * t248;
    real_type t2402 = t1828 * t291;
    real_type t2404 = t1229 * t291;
    real_type t2407 = t87 * t290;
    real_type t2411 = t1843 * t290;
    real_type t2414 = t1855 * t291;
    real_type t2415 = t1859 * t291;
    result__[ 113 ] = t313 * (-t1715 * t291 - t290 * t1718 - t294) + t1728 * (-t162 * t291 - t167 * t291 - t1724 * t291) + t319 * (t58 * (-t1744 * t291 + 2 * t291 * t1746) - 2 * t1506 * t621 - t590 * t290 * t1762 - t290 * t1768) + t92 * (2 * t954 * t291 + t58 * (2 * t1506 * t596 - t962 * t291) - t970 * t291 - t601 * t291) + t111 * (-t1517 * t1028 + t58 * (-t1506 * t1789 - t290 * t1802) - t310 * t1812 - t291 * t1824) + t115 * (-t1831 * t291 - t2402 + t2404) - t1838 * t2407 * t1836 + t1841 * t1557 + t1845 * t2411 * t886 + t1862 * (t2414 - t2415) - t1878 * t291 - t1888 * t291 - t1898 * t291 - t1905 * t291;
    real_type t2428 = -t2042 * t9 - t554 * t97;
    real_type t2431 = t554 * t54;
    real_type t2434 = t58 * t624;
    real_type t2436 = t73 * t612;
    real_type t2440 = t58 * t1983;
    real_type t2442 = t73 * t571;
    real_type t2445 = t822 * t10 / 2;
    real_type t2446 = t636 / 2;
    real_type t2447 = -t530 + t535 - t538 - t532 + t541 + t542 + t2445 + t2446;
    real_type t2448 = t53 * t2447;
    real_type t2453 = t77 * t27;
    real_type t2454 = t20 * t2453;
    real_type t2457 = -t724 + t2454 + t77 * (t35 + t40 + t43 - t31 + t46 - t48 - t50);
    real_type t2459 = t79 * t2457 + t1068;
    real_type t2460 = t6 * t2459;
    real_type t2463 = -t45 * t774;
    real_type t2464 = t2463 + t561 + t563 - t564 + t565 - t566 + t567;
    real_type t2465 = t87 * t2464;
    real_type t2467 = t53 * t2465 + t1993;
    real_type t2468 = t6 * t2467;
    real_type t2471 = -t822 * t10;
    real_type t2472 = t681 - t534 + t682 + t634 + t687 - t689 + t2471 - t636;
    real_type t2473 = t79 * t2472;
    real_type t2477 = t115 * t844;
    real_type t2481 = -t854 * t16 - t483 - t856 - t857;
    real_type t2482 = t125 * t2481;
    real_type t2484 = t129 * t510;
    real_type t2489 = t73 * t707;
    real_type t2491 = t536 - t47;
    real_type t2492 = t58 * t2491;
    real_type t2495 = LL__[13];
    real_type t2497 = t58 * t507;
    real_type t2499 = t73 * t2491;
    real_type t2503 = t20 * t21;
    real_type t2505 = t15 * t21;
    real_type t2507 = t59 * t2503 - t554 * t2505;
    real_type t2508 = LL__[16];
    real_type t2512 = t554 * t2503 + t59 * t2505;
    result__[ 114 ] = t11 * (-t2272 * t9 - t383 * t9) + t313 * t2428 + t1728 * (t2036 * t9 - t2431) + t319 * (-t2434 * t9 - t2436 * t9) + t92 * (-t2440 * t9 - t2442 * t9 + 2 * t9 * t2448) + t111 * (-t128 * t2468 - t342 * t2460 - t9 * t2473) - t2477 * t9 - t2482 * t9 - t2484 * t9 + t1663 + t1627 - t1845 * t128 * t876 + t2089 * t1860 + t2495 * (-t2489 * t9 - t2492 * t9) + t1887 * (-t2497 * t9 - t2499 * t9) + t2508 * t2507 + t1904 * t2512;
    real_type t2520 = t2042 * t133 + t894 * t97;
    real_type t2523 = t894 * t54;
    real_type t2557 = -t135 * t2503 + t894 * t2505;
    real_type t2561 = -t135 * t2505 - t894 * t2503;
    result__[ 115 ] = t11 * (t2272 * t133 + t383 * t133) + t313 * t2520 + t1728 * (-t2036 * t133 + t2523) + t319 * (t2434 * t133 + t2436 * t133) + t92 * (t2440 * t133 + t2442 * t133 - 2 * t133 * t2448) + t111 * (t133 * t2473 + t152 * t2468 + t361 * t2460) + t2477 * t133 + t2482 * t133 + t2484 * t133 - t1671 - t1633 + t1845 * t152 * t876 - t2089 * t1961 + t2495 * (t2489 * t133 + t2492 * t133) + t1887 * (t2497 * t133 + t2499 * t133) + t2508 * t2557 + t1904 * t2561;
    result__[ 116 ] = t313 * t2102 + t2045 + t92 * (-2 * t160 * t79 * t2447 + t58 * t969 * t160 - t73 * t962 * t160) + t111 * (-t202 * t6 * (t53 * t2457 - t845) - t396 * t6 * (-t79 * t2465 + t1796) - t160 * t53 * t2472) + t2090;
    real_type t2587 = t58 * t1713;
    real_type t2592 = -t172 * t97 + t1968;
    real_type t2627 = -t172 * t2505 - t181 * t2503;
    real_type t2628 = t2508 * t2627;
    real_type t2631 = t172 * t2503 - t181 * t2505;
    real_type t2632 = t1904 * t2631;
    result__[ 117 ] = t11 * (-t2587 * t160 + t323 * t160) + t313 * t2592 + t1728 * (-t1973 - t1972) + t319 * (-t58 * t612 * t160 + t73 * t624 * t160) + t92 * (-t58 * t571 * t160 + t1985) + t111 * (-t202 * t2468 + t396 * t2460) - t1845 * t202 * t876 - t1862 * t193 * t1859 * t160 + t2495 * (-t58 * t707 * t160 + t2499 * t160) + t1887 * (t73 * t507 * t160 - t2492 * t160) + t2628 + t2632;
    real_type t2633 = -t1972 + t174;
    result__[ 118 ] = t92 * t2633 + t111 * (-t163 - t1968);
    real_type t2642 = t58 * t585 * t160;
    real_type t2653 = t1845 * t73;
    real_type t2654 = t2653 * t160;
    result__[ 119 ] = t319 * (-t58 * t568 * t160 - t2080) + t92 * (t73 * t569 * t160 - t2642) + t111 * (-t181 * t53 * t2464 - t1152) - t115 * t841 * t160 - t2654 + t1862 * t58 * t1859 * t160;
    real_type t2665 = -t58 * t2133 * t160 - t181 * t226;
    real_type t2669 = t181 * t216;
    real_type t2679 = t15 * t2453 + t762;
    real_type t2680 = t79 * t2679;
    real_type t2681 = t172 * t2680;
    real_type t2687 = -t2508 * t2627;
    real_type t2689 = -t1904 * t2631;
    result__[ 120 ] = t11 * (-t73 * t2126 * t160 - t199) + t313 * t2665 + t1728 * (t58 * t2127 * t160 - t2669) + t92 * (-t58 * t2144 * t1116 + t73 * t2149 * t1116) + t111 * (-t181 * t79 * t2188 - t2681) + t2687 + t2689;
    real_type t2691 = t11 * t1161 * t160;
    real_type t2693 = t313 * t1483 * t2059;
    real_type t2695 = t1728 * t396 * t239;
    real_type t2698 = t319 * t73 * t1353 * t1404;
    real_type t2699 = -t1355;
    real_type t2714 = t2495 * t58 * t160;
    real_type t2716 = t1887 * t73 * t160;
    result__[ 121 ] = t2691 - t2693 + t2695 + t2698 + t92 * (-t58 * t2699 * t160 + 2 * t160 * t1348) + t111 * (-t160 * t79 * t1383 - t202 * t2226) - t115 * t1353 * t1404 + t2714 + t2716;
    result__[ 122 ] = t2089 * t2258;
    real_type t2721 = t3 * t2587;
    real_type t2724 = t1413 * t262 + t2721 * t264;
    real_type t2727 = t1413 * t251;
    real_type t2733 = t584 * t248;
    real_type t2762 = t1859 * t248;
    real_type t2778 = t247 * t2503;
    real_type t2780 = t247 * t2505;
    real_type t2782 = t1413 * t2780 - t252 * t2778;
    real_type t2786 = -t1413 * t2778 - t252 * t2780;
    result__[ 123 ] = t11 * (t2273 * t248 + t2279 * t248) + t313 * t2724 + t1728 * (-t2721 * t1422 + t2727) + t319 * (t3 * t114 * t568 * t248 + t2347 * t2733) + t92 * (t3 * t2440 * t248 + t3 * t2442 * t248 - 2 * t1496 * t2448) + t111 * (t1413 * t247 * t2467 + t252 * t247 * t2459 + t1496 * t2473) + t3 * t115 * t87 * t1465 + t3 * t2482 * t248 + t3 * t129 * t45 * t1487 - t1703 - t1646 + t3 * t2653 * t1493 - t3 * t1862 * t114 * t2762 + t2495 * (t3 * t2489 * t248 + t3 * t2492 * t248) + t1887 * (t3 * t2497 * t248 + t3 * t2499 * t248) + t2508 * t2782 + t1904 * t2786;
    real_type t2794 = -t1506 * t97 - t2042 * t291;
    real_type t2797 = t1506 * t54;
    real_type t2831 = -t1506 * t2505 + t293 * t2503;
    real_type t2835 = t1506 * t2503 + t293 * t2505;
    result__[ 124 ] = t11 * (-t2272 * t291 - t383 * t291) + t313 * t2794 + t1728 * (t2036 * t291 - t2797) + t319 * (-t2434 * t291 - t2436 * t291) + t92 * (-t2440 * t291 - t2442 * t291 + 2 * t291 * t2448) + t111 * (-t465 * t2460 - t310 * t2468 - t291 * t2473) - t2477 * t291 - t2482 * t291 - t2484 * t291 + t1711 + t1652 - t1845 * t310 * t876 + t2089 * t2415 + t2495 * (-t2489 * t291 - t2492 * t291) + t1887 * (-t2497 * t291 - t2499 * t291) + t2508 * t2831 + t1904 * t2835;
    real_type t2837 = t313 * t102;
    real_type t2839 = t1728 * t76;
    real_type t2841 = t319 * t640;
    real_type t2848 = t58 * t225;
    result__[ 125 ] = t2837 * t9 - t2839 * t9 - t2841 * t9 + t92 * (t183 * t9 + t2431) + t111 * t2428 + t194 * t113 + t125 * (-t196 * t9 - t2848 * t9) - t343 * t127 - t1887 * t9 - t1904 * t9;
    result__[ 126 ] = -t2837 * t133 + t2839 * t133 + t2841 * t133 + t92 * (-t133 * t183 - t2523) + t111 * t2520 - t194 * t146 + t125 * (t133 * t196 + t2848 * t133) + t362 * t127 + t1887 * t133 + t1904 * t133;
    result__[ 127 ] = t2092 + t2094 + t2100 + t2103;
    result__[ 128 ] = -t92 * t2633 + t111 * t2592 + t116 * t192 + t125 * (t73 * t225 * t160 - t407) + t397 * t127;
    real_type t2881 = t319 * t85 * t160;
    result__[ 129 ] = t115 * t73 * t85 * t160 - t2881;
    real_type t2887 = t58 * t219 * t160 + t2669;
    result__[ 130 ] = t92 * t2887 + t111 * t2665 + t125 * (-t58 * t2126 * t160 - t73 * t233 * t160);
    result__[ 131 ] = -t111 * t1483 * t2059 - t1687 * t239;
    result__[ 132 ] = -t419 * t264 + t3 * t1728 * t10 * t1422 + t3 * t319 * t87 * t273 + t92 * (-t254 * t3 * t53 * t58 - t2727) + t111 * t2724 - t274 * t193 * t273 + t125 * (t196 * t248 * t3 + t3 * t2848 * t248) + t3 * t1838 * t284 + t3 * t1887 * t248 + t3 * t1904 * t248;
    result__[ 133 ] = t2837 * t291 - t2839 * t291 - t2841 * t291 + t92 * (t183 * t291 + t2797) + t111 * t2794 + t194 * t304 + t125 * (-t196 * t291 - t2848 * t291) - t466 * t127 - t1887 * t291 - t1904 * t291;
    real_type t2941 = t313 * t165;
    real_type t2943 = t6 * t85;
    real_type t2947 = -t559 - t561 - t563 - t564 - t834;
    real_type t2948 = t73 * t2947;
    real_type t2952 = -t2947;
    real_type t2953 = t2952 * t79;
    real_type t2954 = t58 * t2953;
    real_type t2959 = t2463 + t561 + t563 + t564 + t834;
    real_type t2960 = t53 * t2959;
    real_type t2965 = t830 + t561 + t564 + t834;
    real_type t2966 = t115 * t2965;
    real_type t2968 = t1845 * t58;
    real_type t2971 = t1862 * t73 * t2011;
    real_type t2973 = t6 * t80;
    real_type t2974 = t1877 * t8;
    result__[ 134 ] = -t2941 * t9 - t1728 * t79 * t8 * t2943 + t319 * (-t2948 * t9 - t1829 + t1833) + t92 * (t1215 * t9 + t2954 * t9) + t111 * (-t2113 * t9 - t59 * t2960) - t2966 * t9 + t2968 * t9 - t2971 * t9 - t2974 * t2973;
    real_type t2994 = t1877 * t132;
    result__[ 135 ] = t2941 * t133 + t1728 * t79 * t132 * t2943 + t319 * (t2948 * t133 + t1948 - t1950) + t92 * (-t1215 * t133 - t2954 * t133) + t111 * (t2113 * t133 + t135 * t2960) + t2966 * t133 - t2968 * t133 + t2971 * t133 + t2994 * t2973;
    result__[ 136 ] = t313 * t86 * t160 - t2110 + t92 * (t58 * t2952 * t53 * t160 + t2114) + t111 * (t172 * t79 * t2959 + t1216) - t1862 * t73 * t2257 * t160;
    result__[ 137 ] = t319 * (-t58 * t2947 * t160 + t2080) + t92 * (-t73 * t2953 * t160 + t2642) + t111 * (-t58 * t966 * t160 + t181 * t2960) - t2654 - t1862 * t58 * t2011 * t160;
    result__[ 138 ] = t2881;
    result__[ 139 ] = -t92 * t73 * t1082 * t1404 + t111 * t73 * t1087 * t1250 + t319 * t2238 * t1404;
    result__[ 140 ] = -t2125;
    real_type t3065 = t3 * t2241;
    result__[ 141 ] = t3 * t313 * t53 * t273 + t3 * t1728 * t79 * t273 + t319 * (t3 * t2948 * t248 + t2330 - t2334) + t92 * (-t3 * t58 * t2952 * t264 - t3 * t402 * t2733) + t111 * (t252 * t247 * t2960 + t256 * t2733) + t3 * t2966 * t248 - t3 * t2968 * t248 + t3 * t1862 * t73 * t2011 * t248 + t3065 * t247 * t80;
    real_type t3085 = t1877 * t290;
    result__[ 142 ] = -t2941 * t291 - t1728 * t79 * t290 * t2943 + t319 * (-t2948 * t291 - t2402 + t2404) + t92 * (t1215 * t291 + t2954 * t291) + t111 * (-t2113 * t291 - t293 * t2960) - t2966 * t291 + t2968 * t291 - t2971 * t291 - t3085 * t2973;
    real_type t3087 = -t2126;
    real_type t3088 = t6 * t3087;
    real_type t3098 = t58 * t557;
    real_type t3101 = t225 * t77;
    real_type t3102 = t73 * t3101;
    real_type t3107 = -t2188;
    real_type t3108 = t79 * t3107;
    real_type t3113 = t125 * t858;
    result__[ 143 ] = t11 * (-t342 * t3088 - t123) + t313 * t340 + t1728 * (t217 * t9 + t375 * t9) + t92 * (-t3098 * t3087 * t9 + t3102 * t53 * t9 - t1078 * t9) + t111 * (-t554 * t2680 - t59 * t3108 - t860) - t3113 * t9 - t1627 - t2508 * t2507 - t1904 * t2512;
    result__[ 144 ] = t11 * (t361 * t3088 + t149) + t313 * t359 + t1728 * (-t133 * t217 - t375 * t133) + t92 * (t3098 * t3087 * t133 - t3102 * t53 * t133 + t1078 * t133) + t111 * (t135 * t3108 + t894 * t2680 + t935) + t3113 * t133 + t1633 - t2508 * t2557 - t1904 * t2561;
    real_type t3147 = t3087 * t160;
    result__[ 145 ] = t313 * t377 + t1728 * (-t338 * t160 - t2132) + t92 * (t1156 * t3147 + t859 * t160 - t3102 * t2059) + t111 * (-t172 * t53 * t3107 - t181 * t53 * t2679 - t1079);
    real_type t3168 = t58 * t3101 * t1116;
    result__[ 146 ] = t11 * (t396 * t3088 - t199) + t313 * t394 + t1728 * (t1073 * t160 - t2669) + t92 * (t1076 * t3147 + t3168) + t111 * (t181 * t3108 - t2681) + t2687 + t2689;
    result__[ 147 ] = t92 * (t73 * t225 * t53 * t160 - t58 * t53 * t3087 * t160) + t111 * (-t172 * t79 * t3087 - t391);
    result__[ 148 ] = t11 * (-t2848 * t160 - t197) + t313 * t413 + t1728 * t2887 + t92 * (t73 * t2126 * t77 * t1116 - t3168) + t111 * (-t172 * t79 * t2193 - t181 * t79 * (-t2454 + t724)) + t2628 + t2632;
    result__[ 149 ] = t11 * (t252 * t247 * t3087 + t280) + t313 * t443 + t1728 * (-t256 * t336 * t248 - t438 * t1422) + t92 * (t1471 * t557 * t3087 * t248 + t3 * t1078 * t248 - t431 * t3101 * t1422) + t111 * (t1413 * t247 * t2680 + t252 * t247 * t3108 + t1478) + t3 * t3113 * t248 + t1646 - t2508 * t2782 - t1904 * t2786;
    result__[ 150 ] = t11 * (-t465 * t3088 - t307) + t313 * t463 + t1728 * (t217 * t291 + t375 * t291) + t92 * (-t3098 * t3087 * t291 + t3102 * t53 * t291 - t1078 * t291) + t111 * (-t1506 * t2680 - t293 * t3108 - t1547) - t3113 * t291 - t1652 - t2508 * t2831 - t1904 * t2835;
    real_type t3264 = t319 * t58;
    real_type t3268 = t73 * t45 * t1084;
    real_type t3274 = t45 * t707;
    real_type t3281 = t2495 * t73;
    real_type t3283 = t1887 * t58;
    result__[ 151 ] = t11 * t128 * t127 + t313 * t342 * t243 - t1728 * t342 * t239 - t3264 * t1837 * t1836 + t92 * (t1091 * t9 + t3268 * t9) + t111 * (-t8 * t886 * t3274 - t128 * t2226) - t129 * t8 * t127 + t3281 * t9 - t3283 * t9;
    result__[ 152 ] = -t11 * t152 * t127 - t313 * t361 * t243 + t1728 * t361 * t239 + t3264 * t1953 * t1836 + t92 * (-t1091 * t133 - t3268 * t133) + t111 * (t132 * t886 * t3274 + t152 * t2226) + t129 * t132 * t127 - t3281 * t133 + t3283 * t133;
    result__[ 153 ] = t2206 + t2208 + t92 * (-t73 * t45 * t865 * t160 - t2228) + t111 * (-t396 * t6 * t2699 - t1116 * t3274);
    result__[ 154 ] = t92 * t1161 * t1084 * t160 - t244 * t2226 + t2691 - t2693 + t2695 + t2698 + t2714 + t2716;
    result__[ 155 ] = -result__[131];
    result__[ 156 ] = -result__[139];
    result__[ 157 ] = -t3 * t11 * t73 * t284 - t3 * t313 * t202 * t445 + t3 * t1728 * t202 * t247 * t238 + t1691 * t114 * t2337 + t92 * (-t1484 * t1084 * t248 - t3 * t238 * t1487) + t111 * (t1413 * t247 * t2225 + t1496 * t79 * t3274) + t3 * t129 * t159 * t283 - t3 * t3281 * t248 + t3 * t3283 * t248;
    result__[ 158 ] = t11 * t310 * t127 + t313 * t465 * t243 - t1728 * t465 * t239 - t3264 * t2407 * t1836 + t92 * (t1091 * t291 + t3268 * t291) + t111 * (-t290 * t886 * t3274 - t310 * t2226) - t129 * t290 * t127 + t3281 * t291 - t3283 * t291;
    result__[ 159 ] = t2495 * t9;
    real_type t3373 = t2495 * t133;
    result__[ 160 ] = -t3373;
    real_type t3374 = t3 * t2495;
    result__[ 161 ] = -t3374 * t248;
    result__[ 162 ] = t2495 * t291;
    real_type t3377 = t1887 * t8;
    result__[ 163 ] = t2974 * t1101 - t3377 * t886;
    real_type t3380 = t1887 * t132;
    result__[ 164 ] = -t2994 * t1101 + t3380 * t886;
    result__[ 165 ] = result__[106];
    real_type t3382 = t247 * t53;
    real_type t3384 = t247 * t79;
    real_type t3385 = t3 * t2243;
    result__[ 166 ] = -t3065 * t3382 + t3385 * t3384;
    real_type t3388 = t1887 * t290;
    result__[ 167 ] = t3085 * t1101 - t3388 * t886;
    result__[ 168 ] = t3377 * t1101 + t2974 * t886;
    result__[ 169 ] = -t3380 * t1101 - t2994 * t886;
    result__[ 170 ] = result__[107];
    result__[ 171 ] = -t3065 * t3384 - t3385 * t3382;
    result__[ 172 ] = t3388 * t1101 + t3085 * t886;
    result__[ 173 ] = -t2508 * t9;
    result__[ 174 ] = t2508 * t133;
    result__[ 175 ] = t3 * t2508 * t248;
    result__[ 176 ] = -t2508 * t291;
    real_type t3401 = t1897 * t8;
    real_type t3403 = t1904 * t8;
    result__[ 177 ] = t3401 * t1101 - t3403 * t886;
    real_type t3405 = t1897 * t132;
    real_type t3407 = t1904 * t132;
    result__[ 178 ] = -t3405 * t1101 + t3407 * t886;
    result__[ 179 ] = result__[108];
    real_type t3409 = t3 * t2247;
    real_type t3411 = t3 * t2249;
    result__[ 180 ] = -t3409 * t3382 + t3411 * t3384;
    real_type t3413 = t1897 * t290;
    real_type t3415 = t1904 * t290;
    result__[ 181 ] = t3413 * t1101 - t3415 * t886;
    result__[ 182 ] = t3403 * t1101 + t3401 * t886;
    result__[ 183 ] = -t3407 * t1101 - t3405 * t886;
    result__[ 184 ] = result__[109];
    result__[ 185 ] = -t3411 * t3382 - t3409 * t3384;
    result__[ 186 ] = t3415 * t1101 + t3413 * t886;
    result__[ 187 ] = -t1845 * t8 * t1101 + result__[159] * t1872;
    result__[ 188 ] = t1845 * t132 * t1101 - t3373 * t1872;
    result__[ 189 ] = result__[110];
    result__[ 190 ] = t2495 * t160 * t1880;
    result__[ 191 ] = -t3 * t2495 * t159 * t247 * t1872 + t3 * t2253 * t3382;
    result__[ 192 ] = -t1845 * t290 * t1101 + result__[162] * t1872;
    real_type t3444 = t6 * t1880;
    real_type t3447 = t1871 * t1859;
    real_type t3448 = t1877 * t3447;
    real_type t3450 = t1871 * t1853;
    real_type t3451 = t1887 * t3450;
    result__[ 193 ] = t1862 * (-t2011 * t9 - t1856) + t2495 * t1844 * t3444 - t3448 * t9 - t3451 * t9;
    result__[ 194 ] = t1862 * (t2011 * t133 + t1960) - t2495 * t1957 * t3444 + t3448 * t133 + t3451 * t133;
    result__[ 195 ] = t1862 * (-t2014 - t2258) - t1877 * t3450 * t160 - t1887 * t1871 * t2011 * t160;
    result__[ 196 ] = -t2090;
    result__[ 197 ] = result__[140];
    result__[ 198 ] = result__[190];
    result__[ 199 ] = t1862 * (-t2256 - t2015) - t2495 * t2008 * t6 * t1872 - t1877 * t1871 * t2257 * t160 - t1887 * t3447 * t160;
    result__[ 200 ] = t1862 * (t3 * t2011 * t248 + t2348) - t3374 * t2008 * t247 * t1880 + t3 * t1877 * t1871 * t2762 + t3 * t1887 * t1871 * t2346;
    result__[ 201 ] = t1862 * (-t2011 * t291 - t2414) + t2495 * t2411 * t3444 - t3448 * t291 - t3451 * t291;
    real_type t3497 = ModelPars[120];
    real_type t3498 = t6 * t3497;
    real_type t3499 = ModelPars[212];
    real_type t3501 = LL__[34];
    result__[ 202 ] = -t3501 * t3499 * t8 * t3498;
    result__[ 203 ] = t3501 * t3499 * t132 * t3498;
    result__[ 204 ] = 2 * ModelPars[139];
    result__[ 205 ] = t3 * t3501 * t3499 * t159 * t247 * t3497;
    result__[ 206 ] = -t3501 * t3499 * t290 * t3498;
    real_type t3514 = ModelPars[209];
    real_type t3516 = LL__[33] * t3514;
    result__[ 207 ] = -t3516 * t9;
    result__[ 208 ] = t3516 * t133;
    result__[ 209 ] = result__[204];
    result__[ 210 ] = t3 * t3516 * t248;
    result__[ 211 ] = -t3516 * t291;
    real_type t3520 = ModelPars[210];
    real_type t3522 = LL__[35] * t3520;
    result__[ 212 ] = -t3522 * t9;
    result__[ 213 ] = t3522 * t133;
    result__[ 214 ] = result__[209];
    result__[ 215 ] = t3 * t3522 * t248;
    result__[ 216 ] = -t3522 * t291;
    real_type t3526 = ModelPars[211];
    real_type t3528 = LL__[36] * t3526;
    result__[ 217 ] = -t3528 * t9;
    result__[ 218 ] = t3528 * t133;
    result__[ 219 ] = result__[214];
    result__[ 220 ] = t3 * t3528 * t248;
    result__[ 221 ] = -t3528 * t291;
    real_type t3532 = LL__[37];
    result__[ 222 ] = -t3532 * t9;
    result__[ 223 ] = t3532 * t133;
    result__[ 224 ] = t3 * t3532 * t248;
    result__[ 225 ] = -t3532 * t291;
    real_type t3536 = LL__[38];
    result__[ 226 ] = -t3536 * t9;
    result__[ 227 ] = t3536 * t133;
    result__[ 228 ] = t3 * t3536 * t248;
    result__[ 229 ] = -t3536 * t291;
    real_type t3542 = ALIAS_kappa_L(QR__[0]);
    real_type t3544 = t3542 * XR__[37] - 1;
    real_type t3545 = 1.0 / t3544;
    real_type t3546 = XR__[38];
    real_type t3547 = cos(t3546);
    real_type t3548 = t3547 * t3545;
    real_type t3549 = LR__[0];
    real_type t3550 = t3549 * t10;
    real_type t3552 = XR__[7];
    real_type t3553 = cos(t3552);
    real_type t3555 = t18 * t16 * t3553;
    real_type t3556 = sin(t3552);
    real_type t3557 = t27 * t3556;
    real_type t3558 = XR__[8];
    real_type t3559 = t45 * t3558;
    real_type t3560 = -t3555 + t3557 - t31 + t35 + t40 + t43 + t46 - t3559 - t50;
    real_type t3561 = XR__[3];
    real_type t3562 = cos(t3561);
    real_type t3563 = t3562 * t3560;
    real_type t3565 = XR__[4] + t56;
    real_type t3566 = cos(t3565);
    real_type t3567 = t3566 * t3548;
    real_type t3568 = t3567 * t3563;
    real_type t3569 = t27 * t3553;
    real_type t3571 = t18 * t16 * t3556;
    real_type t3572 = t3569 + t3571 + t64 - t66 - t68 + t70;
    real_type t3573 = t3562 * t3572;
    real_type t3574 = sin(t3565);
    real_type t3575 = t3574 * t3573;
    real_type t3576 = t3575 * t3548;
    real_type t3577 = t3562 * t10;
    real_type t3578 = XR__[5];
    real_type t3579 = t3578 * t3577;
    real_type t3580 = sin(t3561);
    real_type t3581 = t85 * t3580;
    real_type t3582 = XR__[6];
    real_type t3584 = t3582 * t3581 + t3579;
    real_type t3587 = LR__[4];
    real_type t3589 = t39 * t3556;
    real_type t3590 = t3555 + t3589 + t31 - t35 + t95 - t43 - t46 + t3559 + t50;
    real_type t3591 = t3580 * t3590;
    real_type t3593 = t3572 * t3580;
    real_type t3594 = t3574 * t3593;
    real_type t3596 = t3580 * t10;
    real_type t3597 = t3578 * t3596;
    real_type t3598 = t3582 * t104;
    real_type t3600 = t3562 * t3598 + t3597;
    real_type t3601 = t3545 * t3600;
    real_type t3603 = -t3547 * t3601 - t3594 * t3548 - t3567 * t3591;
    real_type t3604 = LR__[5];
    real_type t3606 = t85 * t3548;
    real_type t3607 = t3566 * t3582;
    real_type t3608 = LR__[6];
    real_type t3609 = t3608 * t3607;
    real_type t3611 = t3555 - t3557;
    real_type t3612 = t3566 * t3611;
    real_type t3614 = t3569 + t3571;
    real_type t3615 = t3574 * t3614;
    real_type t3616 = t3615 * t3548;
    real_type t3618 = LR__[7];
    real_type t3620 = t3545 * t45;
    real_type t3621 = t3574 * t3547;
    real_type t3622 = LR__[8];
    result__[ 230 ] = t3550 * t3548 - t3587 * (-t3584 * t3548 + t3568 - t3576) - t3604 * t3603 - t3609 * t3606 - t3618 * (-t3612 * t3548 - t3616) - t3622 * t3621 * t3620;
    real_type t3625 = sin(t3546);
    real_type t3626 = t3625 * t3545;
    real_type t3628 = t3566 * t3626;
    real_type t3629 = t3628 * t3563;
    real_type t3630 = t3575 * t3626;
    real_type t3637 = t3628 * t3591 + t3594 * t3626 + t3625 * t3601;
    real_type t3639 = t85 * t3626;
    real_type t3642 = t3615 * t3626;
    real_type t3645 = t3574 * t3625;
    result__[ 231 ] = -t3550 * t3626 - t3587 * (t3584 * t3626 - t3629 + t3630) - t3604 * t3637 + t3609 * t3639 - t3618 * (t3612 * t3626 + t3642) + t3622 * t3645 * t3620;
    real_type t3648 = XR__[0];
    real_type t3650 = XR__[1];
    real_type t3652 = t3648 * t3547 - t3650 * t3625;
    real_type t3653 = t3652 * t3545;
    real_type t3654 = t3560 * t3580;
    real_type t3655 = t3566 * t3654;
    real_type t3656 = t3655 * t3653;
    real_type t3657 = t3594 * t3653;
    real_type t3658 = t85 * t3562;
    real_type t3660 = t3582 * t3658 - t3597;
    real_type t3664 = t3562 * t3590;
    real_type t3665 = t3566 * t3653;
    real_type t3667 = t3575 * t3653;
    real_type t3669 = -t3580 * t3598 + t3579;
    real_type t3672 = -t3652 * t3545 * t3669 - t3665 * t3664 - t3667;
    result__[ 232 ] = -t3587 * (-t3660 * t3653 - t3656 + t3657) - t3604 * t3672;
    real_type t3674 = t3574 * t3653;
    real_type t3675 = t3674 * t3563;
    real_type t3676 = t3566 * t3573;
    real_type t3678 = -t3676 * t3653 - t3675;
    real_type t3682 = t3566 * t3593 * t3653;
    real_type t3683 = t3674 * t3591 - t3682;
    real_type t3685 = t85 * t3653;
    real_type t3686 = t3574 * t3582;
    real_type t3687 = t3608 * t3686;
    real_type t3689 = t3574 * t3611;
    real_type t3690 = t3689 * t3653;
    real_type t3691 = t3566 * t3614;
    real_type t3692 = t3691 * t3653;
    real_type t3695 = t3566 * t3652;
    real_type t3696 = t3622 * t3695;
    result__[ 233 ] = -t3587 * t3678 - t3604 * t3683 + t3687 * t3685 - t3618 * (t3690 - t3692) - t3696 * t3620;
    real_type t3700 = t3604 * t3653;
    result__[ 234 ] = t3587 * t3577 * t3653 + t3700 * t3596;
    real_type t3704 = t3562 * t104;
    result__[ 235 ] = -t3608 * t3566 * t85 * t3653 + t3587 * t3581 * t3653 + t3700 * t3704;
    real_type t3709 = t3614 * t3562;
    real_type t3710 = t3566 * t3709;
    real_type t3711 = t3710 * t3653;
    real_type t3712 = t3562 * t3611;
    real_type t3715 = -t3574 * t3712 * t3653 + t3711;
    real_type t3717 = t39 * t3553;
    real_type t3718 = t3717 - t3571;
    real_type t3719 = t3580 * t3718;
    real_type t3721 = t3611 * t3580;
    real_type t3724 = -t3574 * t3721 * t3653 - t3665 * t3719;
    real_type t3726 = -t3614;
    result__[ 236 ] = -t3587 * t3715 - t3604 * t3724 - t3618 * (-t3566 * t3726 * t3653 - t3690);
    real_type t3731 = t3562 * t45;
    real_type t3732 = t3545 * t3731;
    real_type t3735 = t3580 * t45;
    real_type t3736 = t3545 * t3735;
    real_type t3737 = t3604 * t3695;
    result__[ 237 ] = t3587 * t3695 * t3732 + t3737 * t3736;
    real_type t3739 = t3544 * t3544;
    real_type t3740 = 1.0 / t3739;
    real_type t3741 = t3652 * t3740;
    real_type t3744 = t3740 * t3563;
    real_type t3745 = t3542 * t3695;
    real_type t3746 = t3745 * t3744;
    real_type t3747 = t3572 * t3741;
    real_type t3749 = t3542 * t3574 * t3562;
    real_type t3750 = t3749 * t3747;
    real_type t3755 = t3740 * t3591;
    real_type t3757 = t3580 * t3741;
    real_type t3758 = t3574 * t3572;
    real_type t3762 = t3542 * t3652;
    real_type t3764 = t3542 * t3758 * t3757 + t3762 * t3740 * t3600 + t3745 * t3755;
    real_type t3766 = t85 * t3741;
    real_type t3767 = t3542 * t3608;
    real_type t3773 = t3542 * t3615 * t3741;
    real_type t3776 = t3740 * t45;
    real_type t3777 = t3652 * t3776;
    real_type t3778 = t3622 * t3574;
    result__[ 238 ] = -t3542 * t3550 * t3741 - t3587 * (t3542 * t3584 * t3741 - t3746 + t3750) - t3604 * t3764 + t3767 * t3607 * t3766 - t3618 * (t3542 * t3612 * t3741 + t3773) + t3542 * t3778 * t3777;
    real_type t3783 = -t3650 * t3547 - t3648 * t3625;
    real_type t3784 = t3783 * t3545;
    real_type t3786 = t3566 * t3784;
    real_type t3787 = t3786 * t3563;
    real_type t3788 = t3575 * t3784;
    real_type t3795 = -t3786 * t3591 - t3594 * t3784 - t3783 * t3601;
    real_type t3797 = t85 * t3784;
    real_type t3800 = t3615 * t3784;
    real_type t3803 = t3574 * t3783;
    result__[ 239 ] = t3550 * t3784 - t3587 * (-t3584 * t3784 + t3787 - t3788) - t3604 * t3795 - t3609 * t3797 - t3618 * (-t3612 * t3784 - t3800) - t3622 * t3803 * t3620;
    real_type t3806 = LR__[1];
    real_type t3807 = t3806 * t10;
    real_type t3809 = -t3584;
    real_type t3812 = LR__[3];
    real_type t3814 = t3566 * t3572;
    real_type t3816 = t3574 * t3560;
    real_type t3818 = -t3814 * t3548 - t3816 * t3548;
    real_type t3820 = t3582 * t3580;
    real_type t3821 = t3574 * t3820;
    real_type t3826 = t3614 * t3580;
    real_type t3827 = t3566 * t3826;
    real_type t3829 = -t3611;
    real_type t3830 = t3829 * t3580;
    real_type t3831 = t3574 * t3830;
    real_type t3833 = -t3827 * t3548 - t3831 * t3548;
    real_type t3835 = t3566 * t3547;
    real_type t3836 = t3622 * t3835;
    result__[ 240 ] = t3807 * t3548 - t3812 * (-t3809 * t3548 - t3568 + t3576) - t3604 * t3818 - t3608 * (-t3658 * t3548 - t3821 * t3606) - t3618 * t3833 - t3836 * t3736;
    real_type t3844 = t3814 * t3626 + t3816 * t3626;
    real_type t3852 = t3827 * t3626 + t3831 * t3626;
    real_type t3854 = t3566 * t3625;
    real_type t3855 = t3622 * t3854;
    result__[ 241 ] = -t3807 * t3626 - t3812 * (t3809 * t3626 + t3629 - t3630) - t3604 * t3844 - t3608 * (t3658 * t3626 + t3821 * t3639) - t3618 * t3852 + t3855 * t3736;
    real_type t3861 = t3582 * t3562;
    real_type t3867 = t3562 * t3829;
    real_type t3868 = t3574 * t3867;
    real_type t3870 = -t3868 * t3653 - t3711;
    result__[ 242 ] = -t3812 * (t3660 * t3653 + t3656 - t3657) - t3608 * (-t3574 * t3861 * t3685 + t3581 * t3653) - t3618 * t3870 - t3696 * t3732;
    real_type t3874 = -t3812 * t3678;
    real_type t3875 = t3758 * t3653;
    real_type t3876 = t3566 * t3560;
    real_type t3877 = t3876 * t3653;
    real_type t3878 = t3875 - t3877;
    real_type t3882 = t3608 * t3566 * t3820 * t3685;
    real_type t3884 = t3574 * t3826 * t3653;
    real_type t3885 = t3566 * t3830;
    real_type t3887 = -t3885 * t3653 + t3884;
    real_type t3889 = t3574 * t3652;
    real_type t3890 = t3622 * t3889;
    real_type t3891 = t3890 * t3736;
    result__[ 243 ] = -t3604 * t3878 - t3618 * t3887 - t3874 + t3882 + t3891;
    result__[ 244 ] = -t3812 * t3577 * t3653;
    real_type t3896 = t3574 * t3580;
    result__[ 245 ] = -t3812 * t3581 * t3653 + t3608 * t3896 * t3685;
    real_type t3901 = t3612 * t3653;
    real_type t3903 = -t3615 * t3653 - t3901;
    real_type t3907 = -t3566 * t3721 * t3653 - t3884;
    result__[ 246 ] = -t3604 * t3903 - t3618 * t3907 + t3812 * t3715;
    result__[ 247 ] = -t3604 * t3889 * t3620 - t3812 * t3695 * t3732;
    real_type t3913 = t3542 * t3807;
    real_type t3923 = t3542 * t3814 * t3741 + t3542 * t3816 * t3741;
    real_type t3925 = t3542 * t3574;
    real_type t3932 = t3542 * t3691;
    real_type t3937 = t3542 * t3574 * t3829 * t3757 + t3932 * t3757;
    real_type t3939 = t3740 * t3735;
    real_type t3940 = t3542 * t3622;
    result__[ 248 ] = -t3913 * t3741 - t3812 * (t3542 * t3809 * t3741 + t3746 - t3750) - t3604 * t3923 - t3608 * (t3542 * t3658 * t3741 + t3925 * t3820 * t3766) - t3618 * t3937 + t3940 * t3695 * t3939;
    real_type t3949 = -t3814 * t3784 - t3816 * t3784;
    real_type t3957 = -t3827 * t3784 - t3831 * t3784;
    real_type t3959 = t3566 * t3783;
    real_type t3960 = t3622 * t3959;
    result__[ 249 ] = t3807 * t3784 - t3812 * (-t3809 * t3784 - t3787 + t3788) - t3604 * t3949 - t3608 * (-t3658 * t3784 - t3821 * t3797) - t3618 * t3957 - t3960 * t3736;
    real_type t3964 = t3553 * t3553;
    real_type t3967 = t3556 * t486 * t3553;
    real_type t3969 = t45 * t507 * t3558;
    real_type t3970 = t476 * t3964 + t3967 - t3969 - t471 + t491 - t493 + t501 + t505 + t511 - t512 - t513;
    real_type t3971 = t3970 * t3562;
    real_type t3973 = t517 * t3964;
    real_type t3975 = t475 * t3556 * t3553;
    real_type t3976 = 2 * t3975;
    real_type t3977 = t3558 * t3558;
    real_type t3978 = t3977 * t45;
    real_type t3979 = t3978 / 2;
    real_type t3981 = t45 * t536 * t3558;
    real_type t3982 = t3973 + t3976 + t522 - t525 + t528 - t530 + t532 + t3979 - t3981 + t541 + t495 + t542 + t547 + t496 - t497 + t549 - t551;
    real_type t3983 = t3982 * t3562;
    real_type t3984 = t3574 * t3548;
    real_type t3987 = t3578 * t3562;
    real_type t3989 = t568 * t3580;
    real_type t3991 = -t3572 * t3987 - t3582 * t3989;
    real_type t3997 = t45 * t3558 * t80;
    real_type t3998 = -t3997 + t579 - t582 - t583;
    real_type t3999 = t3998 * t3580;
    real_type t4001 = -t3560 * t3987 - t3582 * t3999;
    real_type t4002 = t3574 * t4001;
    real_type t4004 = t3566 * t3566;
    real_type t4005 = t4004 * t3971;
    real_type t4010 = t3580 * t3982;
    real_type t4011 = t3562 * t4010;
    real_type t4012 = t4004 * t3548;
    real_type t4015 = t3580 * t3970;
    real_type t4016 = t3562 * t4015;
    real_type t4019 = t3562 * t3562;
    real_type t4020 = t3998 * t4019;
    real_type t4023 = t3578 * t3580;
    real_type t4026 = t3582 * t3998;
    real_type t4027 = -2 * t4023 * t3563 + 2 * t3582 * t4020 - t4026;
    real_type t4031 = t568 * t4019;
    real_type t4034 = t3580 * t3562;
    real_type t4035 = t3572 * t3578;
    real_type t4038 = t3582 * t568;
    real_type t4039 = -2 * t3582 * t4031 + 2 * t4035 * t4034 + t4038;
    real_type t4040 = t3574 * t4039;
    real_type t4042 = t85 * t4019;
    real_type t4043 = t3578 * t3582;
    real_type t4046 = t3578 * t3578;
    real_type t4047 = t4046 * t10;
    real_type t4048 = t3973 + t3976 + t522 - t525 - t4047 + t528 + t634 - t635 + t495 + t496 - t497 + t548 - t636;
    real_type t4051 = t3582 * t85;
    real_type t4053 = -t3562 * t3580 * t4048 + t3578 * t4051 - 2 * t4043 * t4042;
    real_type t4054 = t3545 * t4053;
    real_type t4058 = t3964 * t659;
    real_type t4061 = 2 * t3981;
    real_type t4062 = t3553 * t3556 * t667 - t3978 + t4058 + t4061 - t548 + t550 - t634 + t673 + t678 + t680 + t681 + t687 - t688 - t689 + t691 - t692 + t693;
    real_type t4063 = t4019 * t4062;
    real_type t4065 = t3964 * t676;
    real_type t4067 = t3553 * t3556 * t659;
    real_type t4069 = t3558 * t709 + t4065 + t4067 + t700 + t702 - t704 + t706 + t711 + t716 - t717 - t718;
    real_type t4070 = t4019 * t4069;
    real_type t4073 = t723 * t3578 * t3553;
    real_type t4074 = 2 * t4073;
    real_type t4075 = t3578 * t729;
    real_type t4076 = t3556 * t4075;
    real_type t4077 = 2 * t3559;
    real_type t4080 = -t4074 + t4076 + t3578 * (t732 + t736 + t737 - t738 + t739 - t4077 - t741);
    real_type t4082 = 2 * t3998;
    real_type t4083 = t3582 * t4082;
    real_type t4085 = t3578 * t735;
    real_type t4086 = t3556 * t4085;
    real_type t4089 = t4019 * t4080 + t4034 * t4083 + t4074 + t4086 + t3578 * (-t732 + t751 - t737 + t738 - t739 + t4077 + t741);
    real_type t4090 = t3545 * t4089;
    real_type t4094 = t3553 * t4085;
    real_type t4097 = t3556 * t18 * t3578 * t16;
    real_type t4098 = 2 * t4097;
    real_type t4100 = t3578 * t768 + t4094 - t4098;
    real_type t4102 = t3582 * t783;
    real_type t4104 = t3553 * t4075;
    real_type t4106 = t3578 * t788 + t4019 * t4100 + t4034 * t4102 + t4098 + t4104;
    real_type t4107 = t3545 * t4106;
    real_type t4109 = t3964 * t796;
    real_type t4112 = t3553 * t3556 * t802 - t4047 + t4109 + t495 + t496 - t497 + t528 + t548 + t634 - t635 - t636 + t808 + t813;
    real_type t4114 = t3582 * t816;
    real_type t4117 = t3562 * t4023 * t4114 + t4019 * t4112 + t3978 + t4047 - t4061 - t634 + t636 - t681 + t689 + t821 + t823;
    real_type t4118 = t3545 * t4117;
    real_type t4124 = t835 * t3562 - t4043 * t3581;
    real_type t4125 = t3566 * t4124;
    real_type t4127 = -t3998;
    real_type t4128 = t4127 * t3562;
    real_type t4130 = t3582 * t4127;
    real_type t4131 = t3580 * t4130;
    real_type t4138 = t3574 * t4023;
    real_type t4140 = t858 * t3580;
    real_type t4141 = t4140 * t3548;
    real_type t4144 = t3562 * t80;
    real_type t4146 = -t3582 * t4144 + t4023;
    real_type t4147 = t4146 / 2;
    real_type t4148 = t3545 * t4147;
    real_type t4153 = t3580 * t510;
    real_type t4157 = t3545 * t3582;
    real_type t4158 = t3547 * t4157;
    real_type t4159 = t565 * t3562;
    real_type t4160 = t3574 * t4159;
    real_type t4162 = t3580 * t565;
    real_type t4164 = -t3548 * t4162 + t4160 * t4158;
    real_type t4165 = LR__[9];
    real_type t4167 = t3545 * t3580;
    real_type t4168 = t856 * t3547;
    real_type t4169 = LR__[10];
    result__[ 250 ] = -t3549 * t3603 - t3806 * t3818 - t3812 * (t3971 * t3548 + t3566 * (-t3991 * t3548 - 2 * t3984 * t3983) - t4002 * t3548 - 2 * t4005 * t3548) - t3587 * (-2 * t4012 * t4011 + t3566 * (-t4027 * t3548 + 2 * t3984 * t4016) - t4040 * t3548 - t3547 * t4054) - t3604 * (-t4012 * t4063 + t3566 * (-t3547 * t4090 - t3984 * t4070) - t3621 * t4107 - t3547 * t4118) - t3608 * (-t4125 * t3548 + t4131 * t3548 + t3984 * t4128) - t3618 * (t3885 * t3578 * t3548 - t4138 * t3614 * t3548 - t4141) - t3622 * (2 * t3574 * t45 * t3547 * t4148 + t4153 * t3548) - t4165 * t4164 + t4169 * t4168 * t4167;
    real_type t4175 = t3574 * t3626;
    real_type t4186 = t4004 * t3626;
    real_type t4216 = t4140 * t3626;
    real_type t4226 = t3625 * t4157;
    real_type t4229 = t3626 * t4162 - t4160 * t4226;
    real_type t4231 = t856 * t3625;
    result__[ 251 ] = -t3549 * t3637 - t3806 * t3844 - t3812 * (-t3971 * t3626 + t3566 * (t3991 * t3626 + 2 * t4175 * t3983) + t4002 * t3626 + 2 * t4005 * t3626) - t3587 * (2 * t4186 * t4011 + t3566 * (t4027 * t3626 - 2 * t4175 * t4016) + t4040 * t3626 + t3625 * t4054) - t3604 * (t4186 * t4063 + t3566 * (t3625 * t4090 + t4175 * t4070) + t3645 * t4107 + t3625 * t4118) - t3608 * (t4125 * t3626 - t4131 * t3626 - t4175 * t4128) - t3618 * (-t3885 * t3578 * t3626 + t4138 * t3614 * t3626 + t4216) - t3622 * (-2 * t3574 * t45 * t3625 * t4148 - t4153 * t3626) - t4165 * t4229 - t4169 * t4231 * t4167;
    real_type t4235 = t4004 * t4015;
    real_type t4240 = t568 * t3562;
    real_type t4243 = t3572 * t4023 - t3582 * t4240;
    real_type t4245 = -t4243 * t3653 + 2 * t3674 * t4010;
    real_type t4247 = t3998 * t3562;
    real_type t4250 = t3578 * t3654 - t3582 * t4247;
    real_type t4251 = t3574 * t4250;
    real_type t4257 = t4004 * t3653;
    real_type t4260 = t3580 * t3580;
    real_type t4284 = t3578 * t4260;
    real_type t4287 = t3578 * t4019;
    real_type t4305 = t4004 * t3652;
    real_type t4309 = t3562 * t4069;
    real_type t4310 = t3545 * t4309;
    real_type t4347 = t4127 * t3580;
    real_type t4348 = t3674 * t4347;
    real_type t4349 = t3562 * t4130;
    real_type t4353 = t3578 * t3653;
    real_type t4354 = t3566 * t3867;
    real_type t4356 = t3614 * t3653;
    real_type t4357 = t3574 * t3987;
    real_type t4358 = t4357 * t4356;
    real_type t4359 = t858 * t3562;
    real_type t4360 = t4359 * t3653;
    real_type t4363 = t3580 * t80;
    real_type t4364 = t3582 * t4363;
    real_type t4365 = t4364 + t3987;
    real_type t4368 = t45 * t3652;
    real_type t4369 = t3574 * t4368;
    real_type t4372 = t3562 * t510;
    real_type t4373 = t4372 * t3653;
    real_type t4377 = t3580 * t565 * t3582;
    real_type t4380 = -t4159 * t3653 - t3674 * t4377;
    real_type t4382 = t3545 * t3562;
    real_type t4383 = t856 * t3652;
    result__[ 252 ] = -t3549 * t3672 - t3812 * (t3566 * t4245 - t4015 * t3653 + 2 * t4235 * t3653 - t4251 * t3653) - t3587 * (-2 * t4257 * t4019 * t3982 + 2 * t4257 * t4260 * t3982 + t3566 * (2 * t3674 * t4019 * t3970 - 2 * t3674 * t4260 * t3970 - (-2 * t3578 * t3560 * t4019 + 2 * t3578 * t3560 * t4260 - 4 * t3820 * t4247) * t3653) - t3574 * (-2 * t3572 * t4284 + 2 * t3572 * t4287 + 4 * t3820 * t4240) * t3653 - t3652 * t3545 * (4 * t3580 * t4043 * t3658 - t4019 * t4048 + t4260 * t4048)) - t3604 * (2 * t3580 * t4305 * t3545 * t3562 * t4062 + t3566 * (2 * t3580 * t3889 * t4310 - t3652 * t3545 * (-2 * t3580 * t3562 * t4080 + t4019 * t4083 - t4260 * t4083)) - t3889 * t3545 * (-2 * t3580 * t3562 * t4100 + t4019 * t4102 - t4260 * t4102) - t3652 * t3545 * (-2 * t3580 * t3562 * t4112 - t4284 * t4114 + t4287 * t4114)) - t3608 * (-t3566 * (-t835 * t3580 - t4043 * t3658) * t3653 - t4348 + t4349 * t3653) - t3618 * (t4354 * t4353 - t4358 - t4360) - t3622 * (t4369 * t3545 * t4365 + t4373) - t4165 * t4380 + t4169 * t4383 * t4382;
    real_type t4391 = 2 * t3674 * t3983;
    real_type t4397 = t3562 * t3653;
    real_type t4399 = t3574 * t3566 * t3970;
    real_type t4420 = t3574 * t3695;
    real_type t4433 = t3665 * t4128;
    real_type t4437 = t3566 * t4023;
    real_type t4438 = t4437 * t4356;
    real_type t4442 = t3566 * t45;
    real_type t4446 = t3652 * t4157;
    result__[ 253 ] = -t3549 * t3683 - t3806 * t3878 - t3812 * (-2 * t4257 * t3983 - t3574 * (-t3991 * t3653 - t4391) - t3566 * t4001 * t3653 + 4 * t4399 * t4397) - t3587 * (4 * t3574 * t3566 * t3653 * t4011 + 2 * t4257 * t4016 - t3574 * (-t4027 * t3653 + 2 * t3674 * t4016) - t3566 * t4039 * t3653) - t3604 * (2 * t4420 * t3545 * t4063 - t4257 * t4070 - t3574 * (-t3652 * t4090 - t3674 * t4070) - t3695 * t4107) - t3608 * (t3574 * t4124 * t3653 + t4433) - t3618 * (-t3831 * t4353 - t4438) - 2 * t3622 * t4442 * t3652 * t4148 - t4165 * t3566 * t4159 * t4446;
    real_type t4450 = t3549 * t3653;
    real_type t4458 = t3578 * t10;
    real_type t4466 = 2 * t3555;
    real_type t4475 = 2 * t3571;
    result__[ 254 ] = t4450 * t3596 - t3874 - t3587 * (2 * t3655 * t4397 - 2 * t3594 * t4397 - t3652 * t3545 * (-2 * t3582 * t4042 + 2 * t4034 * t4458 + t4051)) - t3604 * (-t3695 * t3545 * (t4019 * (t3556 * t729 - t4077 - t4466 + t732 + t736 + t737 - t738 + t739 - t741) + t4466 + t3556 * t735 - t732 + t751 - t737 + t738 - t739 + t4077 + t741) - t3889 * t3545 * (t4019 * (t3553 * t735 - t4475 + t764 + t765 + t766 - t767) + t3553 * t729 + t4475 + t787 - t766 - t765 + t767) - t3652 * t3545 * (-2 * t4019 * t4458 + t4034 * t4114 + 2 * t4458)) - t3882 + t3618 * t3887 - t3891;
    real_type t4496 = t3574 * t3999;
    real_type t4497 = t4496 * t3653;
    real_type t4510 = t3578 * t85;
    real_type t4531 = t3545 * t4144;
    real_type t4534 = t3574 * t565;
    real_type t4535 = t4165 * t4534;
    result__[ 255 ] = t4450 * t3704 - t3812 * (t3566 * t3989 * t3653 + t4497) - t3587 * (-t3566 * (2 * t4020 - t579 + t3997 + t582 + t583) * t3653 - t3574 * (-2 * t4031 + t559 + t561 + t563 - t564 + t565 - t566 + t567) * t3653 - t3652 * t3545 * (-2 * t3578 * t4042 + t4510)) - t3604 * (-t3665 * t3562 * t3580 * t4082 - t3674 * t3562 * t3580 * t783 - t4397 * t3580 * t3578 * t816) - t3608 * (t4347 * t3653 + t4437 * t3685) + t3778 * t4368 * t4531 - t4535 * t4397;
    real_type t4542 = t3556 * t3556;
    real_type t4543 = t486 * t4542;
    real_type t4544 = t486 * t3964;
    real_type t4545 = -2 * t3556 * t476 * t3553 - t4543 + t4544;
    real_type t4546 = t4545 * t3562;
    real_type t4550 = t475 * t4542;
    real_type t4551 = t475 * t3964;
    real_type t4553 = -2 * t3556 * t517 * t3553 - 2 * t4550 + 2 * t4551;
    real_type t4566 = t3580 * t4553;
    real_type t4570 = t3580 * t4545;
    real_type t4591 = t3553 * t3556 * t676;
    real_type t4594 = -t4542 * t659 + t4058 - 2 * t4591;
    real_type t4610 = t3553 * t3556 * t796;
    result__[ 256 ] = -t3549 * t3724 - t3806 * t3903 - t3812 * (t4546 * t3653 + t3566 * (-2 * t3674 * t4553 * t3562 + t3611 * t3987 * t3653) + t4358 - 2 * t4004 * t4546 * t3653) - t3587 * (-2 * t4257 * t3562 * t4566 + t3566 * (2 * t3674 * t3562 * t4570 + 2 * t3578 * t3826 * t4397) - 2 * t3689 * t4023 * t4397 + t4397 * t4566) - t3604 * (-t4257 * t4019 * (t3964 * t667 - t4542 * t667 - 2 * t4067) + t3566 * (-t3674 * t4019 * t4594 - t3652 * t3545 * (t4019 * (t4098 + t4104) - t4098 + t4094)) - t3889 * t3545 * (t4019 * (-t4086 - t4074) - t4076 + t4074) - t3653 * t4019 * (t3964 * t802 - t4542 * t802 - 2 * t4610)) - t3618 * (-t4138 * t3611 * t3653 + t4438);
    real_type t4627 = t3559 - t1346;
    real_type t4628 = t4627 * t3562;
    real_type t4633 = t3582 * t80;
    real_type t4635 = t4633 * t3735 + t45 * t3987;
    real_type t4637 = t3574 * t4635 * t3653;
    real_type t4638 = t4004 * t510;
    real_type t4643 = t3580 * t4627;
    real_type t4663 = -2 * t4627;
    real_type t4668 = t3578 * t45;
    real_type t4678 = -t4663;
    real_type t4679 = t3545 * t4678;
    real_type t4684 = t45 * t3653;
    result__[ 257 ] = t3549 * t3695 * t3736 - t3806 * t3889 * t3620 - t3812 * (-2 * t4420 * t3545 * t4628 + 2 * t4638 * t4397 - t4373 - t4637) - t3587 * (-2 * t4257 * t3562 * t4643 + t3566 * (-2 * t3889 * t4382 * t4153 - (-2 * t4633 * t45 * t4019 + t3582 * t81 + 2 * t4023 * t3731) * t3653)) - t3604 * (-t4257 * t4019 * t4663 + t3566 * (-t3674 * t4019 * t709 - t3652 * t3545 * (-2 * t3562 * t3820 * t81 - 2 * t4019 * t4668 + 2 * t4668)) - t3652 * t4679) - t3608 * (t4364 * t4684 + t4369 * t4531);
    real_type t4693 = t3542 * t3889;
    real_type t4702 = t3562 * t3741;
    real_type t4704 = t3542 * t4004 * t3970;
    real_type t4713 = t3925 * t3741;
    real_type t4727 = t3542 * t4305;
    real_type t4745 = t4127 * t3741;
    real_type t4751 = t3542 * t3566;
    real_type t4758 = t3542 * t4140 * t3741;
    real_type t4763 = t3574 * t45;
    real_type t4764 = t3542 * t4763;
    real_type t4767 = t507 * t3741;
    real_type t4773 = t3652 * t3740 * t3582;
    real_type t4776 = t3542 * t3741;
    real_type t4778 = -t3925 * t4159 * t4773 + t4776 * t4162;
    real_type t4780 = t4169 * t856;
    real_type t4781 = t3542 * t4780;
    result__[ 258 ] = -t3549 * t3764 - t3806 * t3923 - t3812 * (-t3542 * t3971 * t3741 + t3566 * (t3542 * t3991 * t3741 + 2 * t4693 * t3740 * t3983) + t3542 * t4002 * t3741 + 2 * t4704 * t4702) - t3587 * (2 * t3542 * t4004 * t3741 * t4011 + t3566 * (t3542 * t4027 * t3741 - 2 * t4713 * t4016) + t3542 * t4040 * t3741 + t3762 * t3740 * t4053) - t3604 * (t4727 * t3740 * t4063 + t3566 * (t3762 * t3740 * t4089 + t4693 * t3740 * t4070) + t4693 * t3740 * t4106 + t3762 * t3740 * t4117) - t3608 * (t3542 * t4125 * t3741 - t3542 * t3820 * t4745 - t4693 * t3740 * t4128) - t3618 * (-t4751 * t3830 * t3578 * t3741 + t3925 * t4023 * t3614 * t3741 + t4758) - t3622 * (-2 * t4764 * t3652 * t3740 * t4147 - t3542 * t3735 * t4767) - t4165 * t4778 - t4781 * t3757;
    real_type t4786 = t3574 * t3784;
    real_type t4797 = t4004 * t3784;
    real_type t4827 = t4140 * t3784;
    real_type t4837 = t3783 * t4157;
    real_type t4840 = -t3784 * t4162 + t4160 * t4837;
    real_type t4842 = t856 * t3783;
    result__[ 259 ] = -t3549 * t3795 - t3806 * t3949 - t3812 * (t3971 * t3784 + t3566 * (-t3991 * t3784 - 2 * t4786 * t3983) - t4002 * t3784 - 2 * t4005 * t3784) - t3587 * (-2 * t4797 * t4011 + t3566 * (-t4027 * t3784 + 2 * t4786 * t4016) - t4040 * t3784 - t3783 * t4054) - t3604 * (-t4797 * t4063 + t3566 * (-t3783 * t4090 - t4786 * t4070) - t3803 * t4107 - t3783 * t4118) - t3608 * (-t4125 * t3784 + t4131 * t3784 + t4786 * t4128) - t3618 * (t3885 * t3578 * t3784 - t4138 * t3614 * t3784 - t4827) - t3622 * (2 * t3574 * t45 * t3783 * t4148 + t4153 * t3784) - t4165 * t4840 + t4169 * t4842 * t4167;
    real_type t4845 = LR__[19];
    result__[ 260 ] = t4845 * t3548;
    result__[ 261 ] = -t4845 * t3626;
    result__[ 262 ] = -t3542 * t4845 * t3741;
    result__[ 263 ] = t4845 * t3784;
    real_type t4849 = LR__[20];
    result__[ 264 ] = t4849 * t3548;
    result__[ 265 ] = -t4849 * t3626;
    result__[ 266 ] = -t3542 * t4849 * t3741;
    result__[ 267 ] = t4849 * t3784;
    real_type t4853 = LR__[21];
    result__[ 268 ] = t4853 * t3548;
    result__[ 269 ] = -t4853 * t3626;
    result__[ 270 ] = -t3542 * t4853 * t3741;
    result__[ 271 ] = t4853 * t3784;
    real_type t4857 = LR__[22];
    result__[ 272 ] = t4857 * t3548;
    result__[ 273 ] = -t4857 * t3626;
    result__[ 274 ] = -t3542 * t4857 * t3741;
    result__[ 275 ] = t4857 * t3784;
    real_type t4861 = LR__[23];
    result__[ 276 ] = t4861 * t3548;
    result__[ 277 ] = -t4861 * t3626;
    result__[ 278 ] = -t3542 * t4861 * t3741;
    result__[ 279 ] = t4861 * t3784;
    real_type t4865 = LR__[24];
    result__[ 280 ] = t4865 * t3548;
    result__[ 281 ] = -t4865 * t3626;
    result__[ 282 ] = -t3542 * t4865 * t3741;
    result__[ 283 ] = t4865 * t3784;
    real_type t4869 = LR__[25];
    result__[ 284 ] = t4869 * t3548;
    result__[ 285 ] = -t4869 * t3626;
    result__[ 286 ] = -t3542 * t4869 * t3741;
    result__[ 287 ] = t4869 * t3784;
    real_type t4873 = LR__[26];
    result__[ 288 ] = t4873 * t3548;
    result__[ 289 ] = -t4873 * t3626;
    result__[ 290 ] = -t3542 * t4873 * t3741;
    result__[ 291 ] = t4873 * t3784;
    real_type t4877 = LR__[27];
    result__[ 292 ] = t4877 * t3548;
    result__[ 293 ] = -t4877 * t3626;
    result__[ 294 ] = -t3542 * t4877 * t3741;
    result__[ 295 ] = t4877 * t3784;
    real_type t4881 = LR__[28];
    result__[ 296 ] = t4881 * t3548;
    result__[ 297 ] = -t4881 * t3626;
    result__[ 298 ] = -t3542 * t4881 * t3741;
    result__[ 299 ] = t4881 * t3784;
    real_type t4885 = LR__[29];
    result__[ 300 ] = t4885 * t3548;
    result__[ 301 ] = -t4885 * t3626;
    result__[ 302 ] = -t3542 * t4885 * t3741;
    result__[ 303 ] = t4885 * t3784;
    real_type t4889 = LR__[30];
    result__[ 304 ] = t4889 * t3548;
    result__[ 305 ] = -t4889 * t3626;
    result__[ 306 ] = -t3542 * t4889 * t3741;
    result__[ 307 ] = t4889 * t3784;
    real_type t4893 = LR__[31];
    result__[ 308 ] = t4893 * t3548;
    result__[ 309 ] = -t4893 * t3626;
    result__[ 310 ] = -t3542 * t4893 * t3741;
    result__[ 311 ] = t4893 * t3784;
    real_type t4897 = LR__[32];
    result__[ 312 ] = t4897 * t3548;
    result__[ 313 ] = -t4897 * t3626;
    result__[ 314 ] = -t3542 * t4897 * t3741;
    result__[ 315 ] = t4897 * t3784;
    real_type t4905 = t3618 * t856;
    real_type t4907 = t4780 * t3548;
    result__[ 316 ] = t3587 * t4168 * t4382 + t3604 * t4168 * t4167 + t4905 * t3548 + t4907;
    real_type t4913 = t4780 * t3626;
    result__[ 317 ] = -t3587 * t4231 * t4382 - t3604 * t4231 * t4167 - t4905 * t3626 - t4913;
    result__[ 318 ] = -t3587 * t4383 * t4167 + t3604 * t4383 * t4382;
    real_type t4926 = t4781 * t3741;
    result__[ 319 ] = -t3542 * t3587 * t856 * t4702 - t3542 * t3604 * t856 * t3757 - t3542 * t4905 * t3741 - t4926;
    real_type t4932 = t4780 * t3784;
    result__[ 320 ] = t3587 * t4842 * t4382 + t3604 * t4842 * t4167 + t4905 * t3784 + t4932;
    real_type t4933 = t3566 * t565;
    real_type t4934 = t3812 * t4933;
    real_type t4941 = t3545 * t565;
    real_type t4943 = t4165 * t3547 * t4941;
    result__[ 321 ] = -t4934 * t4158 - t3587 * (-t4159 * t3548 - t3984 * t4377) - t3604 * t4164 + t4943;
    real_type t4951 = t4165 * t3625 * t4941;
    result__[ 322 ] = t4934 * t4226 - t3587 * (t4159 * t3626 + t4175 * t4377) - t3604 * t4229 - t4951;
    result__[ 323 ] = -t3587 * (t3653 * t4162 - t4160 * t4446) - t3604 * t4380;
    result__[ 324 ] = t3587 * t3566 * t3653 * t4377 - t3604 * t3566 * t4159 * t4446 + t3812 * t4534 * t4446;
    real_type t4967 = t3587 * t3889;
    result__[ 325 ] = t4967 * t3545 * t4162 - t3604 * t4534 * t4397 - t4934 * t3653;
    real_type t4971 = t3542 * t3812;
    real_type t4983 = t3542 * t4165 * t3652 * t3740 * t565;
    result__[ 326 ] = t4971 * t4933 * t4773 - t3587 * (t3542 * t4159 * t3741 + t4713 * t4377) - t3604 * t4778 - t4983;
    real_type t4991 = t4165 * t3783 * t4941;
    result__[ 327 ] = -t4934 * t4837 - t3587 * (-t4159 * t3784 - t4786 * t4377) - t3604 * t4840 + t4991;
    real_type t4992 = t3717 - t3571 + t1712 + t66 + t68 - t70;
    real_type t4993 = t4992 * t3562;
    real_type t4994 = t3574 * t4993;
    real_type t4996 = -t3669;
    real_type t4997 = t3545 * t4996;
    real_type t5002 = t4992 * t3580;
    real_type t5003 = t3574 * t5002;
    real_type t5007 = LR__[2];
    real_type t5012 = t1731 * t3964 + t1735 + t1736 + t1740 - t1742 - 2 * t3967 + 2 * t3969 + t704 - t711 + t717 + t718;
    real_type t5013 = t3574 * t5012;
    real_type t5015 = t3578 * t3560;
    real_type t5024 = t3964 * t1753 + t1757 - t1758 + t1759 + t1760 + 4 * t3975 + t3978 - t4061 + t548 - t550 + t634 - t681 + t688 + t689 + t692 - t693 + t821;
    real_type t5025 = t3545 * t5024;
    real_type t5028 = t4544 - t3976 + t1765 + t525 + t4047 + t1766 - t634 + t635 - t495 - t496 + t497 + t550;
    real_type t5029 = t3545 * t5028;
    real_type t5046 = t3964 * t672 + t1759 + t1760 + t1785 + t1787 + t3978 - t4061 + t4591 + t548 - t550 + t634 - t681 + t688 + t689 + t692 - t693 + t821;
    real_type t5047 = t3562 * t5046;
    real_type t5049 = t3578 * t39;
    real_type t5050 = t3553 * t5049;
    real_type t5052 = t3578 * t1793 - t4097 + t5050;
    real_type t5053 = t3562 * t5052;
    real_type t5054 = t3582 * t1798;
    real_type t5056 = t3580 * t5054 + t5053;
    real_type t5057 = t3545 * t5056;
    real_type t5061 = t3556 * t5049;
    real_type t5064 = t4073 + t5061 + t3578 * (-t35 + t95 - t43 + t31 - t46 + t3559 + t50);
    real_type t5066 = t3562 * t5064 + t4131;
    real_type t5067 = t3545 * t5066;
    real_type t5070 = t3964 * t811 + t1815 + t1817 + t1820 + t1822 + t3969 + t4610 + t471 - t505 + t512 + t513;
    real_type t5071 = t3562 * t5070;
    real_type t5075 = t3566 * t3998;
    real_type t5076 = t5075 * t3548;
    real_type t5077 = t3574 * t1830;
    real_type t5079 = t4510 * t3548;
    real_type t5082 = t3545 * t81;
    real_type t5083 = t3582 * t3547;
    real_type t5084 = t3622 * t3566;
    real_type t5087 = t4165 * t4933;
    real_type t5089 = XR__[15];
    real_type t5090 = t5089 * t3547;
    real_type t5091 = LR__[11];
    real_type t5094 = XR__[16];
    real_type t5095 = sin(t5094);
    real_type t5096 = t5095 * t3562;
    real_type t5097 = cos(t5094);
    real_type t5099 = -t5097 * t3580 + t5096;
    real_type t5101 = t3574 * t3582 * t5099;
    real_type t5102 = t5101 * t3548;
    real_type t5105 = t3562 * t5097 + t3580 * t5095;
    real_type t5106 = t5105 * t3548;
    real_type t5108 = LR__[12];
    real_type t5110 = t1866 * t5097;
    real_type t5111 = XR__[11];
    real_type t5112 = t5110 - t5111 - t1865;
    real_type t5114 = t5095 * t1871;
    real_type t5115 = XR__[10];
    real_type t5116 = t5114 - t5115;
    real_type t5119 = LR__[14];
    real_type t5120 = t5119 * (t5112 * t3562 - t3580 * t5116);
    real_type t5122 = t5097 * t1871;
    real_type t5123 = t5122 + t1865 + t5111;
    real_type t5126 = t1866 * t5095 + t5115;
    real_type t5129 = LR__[15];
    real_type t5130 = t5129 * (t3562 * t5126 + t5123 * t3580);
    real_type t5133 = -t1890 - XR__[14];
    real_type t5135 = XR__[13];
    real_type t5136 = t3580 * t5135;
    real_type t5138 = LR__[17];
    real_type t5139 = t5138 * (t5133 * t3562 + t5136);
    real_type t5141 = -t5133;
    real_type t5143 = t3562 * t5135;
    real_type t5145 = LR__[18];
    real_type t5146 = t5145 * (t5141 * t3580 + t5143);
    result__[ 328 ] = -t3806 * (-t3547 * t4997 - t4994 * t3548 - t3568) - t5007 * (-t3655 * t3548 - t3660 * t3548 - t5003 * t3548) - t3812 * (t3566 * (-t5013 * t3548 + 2 * t3548 * t5015) - 2 * t3984 * t4035 - t4004 * t3547 * t5025 - t3547 * t5029) - t3587 * (2 * t4235 * t3548 + t3566 * (-t4243 * t3548 + 2 * t3984 * t4010) - t4251 * t3548 - t4015 * t3548) - t3604 * (-t4012 * t4309 + t3566 * (-t3547 * t5057 - t3984 * t5047) - t3621 * t5067 - t3548 * t5071) - t3608 * (-t5077 * t3548 - t5076 + t5079) + t5084 * t5083 * t5082 - t5087 * t4158 - t5091 * t5090 * t4167 - t5108 * (t5102 - t5106) + t5120 * t3548 + t5130 * t3548 + t5139 * t3548 + t5146 * t3548;
    real_type t5189 = t5075 * t3626;
    real_type t5191 = t4510 * t3626;
    real_type t5194 = t3582 * t3625;
    real_type t5198 = t5089 * t3625;
    real_type t5201 = t5101 * t3626;
    real_type t5202 = t5105 * t3626;
    result__[ 329 ] = -t3806 * (t3625 * t4997 + t4994 * t3626 + t3629) - t5007 * (t3655 * t3626 + t3660 * t3626 + t5003 * t3626) - t3812 * (t3566 * (t5013 * t3626 - 2 * t3626 * t5015) + 2 * t4175 * t4035 + t4004 * t3625 * t5025 + t3625 * t5029) - t3587 * (-2 * t4235 * t3626 + t3566 * (t4243 * t3626 - 2 * t4175 * t4010) + t4251 * t3626 + t4015 * t3626) - t3604 * (t4186 * t4309 + t3566 * (t3625 * t5057 + t4175 * t5047) + t3645 * t5067 + t3626 * t5071) - t3608 * (t5077 * t3626 + t5189 - t5191) - t5084 * t5194 * t5082 + t5087 * t4226 + t5091 * t5198 * t4167 - t5108 * (-t5201 + t5202) - t5120 * t3626 - t5130 * t3626 - t5139 * t3626 - t5146 * t3626;
    real_type t5209 = t5003 * t3653;
    real_type t5213 = t3665 * t3563;
    real_type t5214 = t4994 * t3653;
    real_type t5224 = -t4001;
    real_type t5226 = t3574 * t5224 * t3653;
    real_type t5234 = t3580 * t5052;
    real_type t5249 = t5089 * t3652;
    real_type t5252 = -t5105;
    real_type t5255 = t3574 * t3582 * t5252 * t3653;
    real_type t5256 = t5099 * t3653;
    result__[ 330 ] = -t3806 * (-t3652 * t3601 + t3656 + t5209) - t5007 * (-t3809 * t3653 - t5213 - t5214) - t3587 * (2 * t4005 * t3653 + t3566 * (t3991 * t3653 + t4391) - t5226 - t3971 * t3653) - t3604 * (t4257 * t3580 * t4069 + t3566 * (t3674 * t3580 * t5046 - t3652 * t3545 * (t3562 * t5054 - t5234)) - t3889 * t3545 * (-t3580 * t5064 + t4349) + t3653 * t3580 * t5070) - t5091 * t5249 * t4382 - t5108 * (t5255 - t5256) + t5119 * (-t3562 * t5116 - t5112 * t3580) * t3653 + t5129 * (t5123 * t3562 - t3580 * t5126) * t3653 + t5138 * (-t5133 * t3580 + t5143) * t3653 + t5145 * (t5141 * t3562 - t5136) * t3653;
    real_type t5277 = t3566 * t4993;
    real_type t5278 = t5277 * t3653;
    real_type t5282 = t3574 * t3654 * t3653;
    real_type t5283 = t3566 * t5002;
    real_type t5286 = t5007 * (-t5283 * t3653 + t5282);
    real_type t5300 = t3580 * t3653;
    real_type t5321 = t3574 * t3998 * t3653;
    real_type t5330 = t5108 * t3607;
    real_type t5331 = t5330 * t5256;
    result__[ 331 ] = -t3806 * (t3675 - t5278) - t5286 - t3812 * (-t4004 * t5012 * t3653 - t3574 * (-t5013 * t3653 + 2 * t3653 * t5015) - 2 * t3665 * t4035 + 2 * t4420 * t5025) - t3587 * (-t3566 * t4250 * t3653 - t3574 * t4245 + 2 * t4257 * t4010 - 4 * t4399 * t5300) - t3604 * (2 * t4420 * t4310 - t4257 * t5047 - t3574 * (-t3652 * t5057 - t3674 * t5047) - t3695 * t5067) - t3608 * (-t3566 * t1830 * t3653 + t5321) - t3778 * t3582 * t3652 * t5082 + t4535 * t4446 - t5331;
    real_type t5333 = t3806 * t3577 * t3653;
    real_type t5335 = t5007 * t3653 * t3596;
    real_type t5341 = t3587 * (-t3682 - t5282);
    real_type t5343 = -t3674 * t3664 - t5278;
    real_type t5344 = t3604 * t5343;
    result__[ 332 ] = -t5333 - t5335 - t3812 * (-2 * t3653 * t4458 - 2 * t3875 + 2 * t3877) - t5341 - t5344 - t3608 * t85 * t3653;
    real_type t5351 = t5007 * t3658 * t3653;
    real_type t5354 = t3574 * t4247;
    real_type t5355 = t5354 * t3653;
    real_type t5366 = t5108 * t3574 * t5099 * t3653;
    result__[ 333 ] = t3806 * t3653 * t3580 * t104 + t5351 - t3587 * (t3566 * t4240 * t3653 + t5355) - t3604 * (-t3665 * t3580 * t1798 - t4348) + t3696 * t5082 - t5087 * t3653 - t5366;
    real_type t5367 = -t3589 - t3555;
    real_type t5368 = t5367 * t3562;
    real_type t5373 = t3827 * t3653;
    real_type t5374 = t5367 * t3580;
    real_type t5385 = t3578 * t3614;
    real_type t5390 = t3611 * t3578;
    real_type t5429 = -t5061 - t4073;
    real_type t5434 = -t4097 + t5050;
    result__[ 334 ] = -t3806 * (-t3574 * t5368 * t3653 - t3711) - t5007 * (-t3574 * t5374 * t3653 - t5373) - t3812 * (t3566 * (-t3574 * (-2 * t3556 * t1731 * t3553 + 2 * t4543 - 2 * t4544) * t3653 + 2 * t3653 * t5385) - 2 * t3674 * t5390 - t4305 * t3545 * (-2 * t3556 * t3553 * t1753 - 4 * t4550 + 4 * t4551) - t3652 * t3545 * (-2 * t3967 + 2 * t4550 - 2 * t4551)) - t3587 * (2 * t4004 * t4570 * t3653 + t3566 * (-t3611 * t4023 * t3653 + 2 * t3674 * t4566) - t4138 * t4356 - t4570 * t3653) - t3604 * (-t4257 * t3562 * t4594 + t3566 * (-t3674 * t3562 * (-2 * t3556 * t3553 * t672 - t4542 * t676 + t4065) - t3653 * t3562 * t5429) - t3674 * t3562 * t5434 - t3653 * t3562 * (-2 * t3556 * t3553 * t811 - t4542 * t796 + t4109));
    real_type t5447 = t3806 * t3695 * t3732;
    real_type t5449 = t5007 * t3695 * t3736;
    real_type t5466 = -t3580 * t4668 + t3861 * t81;
    real_type t5467 = t3545 * t5466;
    real_type t5469 = t4153 * t3653;
    real_type t5479 = t3566 * t80;
    result__[ 335 ] = -t5447 - t5449 - t3812 * (t3566 * (-2 * t3574 * t510 * t3653 - 2 * t3653 * t4668) - t4305 * t4679) - t3587 * (2 * t4420 * t3545 * t4643 - t3889 * t5467 - 2 * t4638 * t5300 + t5469) - t3604 * (-t4420 * t3545 * t3562 * t4678 - t4257 * t3562 * t709 - t4373 - t4637) - t3608 * t5479 * t4684;
    real_type t5482 = t5119 * t3652;
    real_type t5484 = t5129 * t3652;
    result__[ 336 ] = t5482 * t4167 + t5484 * t4382;
    result__[ 337 ] = t5484 * t4167 - t5482 * t4382;
    real_type t5488 = t5138 * t3652;
    real_type t5490 = t5145 * t3652;
    result__[ 338 ] = t5488 * t4167 + t5490 * t4382;
    result__[ 339 ] = t5490 * t4167 - t5488 * t4382;
    real_type t5494 = t5091 * t3652;
    result__[ 340 ] = -t5494 * t4167;
    real_type t5498 = t3574 * t3582 * t5105 * t3653;
    real_type t5499 = -t5099;
    real_type t5500 = t5499 * t3653;
    result__[ 341 ] = -t5108 * (t5498 - t5500) + t5119 * (-t1866 * t5096 - t3580 * t5122) * t3653 + t5129 * (-t5095 * t1871 * t3580 + t3562 * t5110) * t3653;
    real_type t5514 = t3574 * t4992;
    real_type t5515 = t3542 * t5514;
    real_type t5521 = t3542 * t3876;
    real_type t5572 = t3542 * t5075 * t3741;
    real_type t5576 = t3542 * t4510 * t3741;
    real_type t5579 = t3741 * t81;
    real_type t5588 = t5099 * t3741;
    real_type t5589 = t3542 * t3686;
    real_type t5590 = t5589 * t5588;
    result__[ 342 ] = -t3806 * (t3762 * t3740 * t4996 + t5515 * t4702 + t3746) - t5007 * (t3542 * t3660 * t3741 + t5515 * t3757 + t5521 * t3757) - t3812 * (t3566 * (t3542 * t5013 * t3741 - 2 * t4776 * t5015) + 2 * t4693 * t3740 * t4035 + t4727 * t3740 * t5024 + t3762 * t3740 * t5028) - t3587 * (-2 * t4704 * t3757 + t3566 * (t3542 * t4243 * t3741 - 2 * t4693 * t3740 * t4010) + t3542 * t4251 * t3741 + t3542 * t4015 * t3741) - t3604 * (t4727 * t3740 * t4309 + t3566 * (t3762 * t3740 * t5056 + t4693 * t3740 * t5047) + t4693 * t3740 * t5066 + t4776 * t5071) - t3608 * (t3542 * t5077 * t3741 + t5572 - t5576) - t3940 * t3607 * t5579 + t3542 * t4165 * t4933 * t4773 + t3542 * t5091 * t5089 * t3757 - t5108 * (t3542 * t5105 * t3741 - t5590) - t3542 * t5120 * t3741 - t3542 * t5130 * t3741 - t3542 * t5139 * t3741 - t3542 * t5146 * t3741;
    real_type t5644 = t5075 * t3784;
    real_type t5646 = t4510 * t3784;
    real_type t5649 = t3582 * t3783;
    real_type t5653 = t5089 * t3783;
    real_type t5656 = t5101 * t3784;
    real_type t5657 = t5105 * t3784;
    result__[ 343 ] = -t3806 * (-t3783 * t4997 - t4994 * t3784 - t3787) - t5007 * (-t3655 * t3784 - t3660 * t3784 - t5003 * t3784) - t3812 * (t3566 * (-t5013 * t3784 + 2 * t3784 * t5015) - 2 * t4786 * t4035 - t4004 * t3783 * t5025 - t3783 * t5029) - t3587 * (2 * t4235 * t3784 + t3566 * (-t4243 * t3784 + 2 * t4786 * t4010) - t4251 * t3784 - t4015 * t3784) - t3604 * (-t4797 * t4309 + t3566 * (-t3783 * t5057 - t4786 * t5047) - t3803 * t5067 - t3784 * t5071) - t3608 * (-t5077 * t3784 - t5644 + t5646) + t5084 * t5649 * t5082 - t5087 * t4837 - t5091 * t5653 * t4167 - t5108 * (t5656 - t5657) + t5120 * t3784 + t5130 * t3784 + t5139 * t3784 + t5146 * t3784;
    real_type t5670 = -t5283 * t3548 - t3984 * t3591;
    real_type t5673 = t3984 * t3563;
    real_type t5676 = t3566 * t4038;
    real_type t5678 = t3574 * t4026;
    real_type t5682 = t3566 * t5224;
    real_type t5684 = t3574 * t3991;
    real_type t5686 = -t530 + t3979 - t3981 - t532 + t541 + t542 + t2445 + t2446;
    real_type t5687 = t3562 * t5686;
    real_type t5692 = t3578 * t27;
    real_type t5693 = t3556 * t5692;
    real_type t5696 = -t4073 + t5693 + t3578 * (t35 + t40 + t43 - t31 + t46 - t3559 - t50);
    real_type t5698 = t3580 * t5696 + t4349;
    real_type t5699 = t3545 * t5698;
    real_type t5701 = t3582 * t2464;
    real_type t5703 = t3562 * t5701 + t5234;
    real_type t5704 = t3545 * t5703;
    real_type t5706 = t681 - t3978 + t4061 + t634 + t687 - t689 + t2471 - t636;
    real_type t5707 = t3580 * t5706;
    real_type t5711 = t3608 * t4130;
    real_type t5713 = t3618 * t2481;
    real_type t5715 = t3622 * t510;
    real_type t5720 = t3574 * t707;
    real_type t5722 = t536 - t3558;
    real_type t5723 = t3566 * t5722;
    real_type t5726 = LR__[13];
    real_type t5728 = t3566 * t507;
    real_type t5730 = t3574 * t5722;
    real_type t5734 = t3556 * t21;
    real_type t5736 = t3553 * t21;
    real_type t5738 = t3567 * t5734 - t3984 * t5736;
    real_type t5739 = LR__[16];
    real_type t5743 = t3567 * t5736 + t3984 * t5734;
    result__[ 344 ] = -t3549 * (-t3876 * t3548 - t5514 * t3548) - t3806 * t5670 - t5007 * (t5277 * t3548 - t5673) - t3812 * (-t5676 * t3548 - t5678 * t3548) - t3587 * (-t5682 * t3548 - t5684 * t3548 + 2 * t3548 * t5687) - t3604 * (-t3548 * t5707 - t3621 * t5704 - t3835 * t5699) + t5711 * t3548 + t5713 * t3548 + t5715 * t3548 - t4943 - t4907 + t5091 * t3621 * t4157 - t5330 * t5106 - t5726 * (-t5720 * t3548 - t5723 * t3548) - t5129 * (-t5728 * t3548 - t5730 * t3548) - t5739 * t5738 - t5145 * t5743;
    real_type t5751 = t4175 * t3591 + t5283 * t3626;
    real_type t5754 = t4175 * t3563;
    real_type t5788 = -t3628 * t5734 + t4175 * t5736;
    real_type t5792 = -t3628 * t5736 - t4175 * t5734;
    result__[ 345 ] = -t3549 * (t3876 * t3626 + t5514 * t3626) - t3806 * t5751 - t5007 * (-t5277 * t3626 + t5754) - t3812 * (t5676 * t3626 + t5678 * t3626) - t3587 * (t5682 * t3626 + t5684 * t3626 - 2 * t3626 * t5687) - t3604 * (t3626 * t5707 + t3645 * t5704 + t3854 * t5699) - t5711 * t3626 - t5713 * t3626 - t5715 * t3626 + t4951 + t4913 - t5091 * t3645 * t4157 + t5330 * t5202 - t5726 * (t5720 * t3626 + t5723 * t3626) - t5129 * (t5728 * t3626 + t5730 * t3626) - t5739 * t5788 - t5145 * t5792;
    result__[ 346 ] = -t3806 * t5343 - t5286 - t3587 * (t3566 * t4250 * t3653 - t3574 * t4243 * t3653 - 2 * t3653 * t3580 * t5686) - t3604 * (-t3695 * t3545 * (t3562 * t5696 - t4131) - t3889 * t3545 * (-t3580 * t5701 + t5053) - t3653 * t3562 * t5706) - t5331;
    real_type t5818 = t3566 * t4992;
    real_type t5823 = -t3665 * t3591 + t5209;
    real_type t5858 = -t3665 * t5736 - t3674 * t5734;
    real_type t5859 = t5739 * t5858;
    real_type t5862 = t3665 * t5734 - t3674 * t5736;
    real_type t5863 = t5145 * t5862;
    result__[ 347 ] = -t3549 * (t3816 * t3653 - t5818 * t3653) - t3806 * t5823 - t5007 * (-t5214 - t5213) - t3812 * (-t3566 * t4026 * t3653 + t3574 * t4038 * t3653) - t3587 * (-t3566 * t3991 * t3653 + t5226) - t3604 * (-t3695 * t5704 + t3889 * t5699) + t5091 * t3695 * t4157 + t5108 * t3686 * t5105 * t3653 - t5726 * (-t3566 * t707 * t3653 + t5730 * t3653) - t5129 * (t3574 * t507 * t3653 - t5723 * t3653) - t5859 - t5863;
    real_type t5864 = -t5213 + t3667;
    result__[ 348 ] = -t3587 * t5864 - t3604 * (-t3656 - t5209);
    real_type t5873 = t3566 * t3999 * t3653;
    real_type t5884 = t5091 * t3574;
    real_type t5885 = t5884 * t3653;
    result__[ 349 ] = -t3812 * (-t3566 * t568 * t3653 - t5321) - t3587 * (t3574 * t3989 * t3653 - t5873) - t3604 * (-t3674 * t3562 * t2464 - t4433) + t3608 * t4127 * t3653 + t5885 - t5108 * t3566 * t5105 * t3653;
    real_type t5896 = -t3566 * t5374 * t3653 - t3674 * t3719;
    real_type t5900 = t3674 * t3709;
    real_type t5910 = t3553 * t5692 + t4097;
    real_type t5911 = t3580 * t5910;
    real_type t5912 = t3665 * t5911;
    real_type t5918 = -t5739 * t5858;
    real_type t5920 = -t5145 * t5862;
    result__[ 350 ] = -t3549 * (-t3574 * t5367 * t3653 - t3692) - t3806 * t5896 - t5007 * (t3566 * t5368 * t3653 - t5900) - t3587 * (-t3566 * t5385 * t4397 + t3574 * t5390 * t4397) - t3604 * (-t3674 * t3580 * t5429 - t5912) - t5918 - t5920;
    real_type t5922 = t3549 * t4442 * t3653;
    real_type t5924 = t3806 * t4763 * t5300;
    real_type t5926 = t5007 * t3889 * t3732;
    real_type t5929 = t3812 * t3574 * t4633 * t4684;
    real_type t5930 = -t4635;
    real_type t5945 = t5726 * t3566 * t3653;
    real_type t5947 = t5129 * t3574 * t3653;
    result__[ 351 ] = -t5922 + t5924 - t5926 - t5929 - t3587 * (-t3566 * t5930 * t3653 + 2 * t3653 * t4628) - t3604 * (-t3653 * t3580 * t4663 - t3695 * t5467) + t3608 * t4633 * t4684 - t5945 - t5947;
    result__[ 352 ] = -t5330 * t5500;
    real_type t5953 = t3542 * t5818;
    real_type t5956 = t4693 * t3755 + t5953 * t3757;
    real_type t5959 = t4693 * t3744;
    real_type t5965 = t3998 * t3741;
    real_type t5994 = t5105 * t3741;
    real_type t6010 = t3740 * t5734;
    real_type t6012 = t3740 * t5736;
    real_type t6014 = -t3745 * t6010 + t4693 * t6012;
    real_type t6018 = -t3745 * t6012 - t4693 * t6010;
    result__[ 353 ] = -t3549 * (t5515 * t3741 + t5521 * t3741) - t3806 * t5956 - t5007 * (-t5953 * t4702 + t5959) - t3812 * (t3542 * t3607 * t568 * t3741 + t5589 * t5965) - t3587 * (t3542 * t5682 * t3741 + t3542 * t5684 * t3741 - 2 * t4776 * t5687) - t3604 * (t3745 * t3740 * t5698 + t4693 * t3740 * t5703 + t4776 * t5707) - t3542 * t3608 * t3582 * t4745 - t3542 * t5713 * t3741 - t3542 * t3622 * t45 * t4767 + t4983 + t4926 - t3542 * t5884 * t4773 + t3542 * t5108 * t3607 * t5994 - t5726 * (t3542 * t5720 * t3741 + t3542 * t5723 * t3741) - t5129 * (t3542 * t5728 * t3741 + t3542 * t5730 * t3741) - t5739 * t6014 - t5145 * t6018;
    real_type t6026 = -t4786 * t3591 - t5283 * t3784;
    real_type t6029 = t4786 * t3563;
    real_type t6063 = t3786 * t5734 - t4786 * t5736;
    real_type t6067 = t3786 * t5736 + t4786 * t5734;
    result__[ 354 ] = -t3549 * (-t3876 * t3784 - t5514 * t3784) - t3806 * t6026 - t5007 * (t5277 * t3784 - t6029) - t3812 * (-t5676 * t3784 - t5678 * t3784) - t3587 * (-t5682 * t3784 - t5684 * t3784 + 2 * t3784 * t5687) - t3604 * (-t3784 * t5707 - t3803 * t5704 - t3959 * t5699) + t5711 * t3784 + t5713 * t3784 + t5715 * t3784 - t4991 - t4932 + t5091 * t3803 * t4157 - t5330 * t5657 - t5726 * (-t5720 * t3784 - t5723 * t3784) - t5129 * (-t5728 * t3784 - t5730 * t3784) - t5739 * t6063 - t5145 * t6067;
    real_type t6069 = t3806 * t3596;
    real_type t6071 = t5007 * t3577;
    real_type t6073 = t3812 * t4051;
    real_type t6080 = t3566 * t3718;
    result__[ 355 ] = -t6069 * t3548 + t6071 * t3548 + t6073 * t3548 - t3587 * (t3676 * t3548 + t5673) - t3604 * t5670 - t3687 * t3606 - t3618 * (-t3689 * t3548 - t6080 * t3548) + t3836 * t3620 + t5129 * t3548 + t5145 * t3548;
    result__[ 356 ] = t6069 * t3626 - t6071 * t3626 - t6073 * t3626 - t3587 * (-t3676 * t3626 - t5754) - t3604 * t5751 + t3687 * t3639 - t3618 * (t3689 * t3626 + t6080 * t3626) - t3855 * t3620 - t5129 * t3626 - t5145 * t3626;
    result__[ 357 ] = -t5333 - t5335 - t5341 - t5344;
    result__[ 358 ] = t3587 * t5864 - t3604 * t5823 - t3609 * t3685 - t3618 * (t3574 * t3718 * t3653 - t3901) - t3890 * t3620;
    real_type t6113 = t3812 * t85 * t3653;
    result__[ 359 ] = -t3608 * t3574 * t85 * t3653 + t6113;
    real_type t6119 = t3566 * t3712 * t3653 + t5900;
    result__[ 360 ] = -t3587 * t6119 - t3604 * t5896 - t3618 * (-t3566 * t5367 * t3653 - t3574 * t3726 * t3653);
    result__[ 361 ] = t3604 * t4763 * t5300 + t4967 * t3732;
    result__[ 362 ] = t3913 * t3757 - t3542 * t5007 * t10 * t4702 - t3542 * t3812 * t3582 * t3766 - t3587 * (-t3542 * t3566 * t3562 * t3747 - t5959) - t3604 * t5956 + t3767 * t3686 * t3766 - t3618 * (t3542 * t3689 * t3741 + t3542 * t6080 * t3741) - t3542 * t5084 * t3777 - t3542 * t5129 * t3741 - t3542 * t5145 * t3741;
    result__[ 363 ] = -t6069 * t3784 + t6071 * t3784 + t6073 * t3784 - t3587 * (t3676 * t3784 + t6029) - t3604 * t6026 - t3687 * t3797 - t3618 * (-t3689 * t3784 - t6080 * t3784) + t3960 * t3620 + t5129 * t3784 + t5145 * t3784;
    real_type t6173 = t3806 * t3658;
    real_type t6175 = t3545 * t85;
    real_type t6179 = t3574 * t2947;
    real_type t6183 = t2952 * t3580;
    real_type t6184 = t3566 * t6183;
    real_type t6189 = t3562 * t2959;
    real_type t6194 = t3608 * t2965;
    real_type t6196 = t5091 * t3566;
    real_type t6199 = t5108 * t3574 * t5252;
    real_type t6201 = t3545 * t80;
    real_type t6202 = t5119 * t3547;
    result__[ 364 ] = t6173 * t3548 + t5007 * t3580 * t3547 * t6175 - t3812 * (-t6179 * t3548 - t5076 + t5079) - t3587 * (t4496 * t3548 + t6184 * t3548) - t3604 * (-t5354 * t3548 - t3567 * t6189) + t6194 * t3548 - t6196 * t3548 + t6199 * t3548 + t6202 * t6201;
    real_type t6222 = t5119 * t3625;
    result__[ 365 ] = -t6173 * t3626 - t5007 * t3580 * t3625 * t6175 - t3812 * (t6179 * t3626 + t5189 - t5191) - t3587 * (-t4496 * t3626 - t6184 * t3626) - t3604 * (t5354 * t3626 + t3628 * t6189) - t6194 * t3626 + t6196 * t3626 - t6199 * t3626 - t6222 * t6201;
    result__[ 366 ] = -t3806 * t3581 * t3653 + t5351 - t3587 * (t3566 * t2952 * t3562 * t3653 + t5355) - t3604 * (t3665 * t3580 * t2959 + t4497) + t5108 * t3574 * t5499 * t3653;
    result__[ 367 ] = -t3812 * (-t3566 * t2947 * t3653 + t5321) - t3587 * (-t3574 * t6183 * t3653 + t5873) - t3604 * (-t3566 * t4247 * t3653 + t3674 * t6189) + t5885 + t5108 * t3566 * t5252 * t3653;
    result__[ 368 ] = -t6113;
    result__[ 369 ] = t3587 * t3574 * t4363 * t4684 - t3604 * t3574 * t4368 * t4531 - t3812 * t5479 * t4684;
    result__[ 370 ] = t5366;
    real_type t6293 = t3542 * t5482;
    result__[ 371 ] = -t3542 * t3806 * t3562 * t3766 - t3542 * t5007 * t3580 * t3766 - t3812 * (t3542 * t6179 * t3741 + t5572 - t5576) - t3587 * (-t3542 * t3566 * t2952 * t3757 - t3542 * t3896 * t5965) - t3604 * (t3745 * t3740 * t6189 + t3749 * t5965) - t3542 * t6194 * t3741 + t3542 * t6196 * t3741 - t3542 * t5108 * t3574 * t5252 * t3741 - t6293 * t3740 * t80;
    real_type t6313 = t5119 * t3783;
    result__[ 372 ] = t6173 * t3784 + t5007 * t3580 * t3783 * t6175 - t3812 * (-t6179 * t3784 - t5644 + t5646) - t3587 * (t4496 * t3784 + t6184 * t3784) - t3604 * (-t5354 * t3784 - t3786 * t6189) + t6194 * t3784 - t6196 * t3784 + t6199 * t3784 + t6313 * t6201;
    real_type t6315 = -t5367;
    real_type t6316 = t3545 * t6315;
    real_type t6326 = t3566 * t3987;
    real_type t6329 = t3718 * t3578;
    real_type t6330 = t3574 * t6329;
    real_type t6335 = -t5429;
    real_type t6336 = t3580 * t6335;
    real_type t6341 = t3618 * t858;
    result__[ 373 ] = -t3549 * (-t3835 * t6316 - t3616) - t3806 * t3833 - t5007 * (t3710 * t3548 + t3868 * t3548) - t3587 * (t6330 * t3562 * t3548 - t6326 * t6315 * t3548 - t4359 * t3548) - t3604 * (-t3567 * t6336 - t3984 * t5911 - t4141) + t6341 * t3548 + t4907 + t5739 * t5738 + t5145 * t5743;
    result__[ 374 ] = -t3549 * (t3854 * t6316 + t3642) - t3806 * t3852 - t5007 * (-t3710 * t3626 - t3868 * t3626) - t3587 * (-t6330 * t3562 * t3626 + t6326 * t6315 * t3626 + t4359 * t3626) - t3604 * (t3628 * t6336 + t4175 * t5911 + t4216) - t6341 * t3626 - t4913 + t5739 * t5788 + t5145 * t5792;
    real_type t6375 = t6315 * t3653;
    result__[ 375 ] = -t3806 * t3870 - t5007 * (-t3831 * t3653 - t5373) - t3587 * (t4140 * t3653 + t4437 * t6375 - t6330 * t5300) - t3604 * (-t3665 * t3562 * t6335 - t3674 * t3562 * t5910 - t4360);
    real_type t6396 = t3566 * t6329 * t4397;
    result__[ 376 ] = -t3549 * (t3889 * t6316 - t3692) - t3806 * t3887 - t5007 * (t4354 * t3653 - t5900) - t3587 * (t4357 * t6375 + t6396) - t3604 * (t3674 * t6336 - t5912) - t5918 - t5920;
    result__[ 377 ] = -t3587 * (-t3566 * t3562 * t6315 * t3653 + t3574 * t3718 * t3562 * t3653) - t3604 * (-t3665 * t3580 * t6315 - t3884);
    result__[ 378 ] = -t3549 * (-t6080 * t3653 - t3690) - t3806 * t3907 - t5007 * t6119 - t3587 * (t3574 * t5367 * t3578 * t4397 - t6396) - t3604 * (-t3665 * t3580 * t5434 - t3674 * t3580 * (-t5693 + t4073)) - t5859 - t5863;
    result__[ 379 ] = -t3549 * (t3745 * t3740 * t6315 + t3773) - t3806 * t3937 - t5007 * (-t3749 * t3829 * t3741 - t3932 * t4702) - t3587 * (t4751 * t3987 * t6315 * t3741 + t3542 * t4359 * t3741 - t3925 * t6329 * t4702) - t3604 * (t3745 * t3740 * t6336 + t4693 * t3740 * t5911 + t4758) - t3542 * t6341 * t3741 - t4926 + t5739 * t6014 + t5145 * t6018;
    result__[ 380 ] = -t3549 * (-t3959 * t6316 - t3800) - t3806 * t3957 - t5007 * (t3710 * t3784 + t3868 * t3784) - t3587 * (t6330 * t3562 * t3784 - t6326 * t6315 * t3784 - t4359 * t3784) - t3604 * (-t3786 * t6336 - t4786 * t5911 - t4827) + t6341 * t3784 + t4932 + t5739 * t6063 + t5145 * t6067;
    real_type t6492 = t3812 * t3566;
    real_type t6496 = t3574 * t45 * t4365;
    real_type t6508 = t5726 * t3574;
    real_type t6510 = t5129 * t3566;
    result__[ 381 ] = -t3549 * t3621 * t3620 - t3806 * t3835 * t3736 + t5007 * t3835 * t3732 + t6492 * t5083 * t5082 - t3587 * (t4372 * t3548 + t6496 * t3548) - t3604 * (-t3547 * t4167 * t3274 - t3621 * t5467) + t3622 * t3547 * t3620 - t6508 * t3548 + t6510 * t3548;
    result__[ 382 ] = t3549 * t3645 * t3620 + t3806 * t3854 * t3736 - t5007 * t3854 * t3732 - t6492 * t5194 * t5082 - t3587 * (-t4372 * t3626 - t6496 * t3626) - t3604 * (t3625 * t4167 * t3274 + t3645 * t5467) - t3622 * t3625 * t3620 + t6508 * t3626 - t6510 * t3626;
    result__[ 383 ] = -t5447 - t5449 - t3587 * (-t3574 * t45 * t4146 * t3653 - t5469) - t3604 * (-t3889 * t3545 * t5930 - t4397 * t3274);
    result__[ 384 ] = -t3587 * t4442 * t4365 * t3653 + t3737 * t5467 - t5922 + t5924 - t5926 - t5929 - t5945 - t5947;
    result__[ 385 ] = -result__[361];
    result__[ 386 ] = -result__[369];
    result__[ 387 ] = t3542 * t3549 * t3574 * t3777 + t3542 * t3806 * t3695 * t3939 - t3542 * t5007 * t3695 * t3740 * t3731 - t4971 * t3607 * t5579 - t3587 * (-t3542 * t3731 * t4767 - t4764 * t4365 * t3741) - t3604 * (t4776 * t3580 * t3274 + t4693 * t3740 * t5466) - t3542 * t3622 * t3652 * t3776 + t3542 * t6508 * t3741 - t3542 * t6510 * t3741;
    result__[ 388 ] = -t3549 * t3803 * t3620 - t3806 * t3959 * t3736 + t5007 * t3959 * t3732 + t6492 * t5649 * t5082 - t3587 * (t4372 * t3784 + t6496 * t3784) - t3604 * (-t3783 * t4167 * t3274 - t3803 * t5467) + t3622 * t3783 * t3620 - t6508 * t3784 + t6510 * t3784;
    real_type t6600 = t5726 * t3548;
    result__[ 389 ] = -t6600;
    result__[ 390 ] = t5726 * t3626;
    real_type t6601 = t3542 * t5726;
    result__[ 391 ] = t6601 * t3741;
    real_type t6602 = t5726 * t3784;
    result__[ 392 ] = -t6602;
    real_type t6604 = t5129 * t3547;
    result__[ 393 ] = t4167 * t6604 - t4382 * t6202;
    real_type t6607 = t5129 * t3625;
    result__[ 394 ] = -t4167 * t6607 + t4382 * t6222;
    result__[ 395 ] = result__[336];
    real_type t6609 = t3740 * t3562;
    real_type t6611 = t3740 * t3580;
    real_type t6612 = t3542 * t5484;
    result__[ 396 ] = t6293 * t6609 - t6611 * t6612;
    real_type t6615 = t5129 * t3783;
    result__[ 397 ] = t4167 * t6615 - t4382 * t6313;
    result__[ 398 ] = -t4167 * t6202 - t4382 * t6604;
    result__[ 399 ] = t4167 * t6222 + t4382 * t6607;
    result__[ 400 ] = result__[337];
    result__[ 401 ] = t6293 * t6611 + t6609 * t6612;
    result__[ 402 ] = -t4167 * t6313 - t4382 * t6615;
    result__[ 403 ] = t5739 * t3548;
    result__[ 404 ] = -t5739 * t3626;
    result__[ 405 ] = -t3542 * t5739 * t3741;
    result__[ 406 ] = t5739 * t3784;
    real_type t6628 = t5138 * t3547;
    real_type t6630 = t5145 * t3547;
    result__[ 407 ] = t4167 * t6630 - t4382 * t6628;
    real_type t6632 = t5138 * t3625;
    real_type t6634 = t5145 * t3625;
    result__[ 408 ] = -t4167 * t6634 + t4382 * t6632;
    result__[ 409 ] = result__[338];
    real_type t6636 = t3542 * t5488;
    real_type t6638 = t3542 * t5490;
    result__[ 410 ] = t6609 * t6636 - t6611 * t6638;
    real_type t6640 = t5138 * t3783;
    real_type t6642 = t5145 * t3783;
    result__[ 411 ] = t4167 * t6642 - t4382 * t6640;
    result__[ 412 ] = -t4167 * t6628 - t4382 * t6630;
    result__[ 413 ] = t4167 * t6632 + t4382 * t6634;
    result__[ 414 ] = result__[339];
    result__[ 415 ] = t6609 * t6638 + t6611 * t6636;
    result__[ 416 ] = -t4167 * t6640 - t4382 * t6642;
    result__[ 417 ] = t3547 * t4382 * t5091 - t5114 * t6600;
    result__[ 418 ] = -t3625 * t4382 * t5091 + t5114 * result__[390];
    result__[ 419 ] = result__[340];
    result__[ 420 ] = -t5726 * t3653 * t5122;
    result__[ 421 ] = t3542 * t3652 * t3740 * t5114 * t5726 - t3542 * t5494 * t6609;
    result__[ 422 ] = t3783 * t4382 * t5091 - t5114 * t6602;
    real_type t6672 = t3545 * t5122;
    real_type t6675 = t1871 * t5105;
    real_type t6676 = t5119 * t6675;
    real_type t6678 = t1871 * t5099;
    real_type t6679 = t5129 * t6678;
    result__[ 423 ] = -t5108 * (-t3548 * t5252 - t5102) - t5726 * t5090 * t6672 + t6676 * t3548 + t6679 * t3548;
    result__[ 424 ] = -t5108 * (t3626 * t5252 + t5201) + t5726 * t5198 * t6672 - t6676 * t3626 - t6679 * t3626;
    result__[ 425 ] = -t5108 * (-t5255 - t5500) + t5119 * t6678 * t3653 + t5129 * t1871 * t5252 * t3653;
    result__[ 426 ] = t5331;
    result__[ 427 ] = result__[370];
    result__[ 428 ] = result__[420];
    result__[ 429 ] = -t5108 * (-t5498 - t5256) + t5726 * t5249 * t3545 * t5114 + t5119 * t1871 * t5499 * t3653 + t5129 * t6675 * t3653;
    result__[ 430 ] = -t5108 * (t3542 * t3741 * t5252 + t5590) + t6601 * t5249 * t3740 * t5122 - t3542 * t5119 * t1871 * t5994 - t3542 * t5129 * t1871 * t5588;
    result__[ 431 ] = -t5108 * (-t3784 * t5252 - t5656) - t5726 * t5653 * t6672 + t6676 * t3784 + t6679 * t3784;
    real_type t6725 = t3545 * t3497;
    real_type t6727 = LR__[34];
    result__[ 432 ] = t6727 * t3499 * t3547 * t6725;
    result__[ 433 ] = -t6727 * t3499 * t3625 * t6725;
    result__[ 434 ] = -t3542 * t6727 * t3499 * t3652 * t3740 * t3497;
    result__[ 435 ] = t6727 * t3499 * t3783 * t6725;
    real_type t6740 = LR__[33] * t3514;
    result__[ 436 ] = t6740 * t3548;
    result__[ 437 ] = -t6740 * t3626;
    result__[ 438 ] = -t3542 * t6740 * t3741;
    result__[ 439 ] = t6740 * t3784;
    real_type t6745 = LR__[35] * t3520;
    result__[ 440 ] = t6745 * t3548;
    result__[ 441 ] = -t6745 * t3626;
    result__[ 442 ] = -t3542 * t6745 * t3741;
    result__[ 443 ] = t6745 * t3784;
    real_type t6750 = LR__[36] * t3526;
    result__[ 444 ] = t6750 * t3548;
    result__[ 445 ] = -t6750 * t3626;
    result__[ 446 ] = -t3542 * t6750 * t3741;
    result__[ 447 ] = t6750 * t3784;
    real_type t6754 = LR__[37];
    result__[ 448 ] = t6754 * t3548;
    result__[ 449 ] = -t6754 * t3626;
    result__[ 450 ] = -t3542 * t6754 * t3741;
    result__[ 451 ] = t6754 * t3784;
    real_type t6758 = LR__[38];
    result__[ 452 ] = t6758 * t3548;
    result__[ 453 ] = -t6758 * t3626;
    result__[ 454 ] = -t3542 * t6758 * t3741;
    result__[ 455 ] = t6758 * t3784;
    #ifdef MECHATRONIX_DEBUG
    CHECK_NAN(result__,"DadjointBCDxp_sparse",456);
    #endif
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  integer
  Straight::DadjointBCDp_numRows() const
  { return 78; }

  integer
  Straight::DadjointBCDp_numCols() const
  { return 0; }

  integer
  Straight::DadjointBCDp_nnz() const
  { return 0; }

  void
  Straight::DadjointBCDp_pattern(
    integer iIndex[],
    integer jIndex[]
  ) const {

  }

  void
  Straight::DadjointBCDp_sparse(
    NodeType2 const             & LEFT__,
    NodeType2 const             & RIGHT__,
    P_const_pointer_type          P__,
    OMEGA_full_const_pointer_type OMEGA__,
    real_type                     result__[]
  ) const {
    // EMPTY!
  }

}

// EOF: Straight_Methods.cc
